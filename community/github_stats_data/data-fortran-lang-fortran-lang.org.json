{
    "name": "fortran-lang/fortran-lang.org",
    "issues": [
        {
            "number": 193,
            "user": "awvwgk",
            "date": "2021-01-30 13:58:26+00:00",
            "title": "Monthly newsletter for February 2021",
            "text": "I put together a draft for the February monthly newsletter and populated it from the repository activities.\n\n collect PRs from stdlib\n collect PRs from fpm, setup-fpm and fpm-registry\n collect PRs from fortran-lang.org\n add link to Fortran monthly call recording\n update contributor data (@LKedward)\n add updates on classic flang\n add updates on LLVM flang\n add updates on LFortran (@certik)\n\nPlease review and edit if needed. As usual, please add your name to the authors list if you add, edit, or review content.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-01-30 14:40:39+00:00",
                    "text": "Thanks for starting! I'll update contributor data tomorrow."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-30 16:38:50+00:00",
                    "text": "Thanks for starting it. Do you think we should mention GSoC to try gather early interest from prospective students? Something like:\n\nThis year fortran-lang will be applying as an Org for Google Summer of Code. We started working on the application and the project ideas. If you'd like to help us flesh them out, please join our video call on (Milan TODO). If you're a student and you'd like to help build the Fortran ecosystem, or have a project idea you'd like to work on, please reach out and let us know (how exactly? Milan TODO).\n\nI think this would go in the Events section."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-30 16:45:41+00:00",
                    "text": "Regarding news from Classic Flang and LLVM Flang: @AlexisPerry, would you like to provide updates from both Flang projects for the monthly newsletter? We distribute these on the mailing list (131 subscribers), Discourse, and Twitter (604 followers). Flang updates in the newsletter may bring new users, and who knows, maybe even new contributors.\nHere's a sample newsletter from last month and what Flang updates look like: https://fortran-lang.org/newsletter/2021/01/01/Fortran-Newsletter-January-2021/#compilers\nPreviously @gklimowicz has been helping with these, but he stepped back and mentioned your name. It would be very helpful if you agreed to do it! :)"
                }
            ]
        },
        {
            "number": 192,
            "user": "awvwgk",
            "date": "2021-01-03 09:21:26+00:00",
            "title": "Sort fpm registry alphabetically",
            "text": "The fpm registry at packages/fpm is currently sorted chronologically in the order of addition to the registry, a more useful sorting would be alphabetically.\nIt appears that Liquid is not able to sort a hash map alphabetically (!) by itself, therefore implementing this in Liquid will be ugly.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-01-03 11:29:29+00:00",
                    "text": "Perhaps the best option is to structure the index differently, as an array instead of a hash map"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-01-03 12:23:25+00:00",
                    "text": "A hash map is the right representation for the registry, I see no need to adapt it due to the shortcomings of a templating language. An easy fix from the fpm-registry side would be sorting the index before committing it, alternatively we have to search for a gem that can add the feature we need for the webpage here."
                },
                {
                    "user": "LKedward",
                    "date": "2021-01-04 10:52:45+00:00",
                    "text": "True, though the index is only a serialisation, converting to an array serialisation does not preclude implementation as a hash map. I'd rather not complicate the build with additional Ruby code so sorting the index would be preferred.  It's unfortunate to rely on the ordering of the data for rendering the site but your proposed solution is perhaps the simplest."
                }
            ]
        },
        {
            "number": 191,
            "user": "awvwgk",
            "date": "2021-01-03 09:15:26+00:00",
            "title": "Fix author/maintainer output in fpm registry",
            "text": "Joins arrays of author/maintainer names with \" and \".\nAlso, simplifies fetching of registry in workflow file.",
            "comments": []
        },
        {
            "number": 190,
            "user": "awvwgk",
            "date": "2020-12-30 20:47:50+00:00",
            "title": "Add links to fpm contributing guidelines",
            "text": "The fpm contributing guidelines are not yet linked from the webpage. This PR adds links on the community page to the fpm contributor guide.",
            "comments": []
        },
        {
            "number": 189,
            "user": "jvdp1",
            "date": "2020-12-29 20:05:23+00:00",
            "title": "January 2021 newsletter draft",
            "text": "@milancurcic @LKedward @gklimowicz @certik\nHere is a draft for the January 2021 newsletter.\nI tried to update for fortran-lang.org and stdlib sections. Other sections (fpm, compilers, ...) must be still be updated.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-29 20:26:42+00:00",
                    "text": "Thanks a lot for starting it @jvdp1!"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-29 21:55:34+00:00",
                    "text": "I'll have a look at the fpm part."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-30 10:31:41+00:00",
                    "text": "Thanks for starting @jvdp1 and thanks for populating the fpm section @awvwgk - it was a busy month for fpm!\nLeft a few minor suggestions but everything else looks good. I'll update the contributor data tomorrow."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-04 16:36:04+00:00",
                    "text": "Thank you, @gklimowicz!\n@certik are there any updates for LFortran or is this good to go?"
                },
                {
                    "user": "certik",
                    "date": "2021-01-04 17:30:49+00:00",
                    "text": "There are updates, but I don't have time to write them down, so this is good to go."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-04 18:25:45+00:00",
                    "text": "Okay, sounds good, we can defer LFortran news to the next newsletter. I'll merge now. Thank you all!"
                }
            ]
        },
        {
            "number": 188,
            "user": "LKedward",
            "date": "2020-12-20 10:26:21+00:00",
            "title": "Use setup-ruby 2.7 to fix CI build",
            "text": "Fixes #184\nGithub changed the default Ruby binaries on the Ubuntu CI image which affected the installation of bundler.\nThis PR uses the setup-ruby action to select the correct version of Ruby.\nTested successfully on my fork.",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-29 21:28:01+00:00",
                    "text": "This is an important fix for the homepage generation. I'll go ahead and merge it."
                }
            ]
        },
        {
            "number": 187,
            "user": "smeskos",
            "date": "2020-12-19 19:43:09+00:00",
            "title": "Correct Compiler page and tutorial regarding Intel oneAPI and PGI to NVIDIA",
            "text": "This is a minor correction PR about INTEL and NVIDIA (former PGI) at both the \"compilers\" page and at the mini-book \"setting up your os\".",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 19:44:47+00:00",
                    "text": "This is partly duplicating the effort in #182 to update the Intel oneAPI compiler."
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-19 19:47:13+00:00",
                    "text": "This is partly duplicating the effort in #182 to update the Intel oneAPI compiler.\n\nOh.. I didn't even see that.. and it was just the previous PR..."
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-19 19:52:39+00:00",
                    "text": "I will leave it open for now since I have added other modifications in different places and we can delete the one overlapping regarding the description of Intel oneAPI on the compiler's page."
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-19 20:29:21+00:00",
                    "text": "I believe there is no conflict now with #182, the modifications I suggest here refer to Nvidia info on the compilers page and to the tutorial page."
                }
            ]
        },
        {
            "number": 186,
            "user": "awvwgk",
            "date": "2020-12-19 19:04:28+00:00",
            "title": "Add missing packages from list of popular Fortran projects",
            "text": "This should add all the remaining packages from #68 which have an open source license.\nImportant: since my background is electronic structure theory, I'm mostly not familiar with weather modeling or astrodynamics, which many of those projects are targeting. Somebody with experience in this fields should have a look over the descriptions and add tags as appropriate.\nThis PR will eventually close #68.",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-31 12:44:44+00:00",
                    "text": "Let's try the #build_preview again."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-12-31 12:45:43+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/186/"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-31 16:59:16+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-12-31 16:59:37+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 185,
            "user": "ElAlderson",
            "date": "2020-12-19 11:35:26+00:00",
            "title": "Intel compiler info needs to be updated on website",
            "text": "Intel Parallel Studio XE has been rebranded to Intel oneAPI which now contains two FORTRAN compilers: Intel FORTRAN Compiler Classic (ifort) and Intel FORTRAN Compiler Beta (ifx). Choosing a compiler and Fortran Compilers pages need to be updated accordingly.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-12-19 11:51:03+00:00",
                    "text": "Duplicate of #181"
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-19 11:53:07+00:00",
                    "text": "Bonsoir @ElAlderson, thanks for reporting \ud83d\udc4d"
                },
                {
                    "user": "ElAlderson",
                    "date": "2020-12-19 16:43:45+00:00",
                    "text": "Bonsoir @ElAlderson, thanks for reporting \ud83d\udc4d\n\nNo problem!"
                }
            ]
        },
        {
            "number": 184,
            "user": "awvwgk",
            "date": "2020-12-18 20:51:24+00:00",
            "title": "Jekyll build is broken",
            "text": "See https://github.com/fortran-lang/fortran-lang.org/actions/runs/431313773\nRun cd src\n  cd src\n  sudo gem install bundler\n  bundle config path .bundle\n  bundle install\n  shell: /bin/bash -e {0}\n  env:\n    SRC_DIR: src\n    PUBLISH_DIR: gh-pages\n    SITE_URL: https://fortran-lang.org\n    FPM_INDEX: https://raw.githubusercontent.com/fortran-lang/fpm-registry/master/index.json\nSuccessfully installed bundler-2.2.2\nParsing documentation for bundler-2.2.2\nInstalling ri documentation for bundler-2.2.2\nDone installing documentation for bundler after 3 seconds\n1 gem installed\n/usr/lib/ruby/2.5.0/rubygems.rb:289:in `find_spec_for_exe': can't find gem bundler (>= 0.a) with executable bundle (Gem::GemNotFoundException)\n\tfrom /usr/lib/ruby/2.5.0/rubygems.rb:308:in `activate_bin_path'\n\tfrom /usr/local/bin/bundle:23:in `<main>'\nError: Process completed with exit code 1.",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 20:08:45+00:00",
                    "text": "Looks like the Jekyll build workflow is actually broken."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-19 21:09:35+00:00",
                    "text": "This might be an issue with the lock file, updating it might help."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-20 10:49:08+00:00",
                    "text": "Looks like this is related to actions/virtual-environments#2193 which may be fixed by using https://github.com/ruby/setup-ruby. I will test on my branch"
                }
            ]
        },
        {
            "number": 183,
            "user": "jme52",
            "date": "2020-12-14 00:10:41+00:00",
            "title": "Questions about package information",
            "text": "Would it be possible to display packages (e.g., in https://fortran-lang.org/packages/scientific) more uniformly? At the moment those that are developed on GitHub have much more information available than those that are based on other websites, which may give the impression that non-GitHub packages a less active.  Would it be possible to display the same information for those developed on GitLab?\n\n\nWould it be possible to give more information (ideally in the submission documentation) about how the version information works?  Its purpose is not very clear at the moment. Is that the version that package rapporteurs will be checking?  Do other versions need to meet the criteria too?  Are there any plans to create version-based links (so the version string must match a tag in the repository)?\n\n\nThank you.",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-17 15:09:45+00:00",
                    "text": "I think the main reason for this that we are currently relying on shields.io to display the meta data, which has a rather strong focus on GH. It would be beneficial to have actually access to the meta data we are displaying rather than using a third-party provider for this purpose."
                }
            ]
        },
        {
            "number": 182,
            "user": "jme52",
            "date": "2020-12-13 23:54:06+00:00",
            "title": "Update compilers page following Intel oneAPI release.",
            "text": "This PR addresses #181.",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 19:52:44+00:00",
                    "text": "@smeskos If you don't mind, could you have a look on this PR and than we can just merge it."
                }
            ]
        },
        {
            "number": 181,
            "user": "jme52",
            "date": "2020-12-13 23:41:09+00:00",
            "title": "Update compilers page after Intel oneAPI release",
            "text": "The section on the Intel compiler is now outdated: the suite name has changed, there are now two compilers, and they are available for free.",
            "comments": []
        },
        {
            "number": 180,
            "user": "awvwgk",
            "date": "2020-12-12 18:47:49+00:00",
            "title": "Add TOML-Fortran to package index",
            "text": "This PR adds an entry for the toml-f library. The library implements a TOML 1.0.0-rc3 compliant parser in pure Fortran. The project is currently in beta stage (there is no v1.0 release for now), but is already successfully used in fpm.\nSince the projects main build system is still meson, with CMake and fpm supported as well, I think the package index is better suited than the fpm-registry.",
            "comments": []
        },
        {
            "number": 179,
            "user": "luoheng23",
            "date": "2020-12-11 07:04:25+00:00",
            "title": "Fix word spelling error in quickstart page",
            "text": "",
            "comments": []
        },
        {
            "number": 178,
            "user": "awvwgk",
            "date": "2020-12-07 19:09:23+00:00",
            "title": "Fix build preview",
            "text": "use new syntax to set environment variables",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-07 19:09:30+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-07 19:17:15+00:00",
                    "text": "This is still using the workflow file from the main repo rather than from this branch. Seems like the event triggering the build preview through a comment is not associated with the PR but with the latest commit on the main branch instead?\nSo you have to trust me that this will fix the issue with the build preview \ud83d\ude09"
                }
            ]
        },
        {
            "number": 177,
            "user": "milancurcic",
            "date": "2020-12-07 15:32:59+00:00",
            "title": "Build preview action is broken",
            "text": "See https://github.com/fortran-lang/fortran-lang.org/actions/runs/406143514",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-07 15:43:39+00:00",
                    "text": "GH actions switched the way environment variables are handled, the equivalent now should be:\necho \"BUILD_DIR=pr/172\" >> $GITHUB_ENV"
                }
            ]
        },
        {
            "number": 176,
            "user": "jme52",
            "date": "2020-12-04 17:20:04+00:00",
            "title": "Multi-word tags in packages",
            "text": "Is it possible to have tags that use multiple words separated by spaces?\nAt the moment there are packages that define multi-word tags with hyphens (\"electronic-structure-calculations\"), and packages where the same words are separated by spaces, thus actually creating multiple tags (electronic structure calculations).  This results in duplicated tags in the list of featured topis on https://fortran-lang.org/packages/ (e.g., I can see \"electronic-structure\", \"electronic\" and \"structure\"), which prevents other tags from appearing there at all.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-12-04 17:40:04+00:00",
                    "text": "Agreed, the tag implementation is a little messy currently and could do with a cleanup so that the tag cloud is more representative of the packages."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-04 17:41:48+00:00",
                    "text": "An alternative solution could be to simply use a manually curated list of tags on the package page."
                }
            ]
        },
        {
            "number": 175,
            "user": "jme52",
            "date": "2020-12-04 15:57:09+00:00",
            "title": "Find a package does not work on Firefox with ETP",
            "text": "The \"Find a package\" search functionality of https://fortran-lang.org/packages/ does not work for me on Firefox (78.4.0esr, 64-bit, linux) when Enhanced Tracking Protection is On.  By \"does not work\" I mean that, when ETP is enabled:\n\nThere is no visible list of tags under \"Featured topics\".\nThe search results page (e.g., https://fortran-lang.org/packages/search/?query=lapack) is always an empty list.",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-04 16:02:08+00:00",
                    "text": "Search functionality works fine with Mozilla Firefox 83.0 on 64 bit Manjaro Linux with Enhanced Tracking Protection for me."
                },
                {
                    "user": "jme52",
                    "date": "2020-12-04 17:07:44+00:00",
                    "text": "Thank you for checking.  I tried again with a new profile, and it works with ETP.\nIt's strange: when using ETP, in the new profile Firefox tells me that \"No trackers known to Firefox were detected on this page\", but in my normal profile (no extensions, clean cache) I get two blocked tracked contents: https://fonts.googleapis.com and https://ajax.googleapis.com ."
                }
            ]
        },
        {
            "number": 174,
            "user": "milancurcic",
            "date": "2020-12-03 14:19:13+00:00",
            "title": "Should fortran-lang.org have a Fortran code snippet on the landing page?",
            "text": "What prompted me to open this: https://twitter.com/asmeurer/status/1334423581837561856\nWhen putting together the first version of the website back in April, I wanted and tried to include an example Fortran code snippet. However, at the time, I struggled with my HTML and CSS to make it look pretty so in interest of time I dropped it and moved on. Then I forgot about it.\nFirst question is, should the landing page have an example code syntax, nicely styled, syntax-colored, some minimal but real-world example? The purpose is to show what Fortran looks and feels like, on a first impression to a newcomer to the language.\nSecond, if the answer is yes (and I think so), can you please think of and propose some example snippets that you think would be good for this? Then we can all discuss them and choose our favorite.\nThird, are you interested in making this happen? It should be a relatively low-hanging fruit, with I think a high ROI. It would probably require basic-to-intermediate HTML+CSS skills and a basic sense of good design.\nHere are examples for inspiration, some pretty, some not so pretty:\n\nPython\nGo\nNim\nElixir\nRuby\nHaskell",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-03 14:21:01+00:00",
                    "text": "Tagging @asmeurer: What do you think would be a good example and design? Thank you!"
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-03 14:50:23+00:00",
                    "text": "Nice idea, for me, a proper Hello Word example-code for Fortran would be a demonstration of a common and simplified version of a numerical method, eg. Newton-Raphson, or central-difference or something similar that could be written in 5-10 lines."
                },
                {
                    "user": "certik",
                    "date": "2020-12-03 17:00:43+00:00",
                    "text": "I was going to say what @smeskos suggested: some actual numerical method, that fits into a few lines. About 10 years ago, Travis Oliphant compared a simple vectorized Poisson solver in Python:\nhttp://technicaldiscovery.blogspot.com/2011/06/speeding-up-python-numpy-cython-and.html\nand I wrote a version in Fortran:\nhttps://github.com/certik/laplace_test\nthat was a lot faster: https://github.com/certik/laplace_test/blob/9f0f0c0377642a5d02a386fdda39d51808f75068/laplace_for.f90\nSo a simplified version could look something like this:\nprogram laplace_example\nimplicit none\ninteger, parameter :: dp=kind(0.d0), N = 100\nreal(dp) :: u(N,N), t1, t2\ncall cpu_time(t1)\nu = laplace(N, 8000, 0.1_dp, 0.1_dp)\ncall cpu_time(t2)\nprint *, \"Time:\", t2 - t1\nprint *, sum(u), sum(u**2)\n\ncontains\n\n    function laplace(N, Niter, dx, dy) result(u)\n    integer, intent(in) :: N, Niter\n    real(dp), intent(in) :: dx, dy\n    real(dp) :: u(N,N)\n    integer :: i\n    u(1,:) = 1\n    u(2:,:) = 0\n    do i = 1, Niter\n        u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1))*dy**2 + &\n            (u(2:N-1,3:) + u(2:N-1,:N-2))*dx**2) / (2*(dx**2 + dy**2))\n    end do\n    end function\n\nend program\nUpdate: I further simplified the code (it still returns the same answer):\nprogram laplace        \nimplicit none\ninteger, parameter :: dp=kind(0.d0), N = 100, Niter = 8000\nreal(dp) :: dx = 0.1_dp, u(N,N), t1, t2\ninteger :: i\ncall cpu_time(t1)\nu(1,:) = 1\nu(2:,:) = 0\ndo i = 1, Niter\n    u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1)) + &\n        (u(2:N-1,3:) + u(2:N-1,:N-2))) / 4\nend do\ncall cpu_time(t2)\nprint *, \"Time:\", t2 - t1\nprint *, sum(u), sum(u**2)\nend program\nOr to condense it even further to better fit at the front page:\nprogram laplace\nimplicit none\ninteger, parameter :: dp=kind(0.d0), N=100, Niter=8000\nreal(dp) :: dx=0.1_dp, u(N,N)\ninteger :: i\nu(1,:) = 1; u(2:,:) = 0\ndo i = 1, Niter\n    u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1)) + &\n        (u(2:N-1,3:) + u(2:N-1,:N-2))) / 4\nend do\nprint *, sum(u), sum(u**2)\nend program\nOnly 12 lines and it is the full program that compiles and runs."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-12-03 17:01:10+00:00",
                    "text": "A Newton-Raphson like example could be written in FORTRAN 77 as well. How\nabout a/my simple qsort example? That would demonstrate array operations as\nwell as non-trivial memory management.\n\nOp do 3 dec. 2020 15:50 schreef smeskos <notifications@github.com>:\n\u2026\n Nice idea, for me, a proper *Hello Word* example-code for Fortran would\n be a demonstration of a common and simplified version of a numerical\n method, eg. Newton-Raphson, or central-difference or something similar that\n could be written in 5-10 lines.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#174 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4UDRARF6KHUFDZJVLSS6QUBANCNFSM4UMBJH2Q>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-12-03 17:02:42+00:00",
                    "text": "@arjenmarkus, can you post an example that compiles? Let's compare code snippets, then we can effectively select the best one to represent Fortran."
                },
                {
                    "user": "asmeurer",
                    "date": "2020-12-03 17:54:56+00:00",
                    "text": "Thanks for opening this issue. To me, the most important thing is just to show what the basic syntax looks like. Believe it or not, quite a few people have never actually seen a Fortran program before."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-12-03 20:11:01+00:00",
                    "text": "@Ond\u0159ej \u010cert\u00edk <ondrej@certik.us>\n, well, here is an example:\n\n! qsort_reals.f90 --\n!\n!     Example belonging to \"Modern Fortran in Practice\" by Arjen Markus\n!\n!     This work is licensed under the Creative Commons Attribution 3.0\nUnported License.\n!     To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/3.0/\n!     or send a letter to:\n!     Creative Commons, 444 Castro Street, Suite 900, Mountain View,\nCalifornia, 94041, USA.\n!\n!     Compact implementation of the QuickSort algorithm\n!\n!     Note:\n!     Because the function uses Fortran 90 features, its interface should\nbe made\n!     explicit when using it in an actual program. This is easiest via a\nmodule.\n!\nmodule qsort_functions\n    implicit none\ncontains\nrecursive function qsort_reals( data ) result( sorted )\n    real, dimension(:), intent(in) :: data\n    real, dimension(1:size(data))  :: sorted\n\n    if ( size(data) > 1 ) then\n        sorted = &\n            (/ qsort_reals( pack( data(2:), data(2:) > data(1) ) ), &\n               data(1),                                             &\n               qsort_reals( pack( data(2:), data(2:) <= data(1) ) ) /)\n    else\n        sorted = data\n    endif\nend function qsort_reals\nend module qsort_functions\n\n! test --\n!     Straightforward test ...\n!\nprogram test_qsort_reals\n    use qsort_functions\n\n    implicit none\n\n    real, dimension(200) :: r\n\n    call random_number( r )\n\n    write(*,'(f12.5)') qsort_reals( r )\nend program test_qsort_reals\n\n\nOther examples I was thinking about: read a list of numbers, store them in\na growing array and then determine basic statistical parameters.\n\nOp do 3 dec. 2020 om 18:03 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus>, can you post an example\n that compiles? Let's compare code snippets, then we can effectively select\n the best one to represent Fortran.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#174 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRY6ZWQIMUVCTRQ2P43SS7AEHANCNFSM4UMBJH2Q>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-12-03 20:56:37+00:00",
                    "text": "@asmeurer wrote:\n\nBelieve it or not, quite a few people have never actually seen a Fortran program before.\n\nOh, we believe it. That is why where are all here trying to fix it. :) Thank you again for your feedback."
                }
            ]
        },
        {
            "number": 173,
            "user": "awvwgk",
            "date": "2020-12-03 09:31:08+00:00",
            "title": "Update package index (add octopus)",
            "text": "add octopus (https://gitlab.com/octopus-code/octopus)\nremove version tag from atomsk\nadd version tag to libnegf",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-06 15:50:16+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 172,
            "user": "milancurcic",
            "date": "2020-12-01 01:41:36+00:00",
            "title": "December 2020 newsletter draft",
            "text": "Sorry for the late start on this.\nI populated the PR updates for each project. Please review and edit if needed. I will specifically need help from:\n\n@gklimowicz (Classic and LLVM Flang updates)\n@certik (LFortran updates)\n@LKedward (contributors data update)\n\nAs usual, please add your name to the authors list if you add, edit, or review content.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-02 18:10:16+00:00",
                    "text": "@certik @gklimowicz do you think you can provide compiler updates by the end of the week? Sorry again for the late notice."
                },
                {
                    "user": "gklimowicz",
                    "date": "2020-12-02 18:17:55+00:00",
                    "text": "Yes, but the probability increases as we approach Friday."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-04 19:13:18+00:00",
                    "text": "I'll merge the PR on Monday, 12/07, any additions are welcome until then."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-07 15:23:12+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-07 15:29:35+00:00",
                    "text": "Apologies, it looks like the build preview action is broken due to a previous deprecation in github actions."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-07 15:31:02+00:00",
                    "text": "Thank you all! I will go ahead and merge.\nThe build preview CI failed because set-env is not allowed anymore. I will open a separate issue for that, but for now I will just go ahead with this as the newsletter seems fine from looking at the md file."
                }
            ]
        },
        {
            "number": 171,
            "user": "milancurcic",
            "date": "2020-12-01 00:54:57+00:00",
            "title": "Add Sebastian to the list of authors in the building-programs mini-book",
            "text": "I have merged #156 but only later realized that we didn't add @awvwgk to the list of authors. I did so in this PR. @awvwgk are you okay with this?",
            "comments": []
        },
        {
            "number": 170,
            "user": "ivan-pi",
            "date": "2020-11-17 16:45:11+00:00",
            "title": "Fix PSBLAS github address mistake",
            "text": "Fixes the typo I made.",
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2020-11-17 16:47:19+00:00",
                    "text": "Since @certik and @LKedward already reviewed the package is suitable and this is only a tiny correction, I will go ahead and merge."
                }
            ]
        },
        {
            "number": 169,
            "user": "ivan-pi",
            "date": "2020-11-17 16:17:58+00:00",
            "title": "Add PSBLAS to package index",
            "text": "Adds https://github.com/sfilippone/psblas3\nThis is an established library for sparse matrix linear algebra operations. It is described in several publications.\nPerhaps it will be necessary to update the license manually.",
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2020-11-17 16:39:07+00:00",
                    "text": "Ooops, I mistyped the github name.\nIt should read \"sfilippone/psblas3\"."
                }
            ]
        },
        {
            "number": 168,
            "user": "milancurcic",
            "date": "2020-11-06 15:35:30+00:00",
            "title": "Newsletter on the October 2020 J3 meeting",
            "text": "There is a thread with a summary from the meeting here.\nLike we did with the February meeting newsletter, it would be useful to make and distribute a post about the progress made in the October meeting.\nIt looks like the GitHub issue thread could be largely adapted into a post. However, it would be helpful and nice to also have a brief discussion on the progress and future outlook, i.e. how did this meeting steer the course toward F202X.\nThe motivation for this is to leverage the fortran-lang reach and audience and promote the Committee's work.\nWhat do you think? @certik @zjibben @sblionel @longb @rouson @gklimowicz @everythingfunctional @FortranFan @tclune @mleair",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-11-06 16:54:42+00:00",
                    "text": "I obviously agree, that is what I have been pushing all along and why Zach and I took our time to write things up.\n\nHowever, I would appreciate more help from the WG5 and J3 leadership. In my opinion it should be the leadership driving this effort (especially the part about future outlook and how the meeting steers towards F202X), and I can of course help, but it shouldn't be me driving this, as I am not in the committee leadership."
                },
                {
                    "user": "sblionel",
                    "date": "2020-11-06 19:33:48+00:00",
                    "text": "I'll be glad to do a writeup - probably for my blog as that's where I've written about standards progress before. Let me review the summary thread for ideas."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-06 22:40:43+00:00",
                    "text": "Thank you @sblionel. Would you agree to co-author your write-up with @certik and @zjibben who already wrote a useful summary, and cross-post the article on both fortran-lang.org and your website?\nI understand if you prefer to write your own thing for your website. In that case, we (others) should still publish one on fortran-lang.org. I think what @certik and @zjibben wrote is a great start. I could help summarize the discussion that followed in that thread."
                },
                {
                    "user": "FortranFan",
                    "date": "2020-11-07 12:49:17+00:00",
                    "text": "@milancurcic wrote Nov. 6, 2020, 10:35 AM EST:\n\nThere is a thread with a summary from the meeting here.\nLike we did with the February meeting newsletter, it would be useful to make and distribute a post about the progress made in the October meeting.\nIt looks like the GitHub issue thread could be largely adapted into a post. However, it would be helpful and nice to also have a brief discussion on the progress and future outlook, i.e. how did this meeting steer the course toward F202X.\nThe motivation for this is to leverage the fortran-lang reach and audience and promote the Committee's work.\nWhat do you think? @certik @zjibben @sblionel @longb @rouson @gklimowicz @everythingfunctional @FortranFan @tclune @mleair\n\nAs you all will know, J3 also puts out the meeting minutes which may be useful to reference in the newsletter: https://j3-fortran.org/doc/year/20/minutes222.txt\nGreat job on the newsletter."
                },
                {
                    "user": "sblionel",
                    "date": "2020-11-08 15:54:48+00:00",
                    "text": "@milancurcic , I think the idea of separate posts would work better. I can write mine from the WG5 perspective, and others can write one from the user perspective. We should cross-link the posts."
                }
            ]
        },
        {
            "number": 167,
            "user": "milancurcic",
            "date": "2020-11-03 23:47:15+00:00",
            "title": "Revert \"Test Twitter, try 2\"",
            "text": "Reverts #166",
            "comments": []
        },
        {
            "number": 166,
            "user": "milancurcic",
            "date": "2020-11-03 23:41:13+00:00",
            "title": "Test Twitter, try 2",
            "text": "This time I removed the secrets from the Org and added them to the repo.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 23:41:36+00:00",
                    "text": "#tweet This is a test tweet."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 23:41:50+00:00",
                    "text": "[tweet] the following message will be tweeted in @fortranlang after this PR is merged (character count: 21/280):\n\nThis is a test tweet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 23:45:49+00:00",
                    "text": "@p-costa Same error persists. I will let you figure it out. I will give you permissions to the repo so you can set up the keys. Unfortunately, Twitter doesn't allow team management of the developer account (to get the secrets), but only for reading and posting tweets. I will contact you by email about getting access to the Twitter account."
                }
            ]
        },
        {
            "number": 165,
            "user": "milancurcic",
            "date": "2020-11-03 21:59:33+00:00",
            "title": "Revert \"Test Twitter CI\"",
            "text": "Reverts #164",
            "comments": []
        },
        {
            "number": 164,
            "user": "milancurcic",
            "date": "2020-11-03 21:50:04+00:00",
            "title": "Test Twitter CI",
            "text": "",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 21:52:58+00:00",
                    "text": "#tweet This is a test tweet."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 21:53:14+00:00",
                    "text": "[tweet] the following message will be tweeted in @fortranlang after this PR is merged (character count: 21/280):\n\nThis is a test tweet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 22:06:10+00:00",
                    "text": "@p-costa I double-checked the names of the secrets (look okay to me), and I updated their values. I also double-checked that we have r+w access for the app in the Twitter account. We still get the same error.\nThis confuses me though:\n\nWhat is consumer-key? Is that a different name for one of the secrets or something different?\nDo you see if these are incorrect in any way?\n\nAnd here are the permissions.\n\nWhat do you think?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 22:08:27+00:00",
                    "text": "I just looked in ethomson/send-tweet-action. Here's the snippet from their README:\nname: Send a Tweet\non: [push]\njobs:\n  tweet:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ethomson/send-tweet-action@v1\n        with:\n          status: \"Hi, this is a test!\"\n          consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}\n          consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}\n          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n\nNote the secrets names here. They are different from what twitter-together instructs.\nShould we rename TWITTER_API_KEY to TWITTER_CONSUMER_API_KEY and TWITTER_API_SECRET to TWITTER_CONSUMER_API_SECRET?"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 22:31:57+00:00",
                    "text": "Hi Milan,\nIt is no problem that they are different as long as the names in our CI are consistent with those in the github settings:\n        status: ${{steps.extract-tweet.outputs.body}}\n        consumer-key: ${{secrets.TWITTER_API_KEY}}\n        consumer-secret: ${{secrets.TWITTER_API_SECRET_KEY}}\n        access-token: ${{secrets.TWITTER_ACCESS_TOKEN}}\n        access-token-secret: ${{secrets.TWITTER_ACCESS_TOKEN_SECRET}}\n\nI tested it on my own twitter account. (what matters is they are passed correctly to send-tweet-action). So it all looks good to me... Can it be that the keys are swapped? I can dig further into this sometime tomorrow."
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 22:35:54+00:00",
                    "text": "Perhaps trying the classical solution removing those secrets and adding them again? It seems that the secrets are not passing correctly to the CI. We get an error from the first secret the CI tries to fetch from the repo. (also generating new keys on the twitter app)"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 23:33:30+00:00",
                    "text": "It's possible that the keys are incorrect but I find it unlikely considering I did it twice. The error message \"consumer-key is required input\" just doesn't make it sound like the key is incorrect, but missing altogether.  It's possible that the org secrets are not correctly propagated to the repo secrets, even though they say they are. I will try this next."
                }
            ]
        },
        {
            "number": 163,
            "user": "milancurcic",
            "date": "2020-10-31 15:49:01+00:00",
            "title": "November newsletter",
            "text": "I populated the website updates summary.\nHere's what remains:\n\n stdlib updates; @jvdp1 can you tackle this one?\n fpm updates; @awvwgk or @everythingfunctional can you tackle this one?\n update URL of the monthly call video @ivan-pi\n flang updates @gklimowicz\n LFortran updates @certik\n Contributors data @LKedward\n\nAs usual, add your name to the authors list if you add, edit, or review content.\nConsidering that I started this draft very last minute and also that it's the weekend, don't worry about having it ready for November 1, just do it at your convenience.\nThank you all!",
            "comments": [
                {
                    "user": "jvdp1",
                    "date": "2020-10-31 16:10:12+00:00",
                    "text": "I will look at it this evening.\n\nLe sam. 31 oct. 2020 \u00e0 16:49, Milan Curcic <notifications@github.com> a\n\u00e9crit :\n\u2026\n Assigned #163 <#163>\n to @jvdp1 <https://github.com/jvdp1>.\n\n \u2014\n You are receiving this because you were assigned.\n Reply to this email directly, view it on GitHub\n <#163 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AD5RO7AM2SLFRJPCOKZOL4LSNQWXVANCNFSM4TF6U6WQ>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-11-02 19:33:16+00:00",
                    "text": "I am working on the LFortran part, should have it ready later in the afternoon."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 14:40:04+00:00",
                    "text": "Thank you all, I think it's in great shape.\n@LKedward and @p-costa: Do you want to give it a shot with the Tweet? Here's an example for reference: https://twitter.com/fortranlang/status/1312119558543609856"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 14:43:28+00:00",
                    "text": "#tweet Fortran monthly newsletter, November 2020 edition:\nhttps://fortran-lang.org/newsletter/2020/11/01/Fortran-Newsletter-November-2020"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 14:43:44+00:00",
                    "text": "[tweet withdrawn]"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 14:44:38+00:00",
                    "text": "#tweet Fortran monthly newsletter, November 2020 edition: https://fortran-lang.org/newsletter/2020/11/01/Fortran-Newsletter-November-2020"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 14:44:54+00:00",
                    "text": "[tweet] the following message will be tweeted in @fortranlang after this PR is merged (character count: 130/280):\n\nFortran monthly newsletter, November 2020 edition: https://fortran-lang.org/newsletter/2020/11/01/Fortran-Newsletter-November-2020"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 14:46:51+00:00",
                    "text": "(character count is overestimated because of the link)"
                },
                {
                    "user": "certik",
                    "date": "2020-11-03 15:36:55+00:00",
                    "text": "Looks great!\n\u2026\nOn Tue, Nov 3, 2020, at 7:47 AM, Pedro Costa wrote:\n\n\n (character count is overestimated because of the link)\n\n \u2014\n You are receiving this because you were assigned.\n Reply to this email directly, view it on GitHub\n <#163 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWEXVCRNJ7AXG3BANW3SOAJWXANCNFSM4TF6U6WQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 15:53:48+00:00",
                    "text": "It looks like the Tweet CI failed. I'll be able to look into it later today."
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 16:02:42+00:00",
                    "text": "it looks like an issue with the configuration of the access tokens.\nsome possible causes based on my previous tests when developing could be\n\na mismatch in the name of the keys under the repo secrets, which should match the following names:\n\nTWITTER_API_KEY\nTWITTER_API_SECRET_KEY\nTWITTER_ACCESS_TOKEN\nTWITTER_ACCESS_TOKEN_SECRET\n\n\nlack of writing privileges in the twitter app\nof course, some mismatch in the keys when they were copied into the repo"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 18:21:37+00:00",
                    "text": "I will double-check, update if needed, and open a test PR just for the tweet."
                }
            ]
        },
        {
            "number": 162,
            "user": "ivan-pi",
            "date": "2020-10-31 12:46:44+00:00",
            "title": "November 2020 Newsletter",
            "text": "Has anyone started to work on this already?\nThe monthly call recording should be ready soon.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-10-31 13:46:39+00:00",
                    "text": "I haven't, though I planned it for this afternoon. Do you mind listing the PRs for one of the sections (website, stdlib, or fpm) and I can do the rest?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-31 15:24:46+00:00",
                    "text": "I'm putting together a website PR summary now."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-06 15:23:55+00:00",
                    "text": "Fixed by #163."
                }
            ]
        },
        {
            "number": 161,
            "user": "certik",
            "date": "2020-10-27 19:20:27+00:00",
            "title": "Add a section about autodiff",
            "text": "It was discussed at the October 2020 Fortran call to add a section to our website about autodiff, similar to https://www.juliadiff.org/, that would list all the libraries and tools for automatic differentiation and we would keep it up to date as we develop such tools more.",
            "comments": [
                {
                    "user": "sgeard",
                    "date": "2020-10-27 22:16:48+00:00",
                    "text": "In the recent lockdown I decided to re-implement some code I wrote about 20 years ago to make it more extensible to higher derivatives. Currently it supports up to and including 4th:\nmy autodiff\nIt uses operator overloading, function pointers and type inheritance (order n extends order n-1). Built and tested with gfortran 10.1.0"
                }
            ]
        },
        {
            "number": 160,
            "user": "awvwgk",
            "date": "2020-10-27 15:28:48+00:00",
            "title": "Add in-depth introduction for Fortran with make",
            "text": "I just gave make and Fortran another try and realized again why I dropped it from all my project in the first place. Nevertheless, the attempt of writing this up might still be helpful for somebody learning make.\nThe idea of the guide is the following, take a real world example from the Fortran package index with medium complexity (more than one source file, but not a huge project), which is not using make as build system and describe the process of porting it to make as insightful as possible.\nThis guide describes:\n\ncreating simple functions\ncreating maps in make\nforeach loops over lists\nusing eval to generate make expressions from lists\nhandling of dependencies\npartly generating the Makefile with external tools\nwildcard functionality to detect source files\n\nLet me know what you think about this.",
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-27 15:45:33+00:00",
                    "text": "What is the level of sophistication you intend to reach? I have seen incredibly complicated Makefiles (mostly generated via tools like automake) that are not intended to be read or understood by mere mortals, but I have never encountered functions, maps, loops over lists or eval, at least not in Makefiles that were intended for mere mortals.\nAnd I do not think it is necessary to make it so sophisticated ;). But I may be mistaken. I would say that describing the last three points in depth would suffice for most if not all Fortran projects, but you can easily prove me wrong. After all, an essential tool like make has been described in preciously few books at any length, or I have missed most of them."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-27 17:33:25+00:00",
                    "text": "The aim is to show a concise, scalable and still readable handwritten Makefile. The resulting Makefile will probably be sophisticated, but not complicated or bloated like an autogenerated Makefile. The part I wrote so far targets only the generation of dependencies in an automatic way, explaining the other features while showing use-cases for them."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-27 17:44:57+00:00",
                    "text": "I like this idea and think it will be useful. It will be useful for me for sure. I even own a book on GNU Make that I struggled learning anything useful from.\nIf the guide shows to be advanced, we can always give a heads-up note at the beginning of the guide, stating the intended level and who it's for."
                },
                {
                    "user": "certik",
                    "date": "2020-10-27 19:54:24+00:00",
                    "text": "Here is an example of a manual Makefile that we use in stdlib:\nhttps://github.com/fortran-lang/stdlib/blob/3733ae3624ec6852f9fe624d1f91fbd0423bdf01/src/Makefile.manual\nand it has module dependencies, and yet is seems simpler than the one proposed in this PR (no awk, no addsuffix, no patsubst, ...). Wouldn't it make sense to recommend the simpler approach that we did in stdlib?"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-27 20:26:32+00:00",
                    "text": "There is certainly more than one style of make possible, the question is which we want to advertise.\nI find the substitution reference mechanism of make rather obscure, even if it avoids writing out patsubst or addsuffix functions explicitly. So technically the two Makefiles are setup quite similar, except for the stdlib Makefile is using recursively expanded variables while the guide is using normal variables instead."
                },
                {
                    "user": "certik",
                    "date": "2020-10-27 21:19:32+00:00",
                    "text": "I see. The approach that I like the most is fpm, and let fpm generate any other build system (if so desired), so even though I think I prefer the stdlib's style of makefile, I am fine with your approach to makefiles also. We can put your style in, and later if people have time, they can submit the other approach also."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-28 09:18:38+00:00",
                    "text": "@certik The scope of this PR is to give an advanced introduction to make. It depends on the status of #156 and I'll adjust this PR to account for any review comments on make style there. I opened it as draft to see if there is any interest to have an advanced make guide in the minibooks at all and to discuss if the format I have chosen seems appropriate.\n\nThe approach that I like the most is fpm, and let fpm generate any other build system (if so desired)\n\nI agree that make would be my least favourite choice as build system for Fortran, since there are plenty other build systems like CMake, meson, fpm, ... which are easier to use. But I don't think that letting fpm generate a Makefile removes the need of an introduction to make. An fpm generated Makefile would be on the same level as an autotools or CMake generated one and not supposed to be read or modified by the user (at least in my opinion). Also, I would prefer to discuss fpm related features at the fpm repository instead."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-18 17:09:29+00:00",
                    "text": "Let's give this PR another bump, since it has been stale for a while now.\nThis guide builds on the basic make introduction from #156, which is now part of the building programs book. It presents an intermediate to advanced overview over some powerful functionality and less known concepts of make. The idea is to show some interesting and unusual approaches how to actually use make to solve problems, going beyond the stuff you will usually find in a random Makefile.\nThe automation of the dependencies is one of the main issues faced when using make for Fortran projects, of course one can hard code them in the Makefile and avoid the topic, but this is in my opinion not a good answer on how to deal with module dependencies in make.\nIf this is not suited for the building programs book, I would suggest to start a new book on build systems and development tools as intermediate minibook instead."
                },
                {
                    "user": "certik",
                    "date": "2020-12-18 18:08:44+00:00",
                    "text": "I just talked with @awvwgk over video regarding this issue and I am fine with merging it as is. While we all work hard on fpm, it will still take some time before it can be used with larger production codes, and even when it can be used, not everybody will be using it for historical or other reasons. And thus having an authoritative source of \"best practices\" for Make and CMake with Fortran would always be helpful, even if they might not be the first approach we would recommend to beginners down the road.\nSo I am for merging this, and see what the response is, and if we get feedback, we can iterate on it.\n@milancurcic, are you ok to merge as is?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-18 19:33:19+00:00",
                    "text": "I will review it over the weekend and will have minor edit suggestions. But overall I think it's a great addition. Thank you for putting it together!"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-12-18 19:57:09+00:00",
                    "text": "I agree - it is a straightforward receipe for creating makefiles in a\ngeneric way. And it definitely contains features that I was unaware of.\n\nOp vr 18 dec. 2020 om 20:33 schreef Milan Curcic <notifications@github.com>:\n\u2026\n I will review it over the weekend and will have minor edit suggestions.\n But overall I think it's a great addition. Thank you for putting it\n together!\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#160 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZAWLMJFVTHUMA67ETSVOVA3ANCNFSM4TA7XQFQ>\n ."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-18 20:48:40+00:00",
                    "text": "Might be a good occasion to check if the #build_preview is working again.\nEdit: Nope, it's still broken."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 17:02:55+00:00",
                    "text": "The awk script is a weak spot, it only shortcoming is that it cannot deal with submodules, but otherwise it can handle most Fortran module and use statements, which are not using line breaks and/or whitespace hacks in fixed format. The difficulty is that you actually require a full Fortran parser to solve the dependency generation issue generally.\nHardcoding dependencies is a maintenance effort I found unacceptable for using make in Fortran projects, especially for projects I develop together with others. The only robust solution I found so far was over-engineering the Makefile generation or moving to another build system."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 17:19:43+00:00",
                    "text": "I added some comments on how awk is processing the Fortran source to extract the information we are looking for."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-12-21 20:38:00+00:00",
                    "text": "If you have by chance the O'Reilly book Unix for FORTRAN Programmers written by Mike Loukides it contains a nicely written chapter on make.  Since the book was first published in 1990 the content is limited to F77, where make might have been sufficient to resolve all dependencies. If interested I can send you an excerpt from the book."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-21 22:24:07+00:00",
                    "text": "@ivan-pi Thanks for the offer. My best source of knowledge on Unix tools was/is the built-in documentation so far. For example the info page of make is excellent (check info make or https://www.gnu.org/software/make/manual/make.html)."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-30 20:24:39+00:00",
                    "text": "Thanks everybody for the comments and suggestions. With two approvals I'll go ahead and merge this PR."
                }
            ]
        },
        {
            "number": 159,
            "user": "LKedward",
            "date": "2020-10-26 09:06:11+00:00",
            "title": "Add: tapenade package",
            "text": "I was pleasantly surprised to see this previously closed-source commercially-licensed tool is now open source under MIT!\nIMO, this tool is the state of the art in automatic differentiation for Fortran. It has a long history and is hence quite robust.\nSee also the discussion on discourse.\n(It doesn't have gitlab stars because it's a self-hosted instance of gitlab I think.)",
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-26 09:26:30+00:00",
                    "text": "Great, I have been attending a series of workshops on the topic recently, It has great potential."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-10-26 21:14:59+00:00",
                    "text": "Great, I have been attending a series of workshops on the topic recently, It has great potential.\n\nWere those the NAG workshops? Are there any publicly available materials also for non-participants?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-27 07:53:47+00:00",
                    "text": "Yes, the NAG workshops - I think the material is for participants only. but\nthe workshops themselves were free. You could contact them about it.\n\nRegards,\n\nArjen\n\nOp ma 26 okt. 2020 om 22:15 schreef Ivan <notifications@github.com>:\n\u2026\n Great, I have been attending a series of workshops on the topic recently,\n It has great potential.\n\n Were those the NAG workshops? Are there any publicly available materials\n also for non-participants?\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#159 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR245DJZJLYFYKUHAE3SMXRGFANCNFSM4S7DARMQ>\n ."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-31 15:32:32+00:00",
                    "text": "This looks good, I will go ahead and merge. Thanks @LKedward!"
                }
            ]
        },
        {
            "number": 158,
            "user": "jvdp1",
            "date": "2020-10-24 18:30:53+00:00",
            "title": "add dnf install gcc-gfortran for Fedora 22+",
            "text": "Since Fedora 22, dnf is the default package manager (instead of yum).\nNote: the command yum is still availble, but is only an alias to dnf.",
            "comments": []
        },
        {
            "number": 157,
            "user": "awvwgk",
            "date": "2020-10-24 12:57:04+00:00",
            "title": "Minibook(s) for commonly used build systems",
            "text": "I think there is a general interest in having a good Fortran specific introduction to commonly used build systems. The target audience has already intermediate or advance knowledge of Fortran, but maybe little to no knowledge of the respective build tools.\nI listed the ones I know about for quick reference:\n\nfpm (discussion: fortran-lang/fpm#302)\nmake (introduction: #156, dependencies: #160)\nCMake\nmeson\nautotools\nscons\nwaf\nFoBiS\nforay\n\nLet me know if there should be something added to this list.\nThe criteria to recommend a build system could be:\n\naccessibility (available platforms, setup prerequisites, open source)\nuser friendliness (learning curve, documentation in general, Fortran support)\nfunctionality (dependencies, cross compiling, speed)\nadaption in the community",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 12:58:38+00:00",
                    "text": "@aradi would you be interested in contributing to a CMake introduction for Fortran?"
                },
                {
                    "user": "certik",
                    "date": "2020-10-24 15:06:00+00:00",
                    "text": "I think these are the main ones. We can add introduction how to get started with each of them.\n\u2026\nOn Sat, Oct 24, 2020, at 6:57 AM, Sebastian Ehlert wrote:\n\n\n I think there is a general interest in having a good Fortran specific\n introduction to commonly used build systems. The target audience has\n already intermediate or advance knowledge of Fortran, but maybe little\n to no knowledge of the respective build tools.\n\n I listed the ones I know about for quick reference:\n\n  * fpm <https://github.com/fortran-lang/fpm>\n  * make <https://www.gnu.org/software/make/manual/make.html>\n  * CMake <https://cmake.org/>\n  * meson <https://mesonbuild.com/>\n  * autotools\n <https://www.gnu.org/software/automake/manual/html_node/index.html#Top>\n  * scons <https://scons.org/>\n  * waf <https://waf.io/book>\n  * FoBiS <https://github.com/szaghi/FoBiS>\n  * foray <https://github.com/drewmccormack/foraytool>\n Let me know if there should be something added to this list.\n\n The criteria to recommend a build system could be:\n\n  * accessibility (available platforms, setup prerequisites, open source)\n  * user friendliness (learning curve, documentation in general, Fortran\n support)\n  * functionality (dependencies, cross compiling, speed)\n  * adaption in the community\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#157>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWG2XGFJQTV6TATLRVDSMLFKXANCNFSM4S5SID5Q>."
                },
                {
                    "user": "aradi",
                    "date": "2020-10-26 10:01:36+00:00",
                    "text": "@awvwgk Sure, I would be interested to contribute the CMake part."
                }
            ]
        },
        {
            "number": 156,
            "user": "awvwgk",
            "date": "2020-10-23 16:19:54+00:00",
            "title": "Update building programs book",
            "text": "I think the build-tools section of the building programs minibook is a bit short and the make example contains a few common gotchas, therefore I tried to update it.\nI also started some minimal introductions to meson and CMake to explain the concept of high-level build systems in comparison to make. Since it is an introductory book I didn't went to much into details on using those, as this might be something for an intermediate or advanced guide.\nChanges:\n\nreplace hyphens by endashs emdashs\nuse correct external link declaration\nrename the example source file to functions\ncorrect name of the generate module file set to user_functions\nextend the build-tools page with a detailed guide on make\n\nexplain concept of recursively defined variables which is commonly misused in make\n\n\nadd a short guide on meson\nadd a short guide on CMake",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-23 16:24:23+00:00",
                    "text": "Quite frankly, why don't we replace that section with fpm?\nThe document (I thought) is tailored for new users. New users either want to start a project from scratch (thus fpm I think will work already) or they wan to contribute to an already existing project, but then they have to follow whatever build system the existing project uses."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-23 16:42:54+00:00",
                    "text": "Quite frankly, why don't we replace that section with fpm?\n\nI agree that this is the way to go.\nAlthough it may not be quite adequate yet (two implementations, unstable spec and behavior, unimplemented functionality in the Fortran client), this would help adopt new fpm users. New Fortran users would go straight to fpm.\nI recommend that:\n\nWe review, edit, and merge this PR;\nWe work on the fpm guide;\nWe put the fpm guide first, and we keep the existing guide as \"Other build tools\" or similar. It's useful to keep it."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-23 17:26:02+00:00",
                    "text": "There is some diversity in build tools available, I think they should be discussed at least briefly to give some guidance to a beginner. Also, there are only few projects offering help or useful insights for the build systems they are using. I was motivated to look into this guide after a friend asked me about a good read with some more depth on compiling, linking and building."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 07:36:19+00:00",
                    "text": "An fpm guide wouldn't need any of the information in this particular minibook, writing a separate book on learning Fortran with fpm is the better call in my opinion."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 08:39:32+00:00",
                    "text": "Question: How do you feel about inline HTML in the minibooks? I found we have a CSS class for tips in\n\n  \n    \n      fortran-lang.org/assets/css/main.css\n    \n    \n        Lines 463 to 468\n      in\n      5f95844\n    \n    \n    \n    \n\n        \n          \n           .aside-tip { \n        \n\n        \n          \n             border-left: 5px solid #3c92d1; \n        \n\n        \n          \n             font-size: 16px; \n        \n\n        \n          \n             padding-left: 10px; \n        \n\n        \n          \n             margin: 20px 0; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nUsing this seems to require inline HTML instead of the blockquote:\ndiff --git a/learn/building_programs/build_tools.md b/learn/building_programs/build_tools.md\nindex 27d1a75..621ea2b 100644\n--- a/learn/building_programs/build_tools.md\n+++ b/learn/building_programs/build_tools.md\n@@ -60,12 +60,15 @@ It performs actions following rules defined in a configuration file\n called ``Makefile`` or ``makefile``, which usually leads to compiling a program\n from the provided source code.\n \n-> **Tip**\n->\n-> For an in-depth ``make`` tutorial lookup its info page. There is an online\n-> version of this\n-> <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">info page</a>,\n-> available.\n+<div class=\"aside-tip\">\n+  <b>Tip</b>\n+  <p>\n+    For an in-depth <code>make</code> tutorial lookup its info page. There is an online\n+    version of this\n+    <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">info page</a>,\n+    available.\n+  </p>\n+</div>\n \n We will start with the basics from your clean source directory. Create and open\n the file ``Makefile``, we start with a simple rule called *all*:\nEdit: There seems to be an include HTML as well, which requires this somewhat suboptimal construct with a liquid capture region:\n{% capture tip %}\nFor an in-depth ``make`` tutorial lookup its info page. There is an online\nversion of this\n<a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">info page</a>,\navailable.\n{% endcapture %}\n{% include tip.html content=tip %}"
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-24 09:08:11+00:00",
                    "text": "Edit: There seems to be an include HTML as well...\n\nYes please use the HTML includes for these asides.\n\n... somewhat suboptimal construct with a liquid capture region\n\nThe capture region isn't a necessesity (see Quickstart book) - if you can think of way to improve the syntax for simplicity please do!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-24 09:10:02+00:00",
                    "text": "An fpm guide wouldn't need any of the information in this particular minibook, writing a separate book on learning Fortran with fpm is the better call in my opinion.\n\nI share this sentiment"
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-24 09:21:56+00:00",
                    "text": "As someone who struggled to find adequate online material when learning make and other systems for Fortran (I still struggle with cmake), I think this is a good addition to this particular minibook. A separate minibook for fpm seems more appropriate - when ready this can then supplant this minibook as the recommended beginners' guide.\nEdit: I see that Milan has essentially proposed the same thing. I think it would be good to get more users to fpm with a good beginner's minibook here; there may need to be a warning regarding the maturity of fpm and it may be worth waiting for at least a first beta release milestone of the fortran implementation."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 09:37:00+00:00",
                    "text": "@LKedward I won't get around a few capture statements, because some of the asides are several paragraphs with code blocks, but this should work for now. I'll have a look at the templates to figure out something nicer. Also, I noticed that the asides don't look as nice as the blockquotes, the spacing is somewhat off, maybe the CSS could use some adjustment as well."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 12:00:22+00:00",
                    "text": "As someone who struggled to find adequate online material when learning make and other systems for Fortran (I still struggle with cmake), I think this is a good addition to this particular minibook.\n\nI added a few sections on common gotchas in make as well. If wanted I can also expand on some of the more useful make features, like vpath, string manipulation or recursive make."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-10-24 14:35:34+00:00",
                    "text": "As someone who struggled to find adequate online material when learning make and other systems for Fortran (I still struggle with cmake), I think this is a good addition to this particular minibook. A separate minibook for fpm seems more appropriate - when ready this can then supplant this minibook as the recommended beginners' guide.\n\nI second these thoughts. The available resources on Cmake and make targeted at Fortran are scarce. Most of the time I resorted to just adapting the makefiles from existing Fortran projects, not knowing what exactly are they doing. Having the minibooks in one place will hopefully make it easier for beginners to progress from small projects to intermediate and large projects where a build system is needed (at least until fpm is mature)."
                },
                {
                    "user": "certik",
                    "date": "2020-10-24 15:08:44+00:00",
                    "text": "Sounds good, I agree with the comments above.\n\u2026\nOn Sat, Oct 24, 2020, at 8:35 AM, Ivan wrote:\n\n\n > As someone who struggled to find adequate online material when learning `make` and other systems for Fortran (I still struggle with `cmake`), I think this is a good addition to this particular minibook. A separate minibook for fpm seems more appropriate - when ready this can then supplant this minibook as the recommended beginners' guide.\n\n I second these thoughts. The available resources on Cmake and make\n targeted at Fortran are scarce. Most of the time I resorted to just\n adapting the makefiles from existing Fortran projects, not knowing what\n exactly are they doing. Having the minibooks in one place will\n hopefully make it easier for beginners to progress from small projects\n to intermediate and large projects where a build system is needed (at\n least until fpm is mature).\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#156 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWEAH224H2ZKVI3F7OTSMLQ4DANCNFSM4S4YMOFA>."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-11-22 09:56:13+00:00",
                    "text": "This PR has been stale for almost a month now. Is there still interest in this?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-01 00:45:23+00:00",
                    "text": "With no objections, I'll go ahead and merge this."
                }
            ]
        },
        {
            "number": 155,
            "user": "p-costa",
            "date": "2020-10-17 00:38:10+00:00",
            "title": "fixed important issue thanks to @JarLob",
            "text": "",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-10-17 01:04:12+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 154,
            "user": "certik",
            "date": "2020-10-07 17:17:01+00:00",
            "title": "Add a link to fortran90.org",
            "text": "I plan to migrate information from there to fortran-lang.org, but until\nthis happens, it would be good to at least provide the link, so that\npeople who are new to Fortran can use the site to learn modern Fortran.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-07 18:06:25+00:00",
                    "text": "Thanks for the review!"
                }
            ]
        },
        {
            "number": 153,
            "user": "awvwgk",
            "date": "2020-10-06 08:03:40+00:00",
            "title": "Add electronic structure packages to index",
            "text": "Closes #151",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-06 16:20:19+00:00",
                    "text": "Looks great, thank you!"
                }
            ]
        },
        {
            "number": 152,
            "user": "smeskos",
            "date": "2020-10-06 00:02:31+00:00",
            "title": "New mini book:  OS setup for Fortran developement",
            "text": "Hi all, this PR is a follow-up to Issue #134.\nThe goal is to provide, in a beginners-friendly format, all the necessary steps to choose and install a compiler, as well as it includes information about text-editors and IDEs.\nIt is not complete and definitely needs \"attention\"... take it as a template to start building on it.\nThe part with the text-editors needs a few of you with experience with some of those editors to contribute with \"how to configure them\".\nI am aware that some parts are opinionated, but the topic itself is subjective by nature... choosing compilers, text-editors, or IDEs. Let's discuss them and find a common path.",
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-06 08:39:15+00:00",
                    "text": "Nice to see this - I will have a closer look at the text.\n\nOp di 6 okt. 2020 om 02:02 schreef smeskos <notifications@github.com>:\n\u2026\n Hi all, this PR is a follow-up to Issue #134\n <#134>.\n The goal is to provide, in a beginners-friendly format, all the necessary\n steps to choose and install a compiler, as well as it includes information\n about text-editors and IDEs.\n It is not complete and definitely needs \"attention\"... take it as a\n template to start building on it.\n The part with the text-editors needs a few of you with experience with\n some of those editors to contribute with \"how to configure them\".\n I am aware that some parts are opinionated, but the topic itself is\n subjective by nature... choosing compilers, text-editors, or IDEs. Let's\n discuss them and find a common path.\n ------------------------------\n You can view, comment on, or merge this pull request online at:\n\n   #152\n Commit Summary\n\n    - add new _site to master\n    - Revert \"add new _site to master\"\n    - test\n    - Revert \"test\"\n    - Merge remote-tracking branch 'upstream/master'\n    - Merge remote-tracking branch 'upstream/master'\n    - Merge remote-tracking branch 'upstream/master'\n    - Merge remote-tracking branch 'upstream/master'\n    - added main index page\n    - added second page: choosing compilers\n    - added third page: installing gfortran\n    - added fourth page: installing opencoarrays\n    - added fifth page: texteditors\n    - added sixth page: IDEs\n    - added final page: Tips\n    - added new minibook structure\n\n File Changes\n\n    - *M* _data/learning.yml\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-793049ea95168d552f25dbf988e2b6f3>\n    (12)\n    - *A* learn/os_setup/choose_compiler.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-3f295dde916c8c2704b83a487a362e44>\n    (18)\n    - *A* learn/os_setup/ides.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-2681dbd91fd0b562e296b3b4441cf8ec>\n    (20)\n    - *A* learn/os_setup/index.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-2da110db96cec689bc5276893e1f7924>\n    (27)\n    - *A* learn/os_setup/install_gfortran.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-b3e6b9920d8f42caf950376c2e530f2e>\n    (85)\n    - *A* learn/os_setup/install_opencoarrays.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-96fdd7a54c435d91e866957d4eac37c5>\n    (16)\n    - *A* learn/os_setup/text_editors.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-88cbca544ed22b504a0f0bf812b14f34>\n    (54)\n    - *A* learn/os_setup/tips.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-88f51d3e1e97db0cafb7b34ac5ba2ebd>\n    (13)\n\n Patch Links:\n\n    - https://github.com/fortran-lang/fortran-lang.org/pull/152.patch\n    - https://github.com/fortran-lang/fortran-lang.org/pull/152.diff\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#152>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4CW2UVBDYNB4YMFNTSJJNCHANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-06 08:48:19+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-06 08:49:18+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/152/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-06 09:08:05+00:00",
                    "text": "The link at the preview doesn't work. I am now sure why. I've built it locally and the site appears fine."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-06 14:10:00+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-06 14:11:10+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/152/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-06 16:51:56+00:00",
                    "text": "@certik thank you for the review and your comments. I will try to address them one by one and discuss them. I would also like to repeat, that this is just a draft and it definitely needs improvements. Furthermore, I wrote about some topics even if I am not an expert, just because I believe, they should be addressed in this tutorial, with the expectation, that the more experienced developers in this community will help me correct them."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-19 07:21:08+00:00",
                    "text": "Thank you @milancurcic for this detailed review. Following your recommendation, I also added a link to a tutorial for update-alternatives."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-19 09:15:09+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-19 09:16:04+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/152/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-20 16:22:19+00:00",
                    "text": "@arjenmarkus Do you need more time to review this or it's good to go?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:05:09+00:00",
                    "text": "Let me read it now - I have some time at the moment.\n\nOp di 20 okt. 2020 om 18:22 schreef Milan Curcic <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> Do you need more time to\n review this or it's good to go?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR5QBCYPTXIRCFQE3NDSLW2MZANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-10-20 19:23:22+00:00",
                    "text": "I read through it, this is good enough to merge and we can improve it with future PRs. After @arjenmarkus approves, let's merge it.\nI think our tools should support all editors, but I think we should ensure that at least one editor works first class.\nI think we should pick an editor and provide tutorials with screenshots using it, and we should also write extensions to such an editor with fpm support, with formatting support, with Flang and LFortran support etc. Such an editor should work cross platform, and be in wide use. I think it should be VSCode. But as I said, we should write our tools in an editor independent way, but by ensuring that things just work in VSCode, we can simply direct new users to it, and make our lives simpler. And we can support other editors as we have time, but don't have to stress about it too much, since we have a nice default that will do the job for new users."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:35:11+00:00",
                    "text": "@smekos, I have just read the entire booklet in its present form. Nice work\n:), but I do have a comment: MinGW-w64 and MSYS2.\n\nFirst of all, under the threading Windows, MinGW-w64 is mentioned, but not\nits relation to MSYS2.\nSecondly. if you compile under MSYS2, then you get binaries that depend on\nthe MSYS2 environment, but if you use the MinGW-w64 environment, you can\nfreely distribute the programs. So, just the other way around.\nThirdly, the latest version, at https://github.com/msys2, gives you the GCC\ncompiler suite 10.2.\n\nRegards,\n\nArjen\n\nOp di 20 okt. 2020 om 21:04 schreef Arjen Markus <arjen.markus895@gmail.com\n\u2026\n:\n Let me read it now - I have some time at the moment.\n\n Op di 20 okt. 2020 om 18:22 schreef Milan Curcic ***@***.***\n >:\n\n> @arjenmarkus <https://github.com/arjenmarkus> Do you need more time to\n> review this or it's good to go?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#152 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR5QBCYPTXIRCFQE3NDSLW2MZANCNFSM4SFKITAA>\n> .\n>"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:37:01+00:00",
                    "text": "@Ond\u0159ej \u010cert\u00edk <ondrej@certik.us>, see my comments - the text is fine as it\nis, with just this inaccuracy/update for MinGW-w64/MSYS2. I particularly\nfocused on this, as it has confused me for years :).\n\nOp di 20 okt. 2020 om 21:23 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com\n\u2026\n:\n I read through it, this is good enough to merge and we can improve it with\n future PRs. After @arjenmarkus <https://github.com/arjenmarkus> approves,\n let's merge it.\n\n I think our tools should support all editors, but I think we should ensure\n that at least one editor works first class.\n I think we should pick an editor and provide tutorials with screenshots\n using it, and we should also write extensions to such an editor with fpm\n support, with formatting support, with Flang and LFortran support etc. Such\n an editor should work cross platform, and be in wide use. I think it should\n be VSCode. But as I said, we should write our tools in an editor\n independent way, but by ensuring that things just work in VSCode, we can\n simply direct new users to it, and make our lives simpler. And we can\n support other editors as we have time, but don't have to stress about it\n too much, since we have a nice default that will do the job for new users.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4J5ZMQBHLRNR4U76DSLXPTTANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-20 19:50:13+00:00",
                    "text": "Hi @arjenmarkus, the current text on MSYS2 and MinGW was written by myself. I will address your comments with an update. Can you be more specific about what you understand the relationship between MSYS2 and MinGW-w64 to be?\nMy understanding is that they are separate with MSYS2 providing one (of three) environments that is built atop MinGW-w64, hence why I have written that you can freely distribute programs. Yes, there is a 'native' MSYS2 environment that has it's own DLL dependency, however this environment is only recommended for developing tools for the MSYS2 ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:50:23+00:00",
                    "text": "Okay, minor comments/suggestions added.\n\nOp di 20 okt. 2020 om 21:36 schreef Arjen Markus <arjen.markus895@gmail.com\n\u2026\n:\n @Ond\u0159ej \u010cert\u00edk ***@***.***>, see my comments - the text is fine as\n it is, with just this inaccuracy/update for MinGW-w64/MSYS2. I particularly\n focused on this, as it has confused me for years :).\n\n Op di 20 okt. 2020 om 21:23 schreef Ond\u0159ej \u010cert\u00edk <\n ***@***.***>:\n\n> I read through it, this is good enough to merge and we can improve it\n> with future PRs. After @arjenmarkus <https://github.com/arjenmarkus>\n> approves, let's merge it.\n>\n> I think our tools should support all editors, but I think we should\n> ensure that at least one editor works first class.\n> I think we should pick an editor and provide tutorials with screenshots\n> using it, and we should also write extensions to such an editor with fpm\n> support, with formatting support, with Flang and LFortran support etc. Such\n> an editor should work cross platform, and be in wide use. I think it should\n> be VSCode. But as I said, we should write our tools in an editor\n> independent way, but by ensuring that things just work in VSCode, we can\n> simply direct new users to it, and make our lives simpler. And we can\n> support other editors as we have time, but don't have to stress about it\n> too much, since we have a nice default that will do the job for new users.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#152 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR4J5ZMQBHLRNR4U76DSLXPTTANCNFSM4SFKITAA>\n> .\n>"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 20:00:54+00:00",
                    "text": "Sure, I ran into this when I tried to understand the way MinGW-w64/MSYS2\nhandle Windows-style paths.\n\nIf you install MinGW-w64/MSYS2, you get a number of shells, each giving\naccess to their own versions of the various packages. To keep it simple, I\nwill describe what I understand regarding the GCC compiler suite:\nmingw64.exe: a program compiled with the GCC compilers understands the\nWindows-style path names, the home directory I get with \"echo $HOME\" is\n\"/home/markus\", but if I ask in a C program for the current directory if I\nam in my home directory, I get \"c:\\msys64-2020\\home\\markus\\\".\nI can copy the program to another machine or run it in a plain command\nwindow without any problem.\n\nmsys2.exe: if I do the same under this shell, I have a different version of\nthe compiler and the run-time libraries. The result of getcwd() would then\nbe Unixy - \"/home/markus\". And the program does not work outside the MSYS2\nenvironment, as it would miss a crucial DLL.\n\n\nOp di 20 okt. 2020 om 21:50 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Hi @arjenmarkus <https://github.com/arjenmarkus>, the current text on\n MSYS2 and MinGW was written by myself. I will address your comments with an\n update. Can you be more specific about what you understand the relationship\n between MSYS2 and MinGW-w64 to be?\n My understanding is that they are separate with MSYS2 providing one (of\n three) environments that is built atop MinGW-w64, hence why I have written\n that you can freely distribute programs. Yes, there is a 'native' MSYS2\n environment that has it's own DLL dependency, however this environment is\n only recommended for developing tools for the MSYS2 .\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZ7S72BU2D6ERTU22DSLXSYJANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-20 20:24:00+00:00",
                    "text": "Thanks @arjenmarkus, that essentially aligns with my understanding. However it should be clear that the MinGW-w64 toolchain is separate to MSYS2 and can be distributed independent of it.\nFurther, when you use the native MSYS2 shell, the compiler toolchain is not MinGW, but an MSYS2 native build of gcc.\nThe text I have written makes the assumption that the reader will use one of the MinGW shells in MSYS2 as opposed to the 'native' MSYS2 shell which should only be used for writing programs to distribute in MSYS2.\nTo be clear, the following compile environments are available:\n\nMinGW-w64: compiler toolchain only (no shell), links with Microsoft libs (native Windows), called from Windows shell\nMSYS2/mingw64: MinGW-w64 compiler toolchain provided as an MSYS2 package, links with Microsoft libs, called from MSYS2 shell\nMSYS2/mingw32: same as above with 32bit x-compile target\nMSYS2/MSYS2: GNU compiler collection compiled within the POSIX environment provided by MSYS2, links with msys-2.0.dll\n\nI will update the text tomorrow to make it simpler and clearer to a beginner."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-20 20:46:16+00:00",
                    "text": "@LKedward:\n\nI will update the text tomorrow to make it simpler and clearer to a beginner.\n\nPlease try to do that.\nI am also reading info from here msys2.org/wiki/History and trying to understand it as well.\nMy main concern is that every attempt to clarify all these options will lead to content outside of this tutorial's scope.\nHonestly, I'd rather remove the whole last paragraph and don't even mention about differences between MSYS2, Cygwin, and MinGW-w64."
                },
                {
                    "user": "certik",
                    "date": "2020-10-20 20:50:59+00:00",
                    "text": "Why don't we remove the paragraph, merge this PR, and then let's open another PR with just the mingw clarification and we can figure it out there?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-21 06:16:44+00:00",
                    "text": "I agree, unless we can come up with a concise and clear description. A\nclear description is of importance to the stdlib-os subproject as well and\ngiven the confusion we all have about it, it might even become a topic in a\nseparate minibook on popular OSes.\n\nOp di 20 okt. 2020 om 22:51 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com\n\u2026\n:\n Why don't we remove the paragraph, merge this PR, and then let's open\n another PR with just the mingw clarification and we can figure it out\n there?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR23TWPCRW2GFFSGKNLSLXZ4HANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-21 08:14:23+00:00",
                    "text": "Thanks @smeskos - I agree, removing that paragraph is the clearest we can be for the scope of this tutorial."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-21 15:12:06+00:00",
                    "text": "This is now good to merge, correct?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-21 15:29:42+00:00",
                    "text": "As far as I am concerned, yes.\n\nOp wo 21 okt. 2020 om 17:12 schreef Milan Curcic <notifications@github.com>:\n\u2026\n This is now good to merge, correct?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4XQ47CUDDQ5LQZUCTSL325RANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-21 15:33:12+00:00",
                    "text": "Thank you all, and especially @smeskos who led the effort!"
                },
                {
                    "user": "certik",
                    "date": "2020-10-21 16:26:13+00:00",
                    "text": "Thanks everybody, I am glad this is in."
                }
            ]
        },
        {
            "number": 151,
            "user": "awvwgk",
            "date": "2020-10-05 19:11:29+00:00",
            "title": "Electronic structure Fortran projects",
            "text": "Some other projects regarding electronic structure methods. Maybe a few of them are interesting as well, let me know and I will collect the necessary meta data.\n\n\n\nname\nurl\n\n\n\n\nDFT-D4\nhttps://github.com/dftd4/dftd4\n\n\nELPA\nhttps://gitlab.mpcdf.mpg.de/elpa/elpa\n\n\nELSI\nhttps://gitlab.com/elsi_project/elsi_interface\n\n\nFortJSON\nhttps://gitlab.com/elsi_project/fortjson\n\n\nlibnegf\nhttps://github.com/libnegf/libnegf\n\n\nNTPoly\nhttps://github.com/william-dawson/NTPoly\n\n\nMBD\nhttps://github.com/jhrmnn/libmbd\n\n\nmpifx\nhttps://github.com/dftbplus/mpifx\n\n\nOpenMolcas\nhttps://gitlab.com/Molcas/OpenMolcas\n\n\nscalapackfx\nhttps://github.com/dftbplus/scalapackfx",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-05 19:58:51+00:00",
                    "text": "@awvwgk I would suggest to add any that have Fortran as the main programming language."
                }
            ]
        },
        {
            "number": 150,
            "user": "awvwgk",
            "date": "2020-10-05 18:35:28+00:00",
            "title": "Add wannier90 to package index",
            "text": "This PR adds wannier90 to the package index, it provides interfaces to some of the already listed open source electronic structure packages (QE, Abinit, ...).\n\nhomepage: http://www.wannier.org/\nGH repository: https://github.com/wannier-developers/wannier90\ndocumentation: https://github.com/wannier-developers/wannier90/wiki\nGPL-2.0",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 18:51:23+00:00",
                    "text": "I think that was the last larger (open source) Fortran project I am aware of."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 18:58:21+00:00",
                    "text": "Thanks @awvwgk for including those. It was a lot of exploration to collect open source Fortran codes out there, but there is quite a few."
                }
            ]
        },
        {
            "number": 149,
            "user": "awvwgk",
            "date": "2020-10-05 18:01:56+00:00",
            "title": "Add xtb to package index",
            "text": "Disclaimer: this is a project I'm personally involved with.\nThis PR adds a xtb to the package index.\n\ndocumentation: https://xtb-docs.readthedocs.io/\nGH repository: https://github.com/grimme-lab/xtb\nbuilds with CMake and meson\nsupports GCC 7.5 to 10.2, Intel 17 to 20, PGI 19.7 to 20.7\nOpenMP and OpenACC parallelisation\nCI testing is done for Ubuntu and OSX (no Windows yet)\nLGPL-3.0-or-later",
            "comments": []
        },
        {
            "number": 148,
            "user": "awvwgk",
            "date": "2020-10-05 17:46:38+00:00",
            "title": "Add NWChem to package index",
            "text": "This PR adds NWChem to the package index, see #68.\n\ndocumentation: https://nwchemgit.github.io/\nrepository: https://github.com/nwchemgit/nwchem",
            "comments": []
        },
        {
            "number": 147,
            "user": "p-costa",
            "date": "2020-10-05 11:36:44+00:00",
            "title": "add CI for publishing on the fortran-lang twitter account upon merging a certain PR",
            "text": "Hello everyone!\nAs discussed in the fortran-lang discourse, this PR implements a CI that:\n\nGenerates tweets by commenting on a PR\nPublishes these tweets when the PR is merged\n\nPlease have a look, and feel free to test it by submitting a PR in this repo I created: p-costa/piu-piu-sandbox.\nIf you are happy with it, to get it to work, one needs to create a twitter app, following the steps similar to those indicated here: github.com/gr2m/twitter-together/blob/master/docs/01-create-twitter-app.md and add the corresponding keys and tokens to this repo.\nI should thank the author of find-comment for very promptly considering issues #23 and #24.\nThe tweets are published using send-tweet-action, as per @LKedward suggestion.\nIt works as follows:\nA comment in the PR starting with the keyword #tweet text will:\n\nremove a previous tweet, if it exists.\nadd a new tweet to be published by the CI once the PR is merged.\n\nA comment in the PR starting with the keyword #untweet will remove the tweet.\nThen, when the PR is merged, the CI will look for a specific keyword ([tweet]) published by the GitHub actions bot, and, if it exists in the PR comment thread, it will be deployed for publication in the fortran-lang twitter account.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-10-05 11:44:04+00:00",
                    "text": "Amazing, great work @p-costa! I'll have a look through this later today."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 13:03:24+00:00",
                    "text": "Great work. I tested it a bit.\nHere are my questions:\nhttps://github.com/p-costa/piu-piu-sandbox/pull/1#issuecomment-703616971"
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-05 13:07:42+00:00",
                    "text": "Thanks for creating the PR and testing it @certik . I should have mentioned here as well that:\n#tweet text will:\n\nremove a previous tweet, if it exists.\nadd a new tweet to be published by the CI once the PR is merged.\n\n#untweet will remove the tweet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-05 19:18:05+00:00",
                    "text": "Thanks, @p-costa! I have 2 questions:\n\nConsidering that #tweet text will remove a previous tweet if it exists, that means that there can be only one Tweet per PR, correct?\nWhat happens if text exceeds 280 characters? Do we get a thread of tweets or is the tweet truncated (or something else)?"
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-05 19:40:48+00:00",
                    "text": "Hi @milancurcic ,\n\nCorrect. I assumed that one will not be tweeting too much from here, so 1 tweet per merged PR sounded reasonable.\nThe CI always prints a preview of the tweet showing the character count. So if it is exceeded one will see it and can fix it before merging.\n\nedit: I realize did not fully answer your question: if one merges with a tweet a message with > 280 characters anyway, the send-tweet-action will generate an error. So no threads/truncated tweet."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-05 23:29:44+00:00",
                    "text": "I converted this to draft so that I can polish the implementation tomorrow and make some final tests. Feel free to review it in any case, as it should not change much from my side."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-09 08:54:22+00:00",
                    "text": "Just want to comment here that it's ready. But no rush from my side -- I understand that this being a small convenience shouldn't be a high priority thing."
                },
                {
                    "user": "certik",
                    "date": "2020-10-09 14:18:28+00:00",
                    "text": "+1 with me also\n\u2026\nOn Fri, Oct 9, 2020, at 3:08 AM, Laurence Kedward wrote:\n\n\n *@LKedward* approved this pull request.\n\n Great stuff! I don't see any issues with the workflow which has already\n been tested and demonstrated. Clearly some work is still required to\n link to the twitter account.\n\n It looks like anyone can create and modify a tweet, but only\n maintainers can merge and publish the tweet so I think this workflow\n works well. Thanks @p-costa <https://github.com/p-costa> \ud83d\udc4d\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#147 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWCPBVYHG75UIKRBAQLSJ3HJHANCNFSM4SESIBIA>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-09 14:31:55+00:00",
                    "text": "It looks like the homework for me is to set up the app and keys:\n\nIf you are happy with it, to get it to work, one needs to create a twitter app, following the steps similar to those indicated here: github.com/gr2m/twitter-together/blob/master/docs/01-create-twitter-app.md and add the corresponding keys and tokens to this repo.\n\nI think I'll be able to do it today, if not, then over the weekend."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-09 14:47:54+00:00",
                    "text": "It looks like the homework for me is to set up the app and keys:\n\nLet me know if you run into problems. One thing that was not written in the instructions and I had to do was making sure that the app has read and write permissions:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-09 15:58:22+00:00",
                    "text": "Okay, this is now done. I set the secrets in the Org and allowed them to be shared with this repo. This way we can easily reuse them in other repos when we want.\nShould this now be merged?"
                }
            ]
        },
        {
            "number": 146,
            "user": "awvwgk",
            "date": "2020-10-04 21:30:13+00:00",
            "title": "Correct license identifiers",
            "text": "license: none should be a no-go for the package index. The package index is of course no legal advice for licensing, but the information should be as accurate as possible. A package without license is unusable by definition (for open source projects), which is unfair to packages with permissive licensing conditions.\nFor a simple summary see: https://choosealicense.com/no-permission/\nI went through all the packages with license: none and tried to identify the licenses. I also tried to correct all licenses which are not valid SPDX license identifiers. Many missing licenses were malformatted BSD or MIT licenses, but some had actually interesting licensing condition like original MIT license with changes under BSD-3-Clause and so on.\nThere are still some issues with the GPL-2.0, and GPL-3.0, which should have the -only or -or-later suffix. (L)GPL-2 and (L)GPL-3 is usually insufficient to identify the license of a package clearly, since the minor version is missing.\nThis PR is open for discussion.",
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 06:26:43+00:00",
                    "text": "Many of @szaghi's projects have a GPL-3.0-only OR BSD-2-Clause OR BSD-3-Clause OR MIT license, which is quite lengthy for a badge (it doesn't state GPL-3.0-or-later for any package, I think). Not sure how to put those correctly without overflowing the rows."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-05 07:58:10+00:00",
                    "text": "Thanks @awvwgk, I agree with you however please note that license: none is a (misleading) programmatic identifier to disable rendering of the shields.io badge, it does not indicate anywhere on site that any software is license-free.\nOur package guidelines already state that only open source projects are accepted and they also require that the license field be specified if not detectable by github. I believe the large number of license: none entries may be, as you point out, that the licenses were non-standard formatting which meant I didn't know which identifier to use - at the time I opted to display no information rather than wrong information.\nThank you for tracking down this information.\nWe never made any promises regarding the use of SPDX identifiers, but I have no objection to adopting them now."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 09:25:15+00:00",
                    "text": "I agree with you however please note that license: none is a (misleading) programmatic identifier to disable rendering of the shields.io badge, it does not indicate anywhere on site that any software is license-free.\n\nHow about license: off which should map to a boolean false in yaml, has a much clearer indent and can easily used within liquid. Or you can have a separate field as display-license: false to avoid mixing the meta data with programmatic identifiers."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-05 09:50:24+00:00",
                    "text": "Are there still packages currently in the index where we still need this capability? If so, a separate field seems like the best option. If not, the behaviour should simply be removed. It already isn't allowed in future PRs according to the current guidelines."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 09:58:18+00:00",
                    "text": "This sounds way better than my suggestion \ud83d\udc4d."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 19:02:48+00:00",
                    "text": "Thanks for fixing this. Looks like there is no opposition, so I am going to merge it."
                }
            ]
        },
        {
            "number": 145,
            "user": "awvwgk",
            "date": "2020-10-04 20:07:49+00:00",
            "title": "Sort package index",
            "text": "Sorts the package index after the package names, this should make the package lists clearer.",
            "comments": []
        },
        {
            "number": 144,
            "user": "awvwgk",
            "date": "2020-10-04 16:53:54+00:00",
            "title": "Add fypp to package index",
            "text": "I wonder why this one is missing here\n\nGH repository: https://github.com/aradi/fypp\ndocumentation: https://fypp.readthedocs.io",
            "comments": []
        },
        {
            "number": 143,
            "user": "awvwgk",
            "date": "2020-10-04 16:37:28+00:00",
            "title": "Add DFTB+ to package index",
            "text": "Disclaimer: this is a project I'm personally involved with.\nThis PR adds an entry for DFTB+\n\nGH organisation of the project: https://github.com/dftbplus\nProject homepage: https://dftbplus.org/\nthe projects builds with CMake\nsupports GCC7.5, GCC8.4, GCC9.2, GCC10.1, Intel 18, Intel 19, NAG 7\nMPI and/or OpenMP parallel\ndocumentation for DFTB+\n\ndeveloper docs: https://dftbplus-develguide.readthedocs.io/en/latest/\nuser docs: https://dftbplus-recipes.readthedocs.io/en/latest/\n\n\n\nSee #68",
            "comments": []
        },
        {
            "number": 142,
            "user": "awvwgk",
            "date": "2020-10-04 16:23:19+00:00",
            "title": "Package index request template",
            "text": "The packaging guidelines state:\n\n  \n    \n      fortran-lang.org/PACKAGES.md\n    \n    \n         Line 55\n      in\n      0013186\n    \n    \n    \n    \n\n        \n          \n           2. Users should open a pull request using the 'Package index request' template \n        \n    \n  \n\n\nBut there is no PR template available for this purpose.\nAdditional context\nDiscussion regarding this line in #26 (comment)",
            "comments": []
        },
        {
            "number": 141,
            "user": "milancurcic",
            "date": "2020-10-02 19:07:23+00:00",
            "title": "fix youtube embed",
            "text": "There was an erroneous space character immediately before the <iframe> tag. Apparently this made it not render (??).",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-02 20:17:42+00:00",
                    "text": "Thanks for fixing it!"
                }
            ]
        },
        {
            "number": 140,
            "user": "milancurcic",
            "date": "2020-10-02 12:21:49+00:00",
            "title": "Revert \"Improved Docs\"",
            "text": "I'm sorry, I don't think this PR improves the README, but opposite:\n\nHeadings shouldn't end with colons\n\"How to setup\" doesn't work because \"setup\" is a noun. We can work to change it something like \"How to set up Jekyll\"\n\nReverts #139",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 12:24:18+00:00",
                    "text": "Some background: https://blog.domenic.me/hacktoberfest/\nI don't know if this PR was actually related to this, but please be mindful of small PRs in October that don't actually improve anything."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-02 12:27:37+00:00",
                    "text": "Headings shouldn't end with colons\n\"How to setup\" doesn't work because \"setup\" is a noun. We can work to change it something like \"How to set up Jekyll\"\n\n\nI completely agree on both points.\n\nSome background: https://blog.domenic.me/hacktoberfest/\n\nI was initially confused by why that PR was made, but this now makes sense.\nSmall PRs with genuine improvements to content or clarity are fine, but #139 is definitely neither I'm afraid"
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 13:17:29+00:00",
                    "text": "I agree. Such PRs are essentially spam PRs.\n\u2026\nOn Fri, Oct 2, 2020, at 6:28 AM, Laurence Kedward wrote:\n\n\n *@LKedward* approved this pull request.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#140 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWHQB3Y2PQNJXM4JD4TSIXBNLANCNFSM4SBUERSA>."
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 16:48:29+00:00",
                    "text": "I changed the label from Invalid to Spam. That way they should not be able to get credit hopefully."
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 16:49:59+00:00",
                    "text": "Btw, I was going to share the exact same link to the blog post that @milancurcic already shared. :)"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-10-02 16:50:52+00:00",
                    "text": "I would be inclined to believe this PR was just spam, submitted by someone just looking for a free t-shirt.\n\nI changed the label from Invalid to Spam. That way they should not be able to get credit hopefully.\n\nI believe you must actually report the incident directly to DigitalOcean for them not to get credit.\n\ntagging pull requests with a \u201cspam\u201d label, and emailing hacktoberfest@digitalocean.com."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-10-02 16:52:45+00:00",
                    "text": "Also, FYI, further background on a large source of the spam likely to be coming this month:\nhttps://joel.net/how-one-guy-ruined-hacktoberfest2020-drama"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-10-02 16:53:18+00:00",
                    "text": "I was really hoping this repo wouldn't have to deal with that. Bummer"
                }
            ]
        },
        {
            "number": 139,
            "user": "adityashukl1502",
            "date": "2020-10-02 07:31:53+00:00",
            "title": "Improved Docs",
            "text": "",
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-02 07:40:46+00:00",
                    "text": "These are minor corrections and they improve the text."
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 16:47:19+00:00",
                    "text": "This was merged by a mistake. This is a spam PR, more details here:\nhttps://blog.domenic.me/hacktoberfest/\nI changed the label to \"spam\"."
                }
            ]
        },
        {
            "number": 138,
            "user": "LKedward",
            "date": "2020-09-30 09:47:59+00:00",
            "title": "Fix CI: rollback and pin add-and-commit@v4.4.0",
            "text": "We have same CI issue as fortran-lang/fpm-registry#22; this PR addresses this.\nThis is a small change that's been tested in fpm-registry so I will merge.",
            "comments": []
        },
        {
            "number": 137,
            "user": "milancurcic",
            "date": "2020-09-26 16:50:59+00:00",
            "title": "first draft of the October 2020 newsletter",
            "text": "It's that time of the month again. I summarized the website, stdlib, and fpm updates. There may be updates in merged PRs for stdlib and fpm in the next few days so we'll watch closely and make appropriate edits.\nTODO @certik and @gklimowicz for their respective compiler updates. Do we have a contact for gfortran updates?\nTODO @LKedward for updating the contribution data.\nAs usual, add your name to the authors list if you add, edit, or review content.\nWill merge on Thursday, October 1.",
            "comments": [
                {
                    "user": "everythingfunctional",
                    "date": "2020-09-30 22:36:09+00:00",
                    "text": "Aside from the handful of TODOs, I didn't notice any problems. Thanks for getting it going @milancurcic"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 18:34:40+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-02 18:35:50+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/137/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 18:39:58+00:00",
                    "text": "Though I have issues viewing the build preview (not sure if it built correctly), the markdown preview looks okay. I will go ahead and merge, and if there are issues we can tidy it up. Thank you all."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-02 18:56:34+00:00",
                    "text": "Hi! The video in the events section is not rendering well on the website."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 19:02:17+00:00",
                    "text": "@p-costa Thanks I noticed it also and I'm trying to find out why."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 19:11:36+00:00",
                    "text": "It's now fixed by #141"
                }
            ]
        },
        {
            "number": 136,
            "user": "milancurcic",
            "date": "2020-09-18 17:46:48+00:00",
            "title": "Small fix in the opening sentence on the compilers page",
            "text": "We list a total of 16 compilers on the page, so the opening line should be fixed.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-09-18 23:55:28+00:00",
                    "text": "+1\n\u2026\nOn Fri, Sep 18, 2020, at 11:47 AM, Milan Curcic wrote:\n We list a total of 16 compilers on the page, so the opening line should\n be fixed.\n\n You can view, comment on, or merge this pull request online at:\n\n   #136\n\n Commit Summary\n\n  * small fix in the opening sentence on the compilers page\n File Changes\n\n  * *M* compilers.md\n <https://github.com/fortran-lang/fortran-lang.org/pull/136/files#diff-9529f537267bec0588f8db4469297ab3> (2)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.org/pull/136.patch\n  * https://github.com/fortran-lang/fortran-lang.org/pull/136.diff\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#136>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWB2NMYJEFEQUB2IZATSGOMJXANCNFSM4RSJZUCA>."
                }
            ]
        },
        {
            "number": 135,
            "user": "milancurcic",
            "date": "2020-08-30 17:20:03+00:00",
            "title": "September newsletter",
            "text": "Please review and add anything that I missed. As usual, add yourself to the list of authors if you add, edit, or even just review content.\nI left specific TODOs for @certik for LFortran news and @gklimowicz for Flang news.\nSorry for the short notice! We'll try to start this earlier in the month. I got carried away and time flew by. If possible, aiming to merge on Tuesday, September 1.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-08-31 17:44:53+00:00",
                    "text": "Thanks! I have updates for LFortran and also for GFortran from Thomas K\u00f6nig. I'll add it in later today."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-09-01 15:03:35+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-09-01 15:04:35+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/135/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-09-01 15:11:20+00:00",
                    "text": "The contributions are not displaying for me in the preview. @certik and @LKedward, is perhaps the contribution data that needs to be updated? There is a script that does it? I forget how it works."
                },
                {
                    "user": "LKedward",
                    "date": "2020-09-01 15:18:06+00:00",
                    "text": "The contributions are not displaying for me in the preview. @certik and @LKedward, is perhaps the contribution data that needs to be updated? There is a script that does it? I forget how it works.\n\nI'll run it now and push the updated json files."
                },
                {
                    "user": "LKedward",
                    "date": "2020-09-01 16:21:37+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-09-01 16:22:42+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/135/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-09-01 16:58:43+00:00",
                    "text": "Thank you all and thank you Laurence for updating the contributions data. I think it's good to go. I will merge in one hour."
                }
            ]
        },
        {
            "number": 134,
            "user": "smeskos",
            "date": "2020-08-19 20:15:29+00:00",
            "title": "Binaries of gfortran for windows no longer available for download",
            "text": "I am referring to the link that it is given in the quickstart tutorial hello_world.md.\nShould we replace it with something else, eg. http://mingw-w64.org?",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-08-19 20:32:59+00:00",
                    "text": "I think we should steer the Windows support toward WSL."
                },
                {
                    "user": "GS76",
                    "date": "2020-08-20 00:34:55+00:00",
                    "text": "My apologies what does WSL refer to?\n\nI am happy to use any type of installation of the Gfortran for Windows,\nhowever, I just found the link we have now was easiest for Windows users, I\nmyself.\n\nBut I am happy to try others, as long as they are easy for the user.\n\nJust my point of view.\n\u2026\nOn Wed, 19 Aug 2020 at 22:33, Milan Curcic ***@***.***> wrote:\n I think we should steer the Windows support toward WSL.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#134 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AM7MLHBBY4DOXWIRYF5OPMTSBQZIVANCNFSM4QFKDMOQ>\n ."
                },
                {
                    "user": "smeskos",
                    "date": "2020-08-20 07:20:24+00:00",
                    "text": "@GS76 WSL refers to Windows Subsystem for Linux, in short, you install a Linux distribution directly onto your Windows 10 (no virtual machine). This is an official Microsoft feature (not a 3rd party hack). Although it is not, yet, as robust as a clean Linux installation, and it lucks a GUI, you only get a bash, it is still a viable solution.\n@milancurcic I believe we need a new book about how to set up a Fortran environment in all major OS (including a list of the most common IDEs/Text-editors and how to configure them). From my experience with new Fortran users (from r/fortran and colleagues) they are usually Windows-only users with little programming experience. To push everyone toward WSL - a command-line-only Linux could bring a lot of frustration.\nFor the moment we should just replace this link with something else that works. We could mention both MinGW and WSL and later add a link to a new book that will explain how to set them up."
                },
                {
                    "user": "GS76",
                    "date": "2020-08-20 07:36:07+00:00",
                    "text": "@smeskos Thank you for the explanation. I will try it out. Your comments\nbelow with regards Windows-only users with little programming experience is\n100% accurate. I am in that category. I installed Linux about a 2 months\nago as I have always heard how much quicker it is than Windows. Anyway,\nonce up and running, I now understand what all the fuss is about and\ncompilers such as GCC and Gfortran are pre-installed, not necessarily the\ncorrect version, but I can understand why programmers would like the\nenvironment. I agree that we would need to show a complete installation\nprocedure, with WSL or whichever is most reliable and is guaranteed to be\nthe latest Gfortran.\n\u2026\nOn Thu, 20 Aug 2020 at 09:20, smeskos ***@***.***> wrote:\n @GS76 <https://github.com/GS76> WSL refers to Windows Subsystem for\n Linux, in short, you install a Linux distribution directly onto your\n Windows 10 (no virtual machine). This is an official Microsoft feature (not\n a 3rd party hack). Although it is not, yet, as robust as a clean Linux\n installation, and it lucks a GUI, you only get a bash, it is still a viable\n solution.\n\n @milancurcic <https://github.com/milancurcic> I believe we need a new\n book about how to set up a Fortran environment in all major OS (including a\n list of the most common IDEs/Text-editors and how to configure them). From\n my experience with new Fortran users (from r/fortran and colleagues) they\n are usually Windows-only users with little programming experience. To push\n everyone toward WSL - a command-line-only Linux could bring a lot of\n frustration.\n For the moment we should just replace this link with something else that\n works. We could mention both MinGW and WSL and later add a link to a new\n book that will explain how to set them up.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#134 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AM7MLHH5FSKWID3VXXTNDETSBTFELANCNFSM4QFKDMOQ>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-20 08:16:40+00:00",
                    "text": "It is a shame these downloads stopped working - they offered a very easy install and packed in some useful extras like OpenMP and make.\n\nI believe we need a new book about how to set up a Fortran environment in all major OS (including a list of the most common IDEs/Text-editors and how to configure them).\n\nYes this idea has been discussed and is planned - if you are willing to make a start on this, that would be great!\nIdeally this mini-book would present the main options available for Windows, their respective advantages/disadvantages, and instructions for each.\n\nI think we should steer the Windows support toward WSL.\n\nThe main disadvantage of WSL is that you need to use cross-compilation to compile native Windows binaries, which is a common reason for needing Windows support, but I agree it is now a good solution for those comfortable with Linux command line.\n\nFrom my experience with new Fortran users (from r/fortran and colleagues) they are usually Windows-only users with little programming experience. To push everyone toward WSL - a command-line-only Linux could bring a lot of frustration.\n\nVery true, but I don't know of many easy GUI setups for Fortran. I used Geany on Windows when I was learning because it supports Fortran, but you still need to install the compiler yourself I think."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-20 14:03:51+00:00",
                    "text": "Looks like the download links are working again. We still have the problem of relying on this third-party site; a possible solution could be to setup a mirror."
                },
                {
                    "user": "GS76",
                    "date": "2020-08-20 15:56:28+00:00",
                    "text": "I checked, Geany does not install Gfortran when installed.\n\u2026\nOn Thu, 20 Aug 2020 at 16:04, Laurence Kedward ***@***.***> wrote:\n Looks like the download links are working again. We still have the problem\n of relying on this third-party site; a possible solution could be to setup\n a mirror.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#134 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AM7MLHDUTK4SMJODMMJAUX3SBUUNPANCNFSM4QFKDMOQ>\n ."
                },
                {
                    "user": "smeskos",
                    "date": "2020-08-20 16:23:11+00:00",
                    "text": "Yes this idea has been discussed and is planned - if you are willing to make a start on this, that would be great!\n\nI am, I will start today and will commit a PR as soon as I have a first draft."
                }
            ]
        },
        {
            "number": 133,
            "user": "LKedward",
            "date": "2020-08-07 16:05:44+00:00",
            "title": "List FPM registry packages",
            "text": "A minimal modification to include packages from fpm-registry on the website.\nThey are listed in their own category ('fpm') as well as searchable via the existing search function.\nThis is a stopgap until we can clean this up and separate out fpm-registry like crates.io to provide more info.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-08-07 16:05:56+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-07 16:06:53+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/133/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-07 16:08:37+00:00",
                    "text": "Sorry, preview's not working because it depends on the new CI files"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-08 07:53:38+00:00",
                    "text": "Thanks Ond\u0159ej! Yep I'm open to suggestions as to how we can improve this in the future"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-08 08:03:43+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-08 08:04:04+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "certik",
                    "date": "2020-08-08 19:34:08+00:00",
                    "text": "I checked it on the website and it looks awesome! Thank you for implementing this.\n\u2026\nOn Sat, Aug 8, 2020, at 2:04 AM, github-actions[bot] wrote:\n\n\n The preview build for this PR has now been deleted.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#133 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWC3N2WOL5GTQ2HOZGLR7UBH7ANCNFSM4PXYZTZQ>."
                }
            ]
        },
        {
            "number": 132,
            "user": "certik",
            "date": "2020-08-01 21:09:18+00:00",
            "title": "Make the link clickable",
            "text": "I didn't notice it as part of #125, as it shows fine on GitHub, but the Jekyll Markdown formatting doesn't make the url automatically a link.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-08-01 21:10:09+00:00",
                    "text": "It's a simple fix, so I am going to merge it."
                }
            ]
        },
        {
            "number": 131,
            "user": "milancurcic",
            "date": "2020-07-31 16:00:51+00:00",
            "title": "fix typos in the netcdf-fortran entry",
            "text": "Fixes 2 typos in the netcdf-fortran package index entry.",
            "comments": []
        },
        {
            "number": 130,
            "user": "LKedward",
            "date": "2020-07-31 09:45:48+00:00",
            "title": "Add: ADflow to package index.",
            "text": "One from the list of popular Fortran projects.\nThis solver is state-of-the-art for aerodynamic optimization and probably one of very few remaining mainstream finite volume CFD solvers implemented in Fortran outside of industry.\n(Also an excellent example of the state-of-the-art in automatic differentiation in Fortran as discussed in j3-fortran/fortran_proposals#95.)",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-07-31 14:17:58+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-31 14:18:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/130/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-31 14:20:06+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-31 14:20:26+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 129,
            "user": "certik",
            "date": "2020-07-30 15:02:01+00:00",
            "title": "Comment text in activity JSON files",
            "text": "Currently we store each comment together with the metadata in the activity JSON files. Do we need to do that? I think the JSON files might become much smaller without the text of the comments. I don't know if we might want to need them in the future, but even if so, I would imagine only to show some statistics (number of words / sentences written?), so it seems to me we can have some separate repository that can store the comments, but the JSON files that we need for this website should only contain things we actually need, which is just the metadata (plus any possible statistics about comments if we want in the future), but not the comments themselves.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-30 15:22:02+00:00",
                    "text": "Yes you are right, we don't need all the data we are currently storing.\nMy long term plan has been to perform more pre-processing in the python script before dumping to json; every time the contributor data is loaded on a webpage, the json data has to be processed in javascript (this function) to extract a list of contribution dates per user. This is obviously wasteful on the client-side since this processingt can be performed a priori."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 15:59:25+00:00",
                    "text": "Yes, exactly."
                }
            ]
        },
        {
            "number": 128,
            "user": "dev-zero",
            "date": "2020-07-30 12:49:51+00:00",
            "title": "package_index: FortranCallGraph and Serialbox",
            "text": "While looking for a callgraph generator I stumbled over the FortranCallGraph project (a static callgrapher), from there you can find the FortranTestGenerator (unittest framework based on Capture & Replay via Serialbox), and the serialization library Serialbox (from Swiss Meteo).\nThe FortranTestGenerator I'm not yet adding due to lack of documentation example code.",
            "comments": [
                {
                    "user": "dev-zero",
                    "date": "2020-07-30 14:01:06+00:00",
                    "text": "@LKedward thanks, done"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 14:04:48+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-30 14:05:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/128/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 14:10:44+00:00",
                    "text": "Packages and their badges are rendering properly \ud83d\udc4d .\nI'm happy that these packages meet the criteria for listing so I'll merge.\n#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-30 14:11:06+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-30 15:35:56+00:00",
                    "text": "Just so I understand for future packages, this one satisfies the relevance criterion:\n\nRelevance: the package must be primarily implemented in Fortran or provide a complete Fortran interface to an existing package or be purposed solely towards software development in Fortran.\n\nonly because it's \"purposed solely towards software development in Fortran\", correct?\nI ask because when I first looked at the repo, I saw that it's a Python package with only target code samples in Fortran, so it gave me pause.\nSo, the 3rd test in the relevance criterion basically allows any non-Fortran tool that is somehow to be used for Fortran development. Another obvious example is FORD. Am I interpreting this correctly?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 15:54:10+00:00",
                    "text": "So, the 3rd test in the relevance criterion basically allows any non-Fortran tool that is somehow to be used for Fortran development. Another obvious example is FORD. Am I interpreting this correctly?\n\nYes, this is my reasoning. The third criterion was written this way precisely to allow FORD and similar utilities.\nUltimately fortran-lang should probably list development tools and utilities like FORD separately somewhere, but for now they allowed as 'packages' just as a convenience."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 15:56:43+00:00",
                    "text": "I am a little worried that we are opening a pandora box with this ---- it seems we should also list any Fortran related tools, such as LFortran, GFortran, Flang, all kinds of plugins for VSCode etc.\nMaybe we can have a dedicated tag for these."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 15:58:53+00:00",
                    "text": "I am a little worried that we are opening a pandora box with this...\n\nI agree, which is why a separate site page may be more suitable. Perhaps the Compiler page becomes a more general page with compilers and development tools?"
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 16:02:22+00:00",
                    "text": "I think we should list all good related tools for Fortran somehow. Including things like debuggers and optimization tools if they work with Fortran. Also currently we only list open source tools (but for compilers we want to list the commercial ones too).\nSo it's just a question where. For now maybe we can have a tag or category for \"tools\" and list all these open source tools there."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 16:47:15+00:00",
                    "text": "I think we should list all good related tools for Fortran somehow. Including things like debuggers and optimization tools if they work with Fortran. Also currently we only list open source tools (but for compilers we want to list the commercial ones too).\n\nYep, this is what I had in mind.\n+1 for introducing a 'Tools' category until we have a dedicated page for this."
                }
            ]
        },
        {
            "number": 127,
            "user": "schoonovernumerics",
            "date": "2020-07-27 14:24:20+00:00",
            "title": "Add Fortran Equation Parser",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-27 14:35:09+00:00",
                    "text": "+1 to add. I haven't checked if the categories exist.\n\u2026\nOn Mon, Jul 27, 2020, at 8:24 AM, Joseph Schoonover wrote:\n\n You can view, comment on, or merge this pull request online at:\n\n   #127\n\n Commit Summary\n\n  * Add Fortran Equation Parser\n File Changes\n\n  * *M* _data/package_index.yml\n <https://github.com/fortran-lang/fortran-lang.org/pull/127/files#diff-ffb54f73abb65351a6456a90b3972a91> (8)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.org/pull/127.patch\n  * https://github.com/fortran-lang/fortran-lang.org/pull/127.diff\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#127>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWC3N2EKILH44XN3VX3R5WE2HANCNFSM4PI2IXYA>."
                },
                {
                    "user": "certik",
                    "date": "2020-07-28 17:29:19+00:00",
                    "text": "Thanks! Merging."
                }
            ]
        },
        {
            "number": 126,
            "user": "certik",
            "date": "2020-07-24 15:57:31+00:00",
            "title": "Tutorial: how to deal with strings",
            "text": "I am to this day struggling how to deal with strings in modern Fortran. I would be happy to contribute a tutorial, once I learn what the best practice is.\nFunction accepting a string\ninteger function f(s)\ncharacter(*), intent(in) :: s\nf = len(s)\nend function\nNote: the first argument in character(...) is len, so the above is equivalent to character(len=*). I think it is ok to not specify len, as things are shorter then.\nSubroutine returning a string\nsubroutine f(s)\ncharacter(:), allocatable, intent(out) :: s\ns = \"Some text\"\nend subroutine\nNote: This automatically allocate the LHS, so s will get allocated to the length of the string, no white space padding.\nQuestion 1\nIn fpm, the following code:\nsubroutine cmd_build()\ntype(string_t), allocatable :: files(:)\ncharacter(:), allocatable :: basename, pkg_name, linking\ninteger :: i, n    \nprint *, \"# Building project\"\ncall list_files(\"src\", files)\nlinking = \"\"\ndo i = 1, size(files)\n    if (str_ends_with(files(i)%s, \".f90\")) then\n        n = len(files(i)%s)\n        basename = files(i)%s(1:n-4)\n        call run(\"gfortran -c src/\" // basename // \".f90 -o \" // basename // \".o\")    \n        linking = linking // \" \" // basename // \".o\"\n    end if    \nend do\ncall run(\"gfortran -c app/main.f90 -o main.o\")\ncall package_name(pkg_name)\ncall run(\"gfortran main.o \" // linking // \" -o \" // pkg_name)\nend subroutine\nGives a warning:\n# gfortran (for build/gfortran_debug/fpm/fpm.o build/gfortran_debug/fpm/fpm.mod)\nsrc/fpm.f90:163:0:\n\n linking = \"\"\n \nWarning: \u2018.linking\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n\nWhat am I doing wrong? How do I initialize an empty string?\nQuestion 2\nHow do you return a string from a function as a return value?\n\nI will probably have more questions. These are the most pressing.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:04:15+00:00",
                    "text": "This would be a good tutorial to have as a reference \ud83d\udc4d\nI cannot find a reference right now, but I believe the maybe-uninitialized error in gfortran occurs spuriously for allocatable strings. I have the same warning in gfortran when I use allocatable strings, but not with ifort or new flang."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-24 16:07:45+00:00",
                    "text": "I do exactly the same thing as your examples of function accepting and subroutine returning strings. I imagine this is common use.\nQuestion 1: You're doing nothing wrong. Gfortran is warning about correct Fortran.\nQuestion 2:\nmodule mod_str\ncontains\n  pure function str()\n    character(:), allocatable :: str\n    str = 'hello'\n  end function str\nend module mod_str\n\n\nprogram test_str\n  use mod_str, only: str\n  print *, str()\nend program test_str"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:17:45+00:00",
                    "text": "Continuing Milan's example:\nprogram test_str\n  use mod_str, only: str\n  character(:), allocatable :: my_string\n  my_string = str()\nend program test_str\nMy understanding about this usage is that there are two allocation-on-assignments happening: one in the function for the function result; and one for the assignment at program level.\nSo in comparison to a subroutine implementation, functions returning allocatables incur an extra allocation and, in this example, an extra copy during assignment."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:19:04+00:00",
                    "text": "(sorry, closed by mistake)"
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 16:29:45+00:00",
                    "text": "@LKedward that is precisely why I asked about this. If that is the case, that seems like a big downside and our string routines in stdlib should return the strings via arguments as subroutines, not as return values from functions."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:36:39+00:00",
                    "text": "If that is the case, that seems like a big downside and our string routines in stdlib should return the strings via arguments as subroutines, not as return values from functions.\n\nYep, I haven't benchmarked it but this is why I generally avoid functions for returning non-scalars. You can use pointers to return allocated arrays from functions more efficiently, but I also avoid using pointers.\nNB: Allocation on assignment\nAnother useful thing to note, which I only learned recently, is that allocation-on-assignment doesn't occur for colon subscripts ((:)).\nSo this doesn't work:\nprogram test_str\n  use mod_str, only: str\n  character(:), allocatable :: my_string\n  my_string(:) = str()\nend program test_str\nBased on this, I would consider it good practice to use the colon subscript to explicitly indicate where there is assignment only and to avoid accidental reallocation.\nQuestion: filling a character string\nI have my own related question for strings: Is there a one-liner for filling a character(*) with a non-space character(1)?\nExample case is for filling a string with all zeros."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-24 17:03:31+00:00",
                    "text": "My understanding about this usage is that there are two allocation-on-assignments happening: one in the function for the function result; and one for the assignment at program level.\n\nYes, I think this is true for any function returning anything allocatable. It's especially penalizing for large arrays. Don't do it if you care about high performance.\nI have a toy wave physics project that did this for everything, including large arrays. I was optimizing for functional API and UI, although at the time I didn't understand the implications of functions returning allocatable arrays. Later I heard from a person who found the code to do exactly what they needed but it was too inefficient so they rewrote everything to subroutines to make it fast :)."
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 17:13:33+00:00",
                    "text": "Regarding functions returning allocatable --- is this mandated by the Fortran Standard to allocate twice, or are compilers permitted to make it as efficient as intent(out) for subroutines? (It's just that some or most compilers currently don't optimize it out, but they could in the future.)"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 17:26:33+00:00",
                    "text": "Regarding functions returning allocatable --- is this mandated by the Fortran Standard to allocate twice, or are compilers permitted to make it as efficient as intent(out) for subroutines? (It's just that some or most compilers currently don't optimize it out, but they could in the future.)\n\nIt would make sense that if the function is able to be inlined, then one allocation could be optimized out, but I'm no expert here.\nI think that in general, the function result needs to be a distinct memory location because it may be used subsequently in an expression; i.e. there is a fundamental difference between a function result and a subroutine intent(out) dummy arg - the former is returned by value whereas the latter is essentially a pointer.\nNote 1, section 15.6.2.2 from the interpretation doc:\nThe function result is similar to any other entity (variable or procedure pointer) local to a function sub-\nprogram. Its existence begins when execution of the function is initiated and ends when execution of the\nfunction is terminated. However, because the final value of this entity is used subsequently in the evaluation\nof the expression that invoked the function, an implementation might defer releasing the storage occupied\nby that entity until after its value has been used in expression evaluation."
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 18:10:06+00:00",
                    "text": "My understanding of the text you posted is that the Standard allows the result of the function to be as efficient as an intent(out) dummy argument if the compiler chooses to do that."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 19:40:13+00:00",
                    "text": "Would such an optimization be prevented by the requirement that the RHS is evaluated before the assignment occurs?\nFrom 10.2.1.3:\nThe execution of the assignment shall have the same effect as if the evaluation of\nexpr and the evaluation of all expressions in variable occurred before any portion\nof the variable is defined by the assignment.\n\nfor\nvariable = expr"
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 20:04:56+00:00",
                    "text": "I don't know. We might need to ask at the committee. My understanding of it is that the key is \"shall have the same effect\", in other words, it does not actually have to happen that way, only have the same effect. So the question then becomes if double allocation has the same effect as single allocation. For a string, it seems the logic of the code would be the same. For user derived types perhaps the user requires the finalizer to be called twice."
                },
                {
                    "user": "smeskos",
                    "date": "2020-07-24 20:53:07+00:00",
                    "text": "Regarding Question1:\nIgnore the warning, this is one of the flags, and actually for the same particular use case, that I suppress with -Wno-maybe-uninitialized, and if you recall one of the reasons I raised an issue here fpm. Also, take a look at Steve Kargl's post in our discourse here. Finally, another similar discussion can be found here.\nRegarding Question2:\nI personally follow the way presented by @milancurcic :\n\nI do exactly the same thing as your examples of function accepting and subroutine returning strings. I imagine this is common use.\nQuestion 1: You're doing nothing wrong. Gfortran is warning about correct Fortran.\nQuestion 2:\nmodule mod_str\ncontains\n  pure function str()\n    character(:), allocatable :: str\n    str = 'hello'\n  end function str\nend module mod_str\n\n\nprogram test_str\n  use mod_str, only: str\n  print *, str()\nend program test_str\n\nHowever, since we are into this discussion, I also have something to add about the behavior of allocatable characters that may be relevant.\nThe following compiles with no warnings or errors but abords at runtime with a segmentation error:\ncharacter(len=:),allocatable :: str\n\nsubroutine init_string(filename, str)\n    character(len=*),intent(in) :: filename\n    character(len=:),allocatable, intent(out) :: str\n    open(file...)\n    read(unit,*)str\n    close(file...)\nend subroutine init_string\nwhile this is correct:\ncharacter(len=:),allocatable :: str\n\nsubroutine init_string(filename, str)\n    character(len=*),intent(in) :: filename\n    character(len=:),allocatable, intent(out) :: str\n    character(len=50) :: temp ! 50 is just a random number for demonstration purposes\n    open(file...)\n    read(unit,*)temp\n    str = trim(temp)\n    close(file...)\nend subroutine init_string\nAnother interesting behavior is when the allocatable character in the above example is part of a derived type eg:\ntype  t_gas\n    character(len=:),allocatable :: name\n    double :: mass\n    etc...\nend type t_gas\nNow assume we defined a type(t_gas)::gas and tried to read gas%name as we did in the first nonworking example then the program runs without any error but in reality name%gas remains uninitialized, you can print it and it just returns blank but NO error!!"
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 21:32:09+00:00",
                    "text": "@smeskos I think you cannot read into an allocatable character type. I vaguely remember this being discussed in the standards committee how to improve the standard to allow this. Until then I think it is not allowed."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-07-24 23:45:58+00:00",
                    "text": "I've generally just resorted to using a string type for everything, and then for intent(in) arguments just using an interface to allow people to also pass in character literals (or just character variables)."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-07-25 11:56:19+00:00",
                    "text": "Question: filling a character string\nI have my own related question for strings: Is there a one-liner for filling a character(*) with a non-space character(1)?\nExample case is for filling a string with all zeros.\n\ncharacter(len=:), allocatable :: s\ns = repeat('0',10)\nwrite(*,*) s\n\nwill output 0000000000"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-25 12:45:35+00:00",
                    "text": "Perfect, thank you @ivan-pi!"
                }
            ]
        },
        {
            "number": 125,
            "user": "certik",
            "date": "2020-07-21 14:42:55+00:00",
            "title": "WIP: Add the initial draft of the August Newsletter",
            "text": "TODO:\n\n I left the word FIXME in the text for things that we still need to update\n @jvdp1 is there anything in stdlib that you would like to highlight?\n @everythingfunctional would you mind filling out the fpm section?\n Update contributor json data (@LKedward)\n\nIn general, do we want to get more news from more projects, such as compilers?",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-07-21 14:47:27+00:00",
                    "text": "@certik thank you for starting it!"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-07-28 18:18:31+00:00",
                    "text": "I'll look tomorrow to write a small section on the changes of the structure of stdlib.\nIs it an idea to have a section Ongoing discussion inside the sdtlib section? It could highlight them to the community and maybe re-stimulate some of them."
                },
                {
                    "user": "certik",
                    "date": "2020-07-28 18:21:44+00:00",
                    "text": "Yes, ongoing discussion seems like a good idea to mention in the newsletter."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 09:05:49+00:00",
                    "text": "I'll rerun and upload the contributor json data-files this afternoon."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 09:10:26+00:00",
                    "text": "In general, do we want to get more news from more projects, such as compilers?\n\nI have no objection to this - any interesting updates from LFortran?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-07-30 09:20:36+00:00",
                    "text": "I read in the Slack page that they are still working on it (wednesday 22\njuly) - it is taking them more time than anticipated, as this is all new.\n\nMaybe Tiziano can provide an estimate?\n\nOp do 30 jul. 2020 om 11:03 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n *@LKedward* commented on this pull request.\n ------------------------------\n\n In _posts/2020-08-01-Fortran-Newsletter-August-2020.md\n <#125 (comment)>\n :\n\n > +* Try to use it. Does it work? No? Let us know! Read the [fpm packaging guide](https://github.com/fortran-lang/fpm/blob/master/PACKAGING.md) to learn how to build your package with fpm.\n +* Browse the [open issues](https://github.com/fortran-lang/fpm/issues) and see if you can help implement any fixes or features.\n +* Adapt your Fortran package for fpm.\n +* Improve the documentation.\n +\n +The short term goal of fpm is to make development and installation of Fortran packages with dependencies easier.\n +Its long term goal is to build a rich and decentralized ecosystem of Fortran packages and create a healthy\n +environment in which new open source Fortran projects are created and published with ease.\n +\n +## Events\n +\n +* [FortranCon 2020](https://tcevents.chem.uzh.ch/event/12) was held July 2 - 4.\n +with many interesting talks.\n +See the talk schedule\n +[here](https://tcevents.chem.uzh.ch/event/12/timetable/#20200702.detailed).\n +FIXME: is recordings available?\n\n They said they would be made available on their SWITCHtube\n <https://tube.switch.ch/organizations/5>, but nothing there yet.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#125 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6RDIIBR3XNZNEJNZDR6EZNPANCNFSM4PDVP3PQ>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 15:46:55+00:00",
                    "text": "I have no objection to this - any interesting updates from LFortran?\n\nThe updates for last month would be:\n\nThe initial prototype C++ backend can translate Fortran's do concurrent to C++'s Kokkos::parallel_for: https://twitter.com/lfortranorg/status/1280764915242811393\nLFortran has a Twitter account for latest updates: @lfortranorg\nWork is progressing on the production version of LFortran that is written in C++\n22 Merge Requests were merged and 4 issues fixed in July 2020. Some notable ones:\n\n#163: Implement basic Fortran to C++ translation backend\n!410: Make simple calculations work via LLVM in interactive mode\n!402: Build ASR (Abstract Semantic Representation) properly for subroutines and functions\n\n\n\n@LKedward do you think it's worth putting in? If so, we should ask other open source compilers to provide updates also --- I am happy to do that (if they don't make this newsletter, they can make the next one)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 16:49:20+00:00",
                    "text": "@LKedward do you think it's worth putting in?\n\nThis is certainly of interest to me. Like you suggest, I'd also be interested in frequent updates from the new flang project as well.\nIt doesn't have to be every month, but it's nice to get progress updates on projects likes these that will eventually be of benefit to the wider community."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 17:44:48+00:00",
                    "text": "@LKedward ok. I have added it in 4a5004e."
                },
                {
                    "user": "certik",
                    "date": "2020-08-01 16:14:38+00:00",
                    "text": "I approve the last open suggestion. Please push in and merge. I am not at my computer.\n\u2026\nOn Sat, Aug 1, 2020, at 10:02 AM, Milan Curcic wrote:\n\n\n ***@***.**** approved this pull request.\n\n I think the newsletter is now in good shape.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#125 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAELMZXILI3YSTJZX3R6Q4DDANCNFSM4PDVP3PQ>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-01 17:11:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-01 17:12:49+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/125/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-01 17:22:02+00:00",
                    "text": "Many thanks everyone for your contributions! Looking good with three approvals so I will now merge."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-01 17:24:04+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-01 17:24:23+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 124,
            "user": "nncarlson",
            "date": "2020-07-16 14:51:12+00:00",
            "title": "Update Truchas URL",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-16 15:06:58+00:00",
                    "text": "Thanks for merging @LKedward !"
                }
            ]
        },
        {
            "number": 123,
            "user": "LKedward",
            "date": "2020-07-14 13:20:33+00:00",
            "title": "Add: license info to Futility package entry.",
            "text": "License info is not detected automatically for this package, so add explicitly.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-14 15:45:53+00:00",
                    "text": "+1"
                }
            ]
        },
        {
            "number": 122,
            "user": "Romendakil",
            "date": "2020-07-13 21:57:52+00:00",
            "title": "Adding WHIZARD as a Fortran project.",
            "text": "Proposal to add WHIZARD as a Fortran project. We are a High Energy Physics Monte Carlo Event Generator, so a scientific code, predominantly in Fortran up to F03 and F08 standard. The project ships with a code generator that is written in OCaml and generates Fortran code compiled and linked as shared libraries. Our development is done in a (non-openly visible) gitlab server at the University of Siegen, whose reviewed merge requests are mirrored to our public gitlab server in Siegen and an svn repository at Hepforge. Distribution tarballs are also available via http://launchpad.net/whizard. We are using both OpenMP and MPI for parallelized Monte Carlo integration and simulation, in our development version using also non-blocking communication. Two of our team members, Wolfgang Kilian and J\u00fcrgen Reuter, are relatively active on c.l.f., the Intel forum, and the gfortran bugzilla.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-13 22:34:37+00:00",
                    "text": "Thanks @Romendakil for submitting it!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 22:48:22+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 121,
            "user": "aarograh",
            "date": "2020-07-13 19:28:12+00:00",
            "title": "Add CASL/Futility to package index",
            "text": "",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 19:37:39+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 19:38:39+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/121/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 19:41:46+00:00",
                    "text": "I verified that this satisfies all 6 criteria. Thank you @aarograh!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 19:42:03+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 19:42:26+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 120,
            "user": "LKedward",
            "date": "2020-07-08 10:01:54+00:00",
            "title": "Add learn books",
            "text": "Additional print resources as discussed on discourse\nCloses #118.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-08 10:02:11+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 10:03:10+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/120/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-08 18:21:57+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 18:22:18+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 119,
            "user": "LKedward",
            "date": "2020-07-08 08:43:05+00:00",
            "title": "Fix: broken contributor plots on safari.",
            "text": "Fixes #105.\nThere are still some formatting issues on mobile, but those can be addressed in a separate issue.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-08 08:43:40+00:00",
                    "text": "#build_preview\n@certik, can you check on your iPhone?"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 08:44:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/119/"
                },
                {
                    "user": "certik",
                    "date": "2020-07-08 15:08:51+00:00",
                    "text": "I just checked both Safari and Firefox on iPhone and it works now! Thank you for fixing it @LKedward."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:59:05+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 08:59:29+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 118,
            "user": "LKedward",
            "date": "2020-07-06 09:55:10+00:00",
            "title": "Additional books for learning",
            "text": "See discussion at https://fortran-lang.discourse.group/t/books-for-the-learn-page/177/6",
            "comments": []
        },
        {
            "number": 117,
            "user": "certik",
            "date": "2020-07-03 20:57:02+00:00",
            "title": "Add Benchmarks sections",
            "text": "I suggest that we have to have and maintain our own benchmarks and have a dedicated section for it.\nAs an example, the Julia page has benchmarks against Fortran, but unfortunately they do not enable all optimization flags in gfortran, and when I pointed that to them, they said that they do not want to do that because they have different priorities in what they want to benchmark: JuliaLang/julia#24568, which is fine, they have the right to do that. But it is then misleading to users when they think that Fortran is not that fast.\nTo fix that, we have to maintain our own benchmarks, and test them with several Fortran compilers, and ensure that all optimization options are enabled. And we should benchmark against other languages.\nThis will also provide motivation for Fortran compiler vendors to speed up some of these benchmarks if Fortran is not the fastest.\nHere are some ideas for benchmarks to include:\n\nhttps://julialang.org/benchmarks/\nhttps://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/fortran.html\nhttps://github.com/ParRes/Kernels\n...",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-03 21:10:58+00:00",
                    "text": "Furthermore, I suggest to set objectives of what code we will accept:\n\nMust only use the given language, for example Fortran or C++, and it should not use any assembly directly.\n\nAs an example, for the n-body problem, this code is fine for Fortran: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-ifc-6.html, readable, maintainable. For C++, we should include an equivalent code, we specifically should not allow to include assembly instrinsics like this one: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-gpp-7.html, full of assembly intrinsics. More specifically, we should mention it that you can of course write this in assembly (or inline it in C++ in various ways), but in our main benchmarks, we should put code that people would actually write to solve the problem in the given language itself without resolving to assembly. The same with the Rust version that currently is the fastest: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-rust-7.html, it's full of assembly intrinsics.\nThen we can have a section where anything is allowed, including assembly.\nThe idea is that with enough expertise, the best is to optimize in assembly. For example OpenBLAS is mostly in assembly. But the point of the benchmarks is to see how fast can you get if you only stick to the language and canonical ways of doing things in the language.\nTo put it another way: our benchmarks should show, that Fortran is an excellent choice for this mission:\n\nenable scientists, engineers, and other domain experts to write programs that naturally express the mathematics and algorithms employed, are portable across HPC systems, remain viable over decades of use, and extract a high percentage of performance from the underlying hardware."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-03 21:20:23+00:00",
                    "text": "Yes, it's paramount that we set the objectives ahead of time so we're clear ourselves what is it that we want to measure. Considering the scope of the project, I think this issue calls for a dedicated repo, fortran-lang/benchmarks."
                },
                {
                    "user": "certik",
                    "date": "2020-07-03 21:26:27+00:00",
                    "text": "Yes, definitely a dedicated repository, so that people can easily run the benchmarks on their systems. Only the results can be shown at fortran-lang.org."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-06 09:24:11+00:00",
                    "text": "+1 for a benchmarks repo!\nIdeally, for the web-published results we would have a dedicated machine for automation and consistency of test-environment, but I guess this isn't strictly necessary if we're interested in relative comparisons.\nDo we only test free compilers like gfortran and flang or can we get a license for ifort and others?\n\nThis will also provide motivation for Fortran compiler vendors to speed up some of these benchmarks if Fortran is not the fastest.\n\nI agree, it will also identify any areas where Fortran is lagging behind; in the Julia benchmarks, Fortran seems to be let down by the integer parsing and the file io benchmarks (implementation here)."
                },
                {
                    "user": "certik",
                    "date": "2020-07-06 16:16:19+00:00",
                    "text": "The Debian shootout page is using Intel Fortran, so I suggest we use all Fortran compilers that are available to us. In fact, this can be a nice opportunity to compare the various Fortran compilers themselves. We can have different sections in the benchmarks, such as:\n\nFortran only (Fortran compilers comparison)\nLanguages comparison (the best is probably to show various Fortran and C++ and other languages' compilers); inline assembly and intrinsics are not allowed\nAssembly section (where any code in any form is allowed)\n\nThe \"Languages comparison\" section can also have subsections, like\n\nall optimizations on (the default section)\n-ffast-math not allowed (that's essentially the Julia benchmarks page), which has its merits, but I would argue most Fortran users care more about the \"all optimizations on\" section"
                },
                {
                    "user": "certik",
                    "date": "2020-07-09 15:25:15+00:00",
                    "text": "See also a related thread at https://fortran-lang.discourse.group/t/improving-fortran-results-in-the-julia-micro-benchmarks/198.\nLet's start the repository.\nHow about https://github.com/fortran-lang/benchmarks?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-09 15:56:16+00:00",
                    "text": "Sounds good! We can then discuss various options for implementation in the dedicated repo."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-09 16:00:44+00:00",
                    "text": "\ud83d\udc4d for fortran-lang/benchmarks"
                },
                {
                    "user": "certik",
                    "date": "2020-07-09 16:02:34+00:00",
                    "text": "Done, the repository is up, @LKedward you should have maintainer access. Go ahead and start it."
                }
            ]
        },
        {
            "number": 116,
            "user": "Irvise",
            "date": "2020-07-02 10:49:33+00:00",
            "title": "Expand do loops with cycle and exit",
            "text": "This is a minor expansion of the tutorial page on control flow.\nI am not entirely happy with the current result, but I cannot figure out why (probably because it is very short when compared to the rest of the file). So any comments on these changes are welcome.\nI expect to continue expanding this with do concurrent and tags. However, some initial feedback will be beneficial.\nThis pull is related to the discussion in #82.\nRegards,\nFernando",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-02 11:06:12+00:00",
                    "text": "This looks great @Irvise, definitely an improvement!\nThanks \ud83d\udc4d"
                },
                {
                    "user": "certik",
                    "date": "2020-07-02 15:43:58+00:00",
                    "text": "Thanks @Irvise, looks great!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-02 17:39:29+00:00",
                    "text": "I agree, great addition, thank you!\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-02 17:40:30+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-03 10:52:01+00:00",
                    "text": "I suppose this marks the end of the changes.\nPlease, check do concurrent since I am not well versed with it and I may have committed some mistakes.\nMore comments are welcome."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-06 09:53:06+00:00",
                    "text": "Apologies for the delay @Irvise, I will review this today with specific feedback."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 09:34:35+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 09:37:40+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 09:41:30+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-07 09:42:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-07 10:01:12+00:00",
                    "text": "I have moved  do concurrent to the bottom and I have updated some comparison symbols to a more \"modern\" standard.\nI would say LGTM. Thanks @LKedward for the improvements!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 10:16:16+00:00",
                    "text": "Great stuff! \ud83d\udc4d  (Sorry for the conflicts!)\n#build_preview"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-07 13:55:07+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-07 13:56:07+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-08 08:25:02+00:00",
                    "text": "One last thing @Irvise, some of the indentation is rendering incorrectly for the cycle example, and the tagged nested loop example; the end if is not aligned with the opening if and the loop body has extra indentation. Can you make sure you're not using any tab characters, only spaces?"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-08 16:52:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 16:53:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:55:07+00:00",
                    "text": "I will merge as no other comments. Great addition @Irvise, thanks!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:58:35+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 08:58:57+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 115,
            "user": "LKedward",
            "date": "2020-06-25 13:13:35+00:00",
            "title": "Fix: README link to CONTRIBUTING.md",
            "text": "",
            "comments": []
        },
        {
            "number": 114,
            "user": "LKedward",
            "date": "2020-06-25 13:08:03+00:00",
            "title": "Update: preview action for future posts.",
            "text": "Build PR previews with --future flag to allow previewing of future newsletters.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-25 21:57:44+00:00",
                    "text": "I'll merge so we can try it for the newsletter."
                }
            ]
        },
        {
            "number": 113,
            "user": "milancurcic",
            "date": "2020-06-23 17:48:47+00:00",
            "title": "Begin draft of the July newsletter",
            "text": "Will merge on July 1. Please review, edit, and approve before then.\nIf you make edits, please also add your name to the Authors list.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-23 17:49:20+00:00",
                    "text": "Assigned @certik for generating the contributors list."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-25 21:59:16+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-25 22:00:11+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/113/"
                },
                {
                    "user": "certik",
                    "date": "2020-06-30 19:47:43+00:00",
                    "text": "I'll update the data files either tonight or tomorrow."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-01 15:49:52+00:00",
                    "text": "@certik Sounds good. Whenever you get to update the data, check the newsletter that it looks good, add your edits and name to the list of authors, and merge. IMO it's good to go."
                },
                {
                    "user": "certik",
                    "date": "2020-07-02 04:28:52+00:00",
                    "text": "Didn't get to it today. Do you need this before your presentation, or can I do it some time tomorrow when I have time?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-02 08:05:32+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-02 08:06:23+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/113/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-02 08:40:05+00:00",
                    "text": "I'll update the data files either tonight or tomorrow.\n\nI'll move the data files out to a separate repo this month and set up a github action so we don't have to do this manually in future."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-02 12:34:32+00:00",
                    "text": "@certik I don't need it for the talk, please do it when it's convenient for you."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-02 12:40:20+00:00",
                    "text": "@certik, @milancurcic, I pushed updated json data files this morning."
                },
                {
                    "user": "certik",
                    "date": "2020-07-02 13:25:34+00:00",
                    "text": "+1 to merge. Just a note that if we change the contributors section, we need to update all the newsletter with the new code."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-02 17:42:10+00:00",
                    "text": "Merging, thank you all!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:58:07+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 08:58:29+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 112,
            "user": "milancurcic",
            "date": "2020-06-23 16:03:06+00:00",
            "title": "Language tutorial topics",
            "text": "We discussed website tutorials on our June 19 call and we tentatively agreed to organize the mini-books that teach the language itself around topics, rather than skill level. Each mini-book would then cover the topic with increasing skill level, starting from the most basic concepts and building toward more advanced.\nThis is specific to the mini-books that teach the language itself. We'd still have other mini-books that cover other topics like building programs, best practices, Rosetta code and similar.\nOn the call a few people suggested that we discuss what should be the topics to cover. I think we should aim to define topics that are mostly complementary, have little overlap between each other (but it's impossible to completely avoid overlap). Here are the topics that I think would work well:\n\nBuilt-in types and operators\nControl flow\nProcedures\nModules\nArrays\nStrings\nDerived types\nI/O\nOOP\nParallel programming\nC-interop\n\nAs an example of building skill level within a topic, mini-book on parallel programming would cover all parallel concepts, from basic to advanced: Images, synchronization, coarrays, collectives, teams, events, and perhaps even some example parallel algorithms.\nIn this approach, a user of any skill level who wants to learn or refresh memory on any aspect of the language, knows where to look for it because the mini-books are organized by topic. Once in the mini-book, they can skip forward to more advanced aspects of a topic if needed.\nHow this all evolves exactly in practice, I don't know. Perhaps @LKedward will have some ideas. Perhaps we just expand the sections in the existing Quickstart until they become complete enough to warrant transitioning them into a dedicated mini-book.\nWhat do you think?",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-24 12:30:12+00:00",
                    "text": "This sounds good @milancurcic! I like your topic breakdown - this gives us a good starting point!\nWhere there is overlap between topics, will we be referring the reader to the corresponding mini-book (as a recommended prerequisite) or will we be repeating the content in both mini-books? The obvious examples I can think of are Procedures/Interfaces being prerequisite for Modules/C-interop and Derived types being prerequisite to OOP.\nThe problem with repeated content is increased maintainer workload and potential confusion for readers as to where best to go for a topic. The former problem can probably be solved by sharing pages between mini-books in the yaml file but I feel this exacerbates the latter issue of confusing readers.\nIMO, I think for these situations it is best not to repeat content and to recommend pre-requisite mini-books in the introduction of the dependent mini-book. The disadvantage of this approach is that the mini-books are not perfectly self-contained but partially interdependent.\nThere is a question about the future of the Quickstart mini-book - I would prefer to keep the mini-book as a brief overview of the main language features but with links to the other mini-books for each topic in detail. The Quickstart mini-book would not be part of the core language mini-books but the 'Other' mini-books.\nFinally, your proposed Parallel Programming book is a Coarray Parallel Programming book - I want to ask whether we are going to additionally cover MPI, OpenMP, and OpenACC as well. IMO we should include these, each in a separate mini-book, because they are well-established standards and I don't see any reason to arbitrarily limit the tutorial content to just the Fortran standard."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-06-24 13:16:15+00:00",
                    "text": "Finally, your proposed Parallel Programming book is a Coarray Parallel Programming book - I want to ask whether we are going to additionally cover MPI, OpenMP, and OpenACC as well. IMO we should include these, each in a separate mini-book, because they are well-established standards and I don't see any reason to arbitrarily limit the tutorial content to just the Fortran standard.\n\n+1. Recently I was at an OpenMP training course where I discovered they have a lot of nice training material also for Fortran. The book by Dragos B. Chirila also contains an OpenMP chapter in the context of Fortran.\nAn overview of solutions for GPU programming including CUDA, OpenCL, OpenMP, and OpenACC from the Fortran perspective would also be nice. I understand however, that the goal of coarrays was exactly to remove the burden of having to learn all of these standards and focus instead on the actual problem. There is a recent paper where they attempted to use coarrays on GPUs.\nWe could also ask the developers of these standards if they are willing to contribute a mini-book."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-24 14:54:13+00:00",
                    "text": "An overview of solutions for GPU programming including CUDA, OpenCL, OpenMP, and OpenACC from the Fortran perspective would also be nice.\n\nYes this is what I would like, though I am also aware that there is a lot of good preexisting material on these topics already.\n\nI understand however, that the goal of coarrays was exactly to remove the burden of having to learn all of these standards and focus instead on the actual problem.\n\nIt's great to have coarrays in the standard and I'm hopeful about their future, but unfortunately I'm not currently convinced of their maturity and portability (I can't yet find a native Windows version* except for ifort). Thanks for the paper link!\n\nWe could also ask the developers of these standards if they are willing to contribute a mini-book.\n\nGood idea!\n(edit: *I have not tried building OpenCoarrays from source on Windows.)"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-24 15:58:31+00:00",
                    "text": "Where there is overlap between topics, will we be referring the reader to the corresponding mini-book (as a recommended prerequisite) or will we be repeating the content in both mini-books? The obvious examples I can think of are Procedures/Interfaces being prerequisite for Modules/C-interop and Derived types being prerequisite to OOP.\n\nI also think referring the reader to other mini-books, rather than repetition, is better. One technique I learned from Manning is that if a mini-book (chapter) strongly depends on another, for example the way OOP depends on derived types, then at the beginning of the mini-book we can state clearly:\n\nThis tutorial assumes that you have a good grasp of the derived types. If you don't, please work through the derived types mini-book first.\n\nor similar. Another technique is to add a reference to a definition whenever we first bring up a term that we won't define here. For example, in OOP, when we first show a listing with a derived type in it, we can say something like:\n\nThis is a derived type, which is described in <link to derived type mini-book>.\n\n\nFinally, your proposed Parallel Programming book is a Coarray Parallel Programming book - I want to ask whether we are going to additionally cover MPI, OpenMP, and OpenACC as well. IMO we should include these, each in a separate mini-book, because they are well-established standards and I don't see any reason to arbitrarily limit the tutorial content to just the Fortran standard.\n\nYes, I meant it to cover only concepts that are part of the language, and I'd also like us to have separate mini-books on MPI, OpenMP, and OpenACC each."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-24 16:00:38+00:00",
                    "text": "It's great to have coarrays in the standard and I'm hopeful about their future, but unfortunately I'm not currently convinced of their maturity and portability (I can't yet find a native Windows version* except for ifort).\n\nI can confirm OpenCoarrays build and work well in WSL. I didn't try other Windows approaches."
                },
                {
                    "user": "certik",
                    "date": "2020-06-24 16:29:27+00:00",
                    "text": "I second that a tutorial how to use Fortran on GPUs efficiently would be key to help users around me stay in Fortran instead of moving to C++."
                }
            ]
        },
        {
            "number": 111,
            "user": "sblionel",
            "date": "2020-06-20 16:23:45+00:00",
            "title": "Add Doctor Fortran blog to learning.yml",
            "text": "Add Steve Lionel's \"Doctor Fortran\" blog to the list of external resources on the Fortran language",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 16:26:24+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-20 16:27:33+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/111/"
                },
                {
                    "user": "certik",
                    "date": "2020-06-20 16:54:28+00:00",
                    "text": "Thanks!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 17:00:39+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-20 17:01:03+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 110,
            "user": "sblionel",
            "date": "2020-06-19 17:26:27+00:00",
            "title": "Add link to Doctor Fortran blog?",
            "text": "On the Learn page, please add a link under Other Resources > On the Web as follows:\nDoctor Fortran blog Posts about various aspects, features and misconceptions of the Fortran language\nI tried to figure out how to do this myself, but could not locate the source that has the list of links.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-19 17:49:35+00:00",
                    "text": "I agree. It needs to be added as an entry here."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-19 17:50:30+00:00",
                    "text": "Steve, give it a try adding it through a PR, otherwise I can help."
                },
                {
                    "user": "sblionel",
                    "date": "2020-06-19 18:24:08+00:00",
                    "text": "I have never done this before and the help isn't helping. I gather I need to create a branch first, but I never see the option to create a new branch when I type a branch name from the main page. If you can lead me through the steps, I'll give it another go."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 16:08:39+00:00",
                    "text": "If you use git on your local machine, use this workflow:\n\nNavigate to https://github.com/fortran-lang/fortran-lang.org\nClick on \"Fork\" in the upper-right corner. This will create a fork of this repository under your account at https://github.com/sblionel/fortran-lang.org.\nClone your fork to your local machine:\n\ngit clone https://github.com/sblionel/fortran-lang.org\n\nif you're using username+password to authenticate with GitHub, or:\ngit clone git@github.com:sblionel/fortran-lang.org\n\nif you're using an SSH key for a password-less auth.\n\nIn your local copy of the repo, create and checkout a new branch that will serve for this contribution:\n\ncd fortran-lang.org\ngit branch 110-add-drfortran-blog # creates a new branch with the name 110-add-drfortran-blog\ngit checkout 110-add-drfortran-blog # switch to the new branch\n\nYou can name the branch anything you want, but generally it's helpful to put which issue it fixes (110) and a short description in the name.\n\nMake changes to _data/learning.yml in your local copy.\nStage, commit, and push your changes to GitHub:\n\ngit add _data/learning.yml # this stages the changes in this file\ngit commit -m \"add Dr. Fortran blog entry to the resources\" # this commits the change to the repository on your local machine\ngit push origin 110-add-drfortran-blog # this will push your updated branch to your fork on GitHub at sblionel/fortran-lang.org\n\n\nNow navigate to https://github.com/fortran-lang/fortran-lang.org again. Near the top of the page you'll see a yellow box with a suggestion to open a PR with your recent contribution. There will be a button there that says \"Compare and open PR\" or something similar. Click on it. This will take you to a PR dialog that looks very much like opening a new issue, and you should be good from there.\n\nThis approach is tedious and has many steps, but becomes really useful when you need to develop and test on your local machine, and make changes to many files.\n\nAlternatively, if you don't use git on your local machine, there is a simpler workflow through GitHub, although I think it's useful only for smaller, single file contributions. For what you want to do here, it should suffice. I am less clear about this approach but I will try.\n\nNavigate to https://github.com/fortran-lang/fortran-lang.org/blob/master/_data/learning.yml, that's the file you want to edit.\nIn the upper-right corner, click on the little pencil (\"Edit\") button. This will take you to the in-browser editor to make changes directly. Because you don't have permissions to write to the file directly, GitHub will automatically create a fork for you, but you don't have to worry about doing anything with it.\nOnce you made the changes, somewhere at the bottom there will be a prompt to open a pull request. This is the part I'm less clear about how it looks exactly because I did this myself only a few times. But the UI should be able to guide you.\n\nLet me know how it goes or if anything's unclear. I recently guided Arjen in #77 to do the same. It seems that it would be useful that we have these notes somewhere prominent on the website, as these steps apply to all projects."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 16:21:35+00:00",
                    "text": "I realize now that in the first (longer) workflow, you can skip steps 3 through 6, and edit the file in your fork directly on GitHub, then go straight to step 7."
                },
                {
                    "user": "sblionel",
                    "date": "2020-06-20 16:25:09+00:00",
                    "text": "Thanks! I chose the simpler route of doing it through Github, but I will keep this in mind for the future. The UI was straightforward."
                }
            ]
        },
        {
            "number": 109,
            "user": "MarDiehl",
            "date": "2020-06-19 16:16:08+00:00",
            "title": "better not write all functions again",
            "text": "just a small hint that I find helpful",
            "comments": [
                {
                    "user": "MarDiehl",
                    "date": "2020-06-19 17:54:43+00:00",
                    "text": "I also thought about changing the example, but then decided this is pedagogical not bad: Learn the manual implementation and learn that there is an intrinsic. I also could not think of a good example for a vector reduction to a scalar. min and max are also intrinsic.\nThe example is anyways really basic, I would never make the size of the array an extra argument."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-22 21:48:42+00:00",
                    "text": "Small PR with no objections, merging. Thank you, Martin!"
                }
            ]
        },
        {
            "number": 108,
            "user": "milancurcic",
            "date": "2020-06-19 01:17:32+00:00",
            "title": "Fix indenting and few other minor things in the building programs mini-book",
            "text": "This PR makes a few aesthetic fixes to the building programs mini-book:\n\nRemove date from the top page\nFix code indentation throughout\nOne or two other miscellaneous things",
            "comments": []
        },
        {
            "number": 107,
            "user": "GS76",
            "date": "2020-06-15 20:59:28+00:00",
            "title": "Update hello_world.md",
            "text": "Replacing the original link to the Windows binaries with the following link:\nhttp://www.equation.com/servlet/equation.cmd?fa=fortran",
            "comments": [
                {
                    "user": "GS76",
                    "date": "2020-06-16 09:16:21+00:00",
                    "text": "@LKedward\nI was able to install the gfortran.\nI then checked the version in a different path and it worked.\nI did not need to define the environment variables.\nRegards."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 05:46:11+00:00",
                    "text": "Hi all,\nI am unsure what I should do now as I do not see this change live on fortran-lang.org?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 06:15:00+00:00",
                    "text": "Hi @GS76, we haven't merged this yet hence why it isn't on the site.\nEverything looks good to merge except I notice you haven't committed Milan's suggestion for macOS - if you've done this locally on your computer, don't forget to push again to the same branch. Otherwise you can also commit the change via the web interface."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 06:57:58+00:00",
                    "text": "Hi @GS76, we haven't merged this yet hence why it isn't on the site.\nEverything looks good to merge except I notice you haven't committed Milan's suggestion for macOS - if you've done this locally on your computer, don't forget to push again to the same branch. Otherwise, you can also commit the change via the web interface.\n\nHi @LKedward\nHow are you?\nI do not have access to a macOS machine so I can not test this.\nThank you."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 07:05:01+00:00",
                    "text": "Hi @LKedward\nApologies, did I do the wrong thing by closing this as it is unmerged.\nI am inexperienced with Github.\nHow can I correct this"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 08:03:00+00:00",
                    "text": "Apologies, did I do the wrong thing by closing this as it is unmerged.\n\nNot to worry, PR is reopened now.\n\nI am inexperienced with Github.\n\ngit and github have a bit of a learning curve but I promise it doesn't take long to become familiar with the processes. We really appreciate the effort on your part in learning these tools and contributing to the site \ud83d\udc4d\n\n...\nHow can I correct this\n\nYou won't have permission to merge this pull request yourself - I hope you can understand my reluctance to merge it since, as Milan pointed out, the text currently points macOS users to the site for windows binaries.\n\nI do not have access to a macOS machine so I can not test this.\n\nI agree this is important and, while I also cannot test this, Milan's suggestion for macOS is exactly what is recommended on the gcc binaries page: https://gcc.gnu.org/install/binaries.html.\nFinally, I have confidence in the Homebrew system since it is currently used by the stdlib continuous integration tests (which run after each commit)."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 08:12:59+00:00",
                    "text": "Apologies, did I do the wrong thing by closing this as it is unmerged.\n\nNot to worry, PR is reopened now.\n\nI am inexperienced with Github.\n\ngit and github have a bit of a learning curve but I promise it doesn't take long to become familiar with the processes. We really appreciate the effort on your part in learning these tools and contributing to the site \ud83d\udc4d\n\n...\nHow can I correct this\n\nYou won't have permission to merge this pull request yourself - I hope you can understand my reluctance to merge it since, as Milan pointed out, the text currently points macOS users to the site for windows binaries.\n\nI do not have access to a macOS machine so I can not test this.\n\nI agree this is important and, while I also cannot test this, Milan's suggestion for macOS is exactly what is recommended on the gcc binaries page: https://gcc.gnu.org/install/binaries.html.\nFinally, I have confidence in the Homebrew system since it is currently used by the stdlib continuous integration tests (which run after each commit).\n\n@LKedward\nI am in complete agreement.\nWe should do it once correctly.\nThat macOS project looks like the right way to go. Now to just find an Apple user to help us test."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 09:02:30+00:00",
                    "text": "Thanks @GS76.\nTo be clear, I think this PR can be merged with Milan's suggestion included, since the site already recommends these macOS solutions indirectly by referencing the link to gcc binaries page.\nHowever if you would prefer to hold off until they have been tested by the community, then I have no objection to that.\nWhat do you think @milancurcic?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-17 13:10:19+00:00",
                    "text": "Sorry @GS76 and @LKedward for not responding sooner to this.\n@zbeekman and @scivision can either of you confirm that the following instruction is accurate:\n\nOn macOS, you can install gfortran using Homebrew or MacPorts."
                },
                {
                    "user": "scivision",
                    "date": "2020-06-17 13:15:44+00:00",
                    "text": "Yes I tell everyone to use Homebrew for Mac OS. I think we should note that the user \"brew install gcc\" with homebrew"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 13:25:12+00:00",
                    "text": "Thank you @milancurcic, @LKedward and @scivision.\nLet me know how I can help to close this out.\nI will then continue testing the tutorials on the site."
                },
                {
                    "user": "scivision",
                    "date": "2020-06-17 14:00:02+00:00",
                    "text": "The issue is that if users do brew install gfortran they're getting not the latest binaries. The main package is brew install gcc"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-17 14:07:38+00:00",
                    "text": "Thank you @scivision. We should definitely add the specific Homebrew instructions, though this belongs to a dedicated section on how to install gfortran, with subsections for Homebrew, Ubuntu, Fedora, Windows, etc. Let's tackle these in a separate PR.\nThank you @GS76, I will merge now."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 14:36:40+00:00",
                    "text": "Hi all,\nIs this complete? What is remaining now? Sorry, new to Github?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-17 14:43:18+00:00",
                    "text": "Yes, it's merged (which automatically closes the PR) and your changes are live on the website. \ud83c\udf89"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 14:43:24+00:00",
                    "text": "Hi @GS76, yes this has been merged and published successfully! Many thanks \ud83d\udc4d\n(Note that the site can take some time to update - see the CONTRIBUTOR guide for how to force a  refresh)"
                }
            ]
        },
        {
            "number": 106,
            "user": "GS76",
            "date": "2020-06-15 20:02:21+00:00",
            "title": "Quickstart tutorial: Replacing the link for Windows version of gfortran",
            "text": "The \"Quickstart Fortran tutorial\" works well.\nHowever, the link to the Windows install for gfortran should be updated to the following link:\nhttp://www.equation.com/servlet/equation.cmd?fa=fortran\nThere is a 32-bit and 64-bit versions of the latest as well as weekly versions of the GNU gcc builds, including OpenMP and other libraries.\nIt has been tested and works.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-06-15 20:13:00+00:00",
                    "text": "@GS76 thanks for opening an issue for this. Would you mind submitting a pull request (PR) for this?"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-15 20:50:07+00:00",
                    "text": "@certik, no problem. I will do so."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-18 12:56:31+00:00",
                    "text": "Closing, fixed by #107. Thanks again @GS76"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-18 14:03:16+00:00",
                    "text": "My pleasure. Thank you for everyone's assistance."
                }
            ]
        },
        {
            "number": 105,
            "user": "certik",
            "date": "2020-06-08 18:06:53+00:00",
            "title": "Contributor graph does not work on mobile",
            "text": "The contributor graph at https://fortran-lang.org/community/ does not work on my iPhone:\n\nI have iPhone 10 and Firefox. I also tried Safari, the same result.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-08 18:10:59+00:00",
                    "text": "FWIW, it works on Android 9 and Chrome."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 18:12:28+00:00",
                    "text": "Thanks for the report @certik - I will look into this.\n(I only tested with Android + Chrome on mobile)"
                },
                {
                    "user": "certik",
                    "date": "2020-06-08 18:13:10+00:00",
                    "text": "@LKedward thanks. Let me know if you want me to test something, I am happy to do that."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-10 08:22:58+00:00",
                    "text": "I've been able to reproduce in the Midori web browser (on Ubuntu) which I think uses the same Webkit engine as Safari.\nThe problem appears to be with parsing the date string from the JSON files with the Javascript Date object where some browsers implement more supported date formats in addition to the standard format.\n@certik can you test a simple fix that I'm trialling here: https://lkedward.github.io/fortran-lang.github.io/community/. Can you check both Safari and Firefox on your iPhone?\nThere may still be a few formatting issues but if it works I will open a PR.\nThanks \ud83d\udc4d"
                }
            ]
        },
        {
            "number": 104,
            "user": "LKedward",
            "date": "2020-06-08 15:44:21+00:00",
            "title": "Update contributor guide",
            "text": "Add introduction to CONTRIBUTING.md about how the site works\nMinor updates to workflow and style guide\nUpdate README with links to contributor documentation\nReplace deprecated bundle syntax in README",
            "comments": [
                {
                    "user": "smeskos",
                    "date": "2020-06-08 17:46:39+00:00",
                    "text": "Hi @LKedward, great work. As a beginner, myself, that went through this process only a couple of days ago, there is still one thing that I haven't figured out, and it's not clear (to me) in your updated guide. The build preview process. Does a preview need to be built only once, and all subsequent commits/pushes are updated automatically in the preview, or a new preview needs to be built after each new push?\nAlso, great that you noted the issue with the cashed preview not updating and providing a solution! Small details like that make difference... e.g. I wouldn't have spammed so many build-previews in my PR :)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 18:03:55+00:00",
                    "text": "Thanks for the feedback @smeskos!\n\nDoes a preview need to be built only once, and all subsequent commits/pushes are updated automatically in the preview, or a new preview needs to be built after each new push?\n\nGood question. No, the preview builds must be triggered manually with '{hash}build_preview' whenever you push updated commits. This may be updated in the future to provide a more automated workflow - I just need to learn how GitHub permissions work first.\nI will update the workflow text with this explanation."
                }
            ]
        },
        {
            "number": 103,
            "user": "LKedward",
            "date": "2020-06-08 15:40:12+00:00",
            "title": "Add: .gitignore to repo.",
            "text": "Fixes #97",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-08 18:12:25+00:00",
                    "text": "Thank you, this solves for most of our needs. This PR is straightforward and doesn't affect the website so I'll go ahead and merge it."
                }
            ]
        },
        {
            "number": 102,
            "user": "LKedward",
            "date": "2020-06-08 07:41:23+00:00",
            "title": "External dependencies",
            "text": "PR #100 adds a Javascript library and JSON data files - as discussed in this PR, these are best left out of the main repository. In the case of the JSON files, this is because of their file size.\nTwo solutions I can think of:\n\n\nAdd a shell script for cloning and updating dependencies from their respective repositories -\nscript is run in CI and by contributors at checkout;\n\n\nUse git submodules.\n\n\nMy preference is for submodules:\n\nSubmodules are designed specifically for this purpose\nI don't like the idea of maintaining a shell script\nChecking-out submodules is a simpler workflow than requiring contributors to run a shell script\n\nMy impression is that the issues people face with submodules are usually when pushing commits to repositories from submodules - we won't be doing that.",
            "comments": []
        },
        {
            "number": 101,
            "user": "jvdp1",
            "date": "2020-06-07 10:50:20+00:00",
            "title": "Code style for Fortran examples in the tutorials?",
            "text": "In both #99 and #96 the code style is mentioned. Should we use the same code style as for stdlib?",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-07 11:01:37+00:00",
                    "text": "It makes sense to adopt the same code style guidelines for all Fortran-lang projects.\nUnfortunately I have a strong gripe with the stdlib code style which is the 4-space indentation.\nI realise the time has passed for me to voice my opinion on this, however my reasoning is that limiting line lengths to 80 characters is really useful for readability and side-by-side editing, but 4-space indentation massively reduces the amount of usable line length and leads to many line-continuations which greatly reduce readability. 2-spaces are perfectly sufficient for indentation and don't eat-up your usable characters."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 11:24:56+00:00",
                    "text": "Laurence, I also oppose the 4-spaces indent. I can't find the original poll now, but I vaguely recall that it was about 50-50 between 2 and 4 spaces, perhaps slightly in favor of 2. It may be time for another vote.\nBut we need a dedicated style guide for the tutorials (you'll see that many items in the stdlib guide don't apply here), and be consistent with it."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-06-07 12:02:26+00:00",
                    "text": "Here are the issues related to this topic in stdlib: [#57](https://github.com/fortran-lang/stdlib/pull/57] and #3\nIt is indeed maybe worthwhile to re-open it."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-07 12:35:48+00:00",
                    "text": "Thanks for the links @jvdp1 - I would support re-opening the discussion on spaces, but that is for another thread.\nPS. I also notice that the line limit problem is made worse in stdlib by needing to also indent preprocessor blocks."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 21:54:25+00:00",
                    "text": "I have a suggestion on how we should work through defining a style guide. Lot's of people are going to have very strong opinions on the subject, and on each aspect of code style. We should have some example code (several probably), format it according to various styles, and have a community wide poll on what people find most readable. Hopefully this can minimize the arguing."
                },
                {
                    "user": "certik",
                    "date": "2020-06-08 02:45:50+00:00",
                    "text": "We went with 4 spaces with the idea that we can re-evaluate in few months.\nLet's do what @everythingfunctional suggested. So let's take representative codes, indent them with the various way, and let the community vote.\nIf there is a clear winner, let's go with that. If there is not a clear winner, then we'll have to decide what to do. We spent a lot of time on this before, so I would prefer, if possible, that we don't waste weeks of time on this again. I understand if the current setup is irritating, that people are unhappy. If we switch, it will be irritating to some others. I personally definitely prefer 4 spaces, just like in Python and C++ (however I do not indent inside modules and subroutines, to save horizontal space), but I will go with whatever the community prefers based on the votes, and if it's 2 spaces, we can do that."
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-20 17:00:24+00:00",
                    "text": "I suggest that we move forward with a poll to decide whether people want a code style or not. If yes, we should proceed asap with a survey on the details. I mentioned this issue yesterday at the monthly call, and I insist again, here, because now is the time to decide while the project is still young with only a few lines of code uploaded, and while the main contributors are all active and can quickly refactor their codes. If it takes 6 months or more, it might be too late. Also, to prevent long debates and misunderstandings, we should definitely emphasize that whatever coding style is chosen, it will merely be for the sake of consistency of the tutorials and by no means something official."
                },
                {
                    "user": "certik",
                    "date": "2020-06-20 20:25:18+00:00",
                    "text": "I agree, let's start a poll if we want a coding style to be used in tutorials.\n\nI vote yes.\n\u2026\nOn Sat, Jun 20, 2020, at 11:00 AM, smeskos wrote:\n\n\n I suggest that we move forward with a poll to decide whether people\n want a code style or not. If yes, we should proceed asap with a survey\n on the details. I mentioned this issue yesterday at the monthly call,\n and I insist again, here, because now is the time to decide while the\n project is still young with only a few lines of code uploaded, and\n while the main contributors are all active and can quickly refactor\n their codes. If it takes 6 months or more, it might be too late. Also,\n to prevent long debates and misunderstandings, we should definitely\n emphasize that whatever coding style is chosen, it will merely be for\n the sake of consistency of the tutorials and by no means something\n official.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#101 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWF6K4NPM6IMNDTAE3DRXTTLHANCNFSM4NXCUEKA>."
                },
                {
                    "user": "certik",
                    "date": "2020-06-20 20:30:10+00:00",
                    "text": "To clarify the question I am voting yes is:\n\nDo I prefer to have a coding style agreed upon by the community even if it might contain some things that I personally do not like?\n\u2026\nOn Sat, Jun 20, 2020, at 2:24 PM, Ond\u0159ej \u010cert\u00edk wrote:\n I agree, let's start a poll if we want a coding style to be used in tutorials.\n\n I vote yes.\n\n On Sat, Jun 20, 2020, at 11:00 AM, smeskos wrote:\n >\n >\n > I suggest that we move forward with a poll to decide whether people\n > want a code style or not. If yes, we should proceed asap with a survey\n > on the details. I mentioned this issue yesterday at the monthly call,\n > and I insist again, here, because now is the time to decide while the\n > project is still young with only a few lines of code uploaded, and\n > while the main contributors are all active and can quickly refactor\n > their codes. If it takes 6 months or more, it might be too late. Also,\n > to prevent long debates and misunderstandings, we should definitely\n > emphasize that whatever coding style is chosen, it will merely be for\n > the sake of consistency of the tutorials and by no means something\n > official.\n >\n > \u2014\n > You are receiving this because you commented.\n > Reply to this email directly, view it on GitHub\n > <#101 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWF6K4NPM6IMNDTAE3DRXTTLHANCNFSM4NXCUEKA>.\n >"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-21 15:41:31+00:00",
                    "text": "I think the response will be unanimous, but we need to document it. To do that, I created a poll here:\nhttps://fortran-lang.discourse.group/t/style-guide-for-fortran-lang-org-do-we-want-a-style-guide/134\nPlease cast your vote there. Don't vote in GitHub issues, it doesn't scale well for voting."
                },
                {
                    "user": "nncarlson",
                    "date": "2020-06-21 22:49:24+00:00",
                    "text": "No, I don't think it will be unanimous.  What is the proposed scope of the coding style? There's a whole spectrum of things that could potentially be specified, to the point of being overbearing. Some amount of consistency across the tutorials is clearly good, but if it's too overbearing you may find that you've selected away potential contributors. I know I've seen some coding styles that I find horrendous and could not bring myself to follow."
                },
                {
                    "user": "certik",
                    "date": "2020-06-21 23:17:57+00:00",
                    "text": "I agree. The question is unfortunately formulated. I think it should ask: should we try to agree on code formatting conventions for tutorials?\n\nSo voting yes can still mean voting no later if the convention that most voted for is unacceptable to you. And if we can't reach a consensus I don't think we should be forcing it on everybody.\n\nThe question is, should we even try to find a consensus?\n\u2026\nOn Sun, Jun 21, 2020, at 4:49 PM, Neil Carlson wrote:\n\n\n No, I don't think it will be unanimous. What is the proposed scope of\n the coding style? There's a whole spectrum of things that could\n potentially be specified, to the point of being overbearing. Some\n amount of consistency across the tutorials is clearly good, but if it's\n too overbearing you may find that you've selected away potential\n contributors. I know I've seen some coding styles that I find\n horrendous and could not bring myself to follow.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#101 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAFXR6ISATHM2UTXK3RX2FABANCNFSM4NXCUEKA>."
                }
            ]
        },
        {
            "number": 100,
            "user": "LKedward",
            "date": "2020-06-06 10:31:06+00:00",
            "title": "Add community section",
            "text": "This PR creates a new top-level page called 'Community' for the Fortran-lang projects in order to:\n\nProvide instructions & links for (new) contributors\nLink to project documentation\nList and acknowledge contributors\n\nThe PR includes json data files from https://gitlab.com/fortran-lang/github_stats_data which is used to generate the contributor lists and plots. On the new community page you can use the slider beneath the aggregate plot to filter contributions by a specific date range.\nThe contributions list can also be incorporated into newsletters with a fixed date range, which I have done for the June newsletter as an example.\nWork for future PRs will be:\n\nincluding commit data into contributions;\nusing github actions to update json data periodically.\n\nAs always, I value feedback on this - my focus has been on the structure and implementation, so any suggestions for the text content are especially welcome.\n(Apologies for the size of this PR, it grew to more than I was initially planning to organise and cleanup the javascript files.)",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-06 10:31:17+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-06 10:32:17+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/100/"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-06-06 10:49:35+00:00",
                    "text": "Great new page!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-06 19:45:39+00:00",
                    "text": "This is excellent, thank you Laurence. Very nice contribution graphs. Are contributions == commits + comments?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 20:11:03+00:00",
                    "text": "This is excellent, thank you Laurence. Very nice contribution graphs. Are contributions == commits + comments?\n\nThanks!\nNo, I should have said: currently it's just comments because that's what's in the json files currently - when Ond\u0159ej updates his stats scripts, it will include commits as well.\n@certik"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 03:30:01+00:00",
                    "text": "This is really cool. I think it helps to gameify things enough to keep us all coming back and contributing. And the more we keep contributing the better it will get and the more it will grow and then turn into a virtuous cycle. Great addition."
                },
                {
                    "user": "certik",
                    "date": "2020-06-07 04:34:22+00:00",
                    "text": "@everythingfunctional you got the idea. We want people to feel proud and excited to be visible there."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-07 10:20:41+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 10:21:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/100/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-07 10:30:58+00:00",
                    "text": "Thanks for the feedback!\nRegarding the javascript library and JSON data files, I agree that these should ideally be left out of this repository - CI downloading is an option, but we also don't want the CI environment to be able to diverge from the local clones, i.e. we need a solution that brings dependencies into the local repos as well.\nMy preferred solution to this would be to use git submodules, however I'm aware that some people do not like submodules. I personally have never had any problems with submodules and the advantage here is that it minimally affects contributor workflow while also allowing dependencies in separate repos.\nDoes anyone have a strong preference not to use git submodules?"
                },
                {
                    "user": "certik",
                    "date": "2020-06-07 16:35:13+00:00",
                    "text": "I think this can be merged as far as I am concerned.\nI personally am not a big fan of submodules, it's an extra struggle. But I am also not against it, and I think it technically does what we need: keeping the big files out of the repository. And since you are @LKedward the main contributor to this website (as apparent from the statistics in this PR:), and you like submodules, then let's use them.\nIf too many people struggle with them, we can always move to another solution later.\nThanks again for this PR."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 22:00:38+00:00",
                    "text": "I have good success using submodules as a dependency management strategy. I would vote for using them. As @certik said, we can move to something else later if need be."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 07:24:26+00:00",
                    "text": "Okay I will merge and open a new issue for the external dependencies."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 07:27:16+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-08 07:27:37+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 99,
            "user": "arjenmarkus",
            "date": "2020-06-05 19:23:56+00:00",
            "title": "Update of the minibook on building programs:",
            "text": "Text split into separate \"chapters\"/\"sections\"\nApplying consistent mark-up for code sections and keywords and such\nApplying most suggestions from the reviews (I have kept the \"tabulate.f90\"\nmostly as it was, but I have changed the name of the module to make it\na bit clearer.\nSmall textual changes in places",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 19:36:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-05 19:37:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/99/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 19:46:05+00:00",
                    "text": "@arjenmarkus does this PR supersede the previous one (#90)?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 19:57:04+00:00",
                    "text": "@LKedward do you know why this preview didn't build? The preview site doesn't load for me."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 20:17:17+00:00",
                    "text": "@LKedward do you know why this preview didn't build? The preview site doesn't load for me.\n\nIt's working for me - can you try on another device, maybe with mobile internet?\nI've had this issue before; I think there may be some kind of caching issue with github pages where if you visit the new address too soon, it caches the 404 and keeps serving you with it."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 20:18:52+00:00",
                    "text": "@milancurcic - also give https://fortran-lang.org/pr/99/index.html a try."
                },
                {
                    "user": "certik",
                    "date": "2020-06-05 20:21:45+00:00",
                    "text": "I think this looks great, thank you.\nOnce fpm is more usable, we can update the tutorial to show how to do this using fpm."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-05 20:32:00+00:00",
                    "text": "Hi Milan,\n\nyes, this is the result of the suggestions made earlier by J\u00e9r\u00e9mie and\nothers, and of splitting up the text based on the recipe by Laurence.\n\nRegards,\n\nArjen\n\nOp vr 5 jun. 2020 om 21:46 schreef Milan Curcic <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> does this PR supersede the\n previous one (#90\n <#90>)?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRYX6AKRXFY6MBYLTJDRVFDSFANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-06 20:09:15+00:00",
                    "text": "@arjenmarkus As you review the suggestions, click on \"Commit suggestion\" to automatically incorporate it in this PR, or just \"Resolve conversation\" to dismiss it."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-08 06:43:13+00:00",
                    "text": "Hi everyone,\n\nThanks for the suggestions and the approval. I hope to find time in the\nnext few days (let's be careful with promises) to incorporate these\nsuggestions. (I confess being a trifle lazy when it comes to hunting down\nthe relevant URLs :)).\n\nRegards,\nArjen\n\n\nOp zo 7 jun. 2020 om 13:04 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n *@LKedward* approved this pull request.\n\n Thanks Arjen for your work on this - it's looking really good \ud83d\udc4d\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6AIQVUPIOUL34AS2TRVNX2XANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-08 06:45:57+00:00",
                    "text": "Hi Milan,\n\nwrt the indentation, hm, no, not really - at least I guess they are\nsuperfluous now that the blocks are marked with the programming language. I\ndid not realise the indentation could be removed. That could certainly be a\ncosmetic update.\n\nRegards,\n\nArjen\n\nOp za 6 jun. 2020 om 22:08 schreef Milan Curcic <notifications@github.com>:\n\u2026\n ***@***.**** approved this pull request.\n\n @arjenmarkus <https://github.com/arjenmarkus> Thanks a lot. I love your\n writing style. I left several minor suggestions.\n\n I noticed that many code listings/snippets are entirely indented by 4 or 8\n spaces. Are these indentations necessary?\n ------------------------------\n\n In learn/building_programs/build_tools.md\n <#99 (comment)>\n :\n\n > +* The `make` utility is a classical tool that uses instructions about\n\n +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called `Makefile` that contains the dependencies.\n\n +\n\n +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n\n \u2b07\ufe0f Suggested change\n\n -popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +popular cross-platform  tool is Microsoft's [Visual Studio Code](https://code.visualstudio.com/), but others exist,\n\n\n ------------------------------\n\n In learn/building_programs/build_tools.md\n <#99 (comment)>\n :\n\n > +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called `Makefile` that contains the dependencies.\n\n +\n\n +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n\n \u2b07\ufe0f Suggested change\n\n -such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +such as [Atom](https://atom.io/), [Eclipse Photran](https://www.eclipse.org/photran/), and [Code::Blocks](http://www.codeblocks.org/). They offer a graphical\n\n\n ------------------------------\n\n In learn/building_programs/build_tools.md\n <#99 (comment)>\n :\n\n > +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +user-interface, but are often very specific for the compiler and\n\n +platform.\n\n +\n\n +* Maintenance tools like autotools and CMake can generate makefiles or\n\n\n \u2b07\ufe0f Suggested change\n\n -* Maintenance tools like autotools and CMake can generate makefiles or\n\n +* Maintenance tools like autotools and CMake can generate Makefiles or\n\n\n ------------------------------\n\n In learn/building_programs/distributing.md\n <#99 (comment)>\n :\n\n > @@ -0,0 +1,136 @@\n\n +---\n\n +layout: book\n\n +title: Distributing your programs\n\n +permalink: /learn/building_programs/distributing\n\n +---\n\n +\n\n +When you distributed your programs, there are a number of options you can\n\n\n \u2b07\ufe0f Suggested change\n\n -When you distributed your programs, there are a number of options you can\n\n +When you distribute your programs, there are a number of options you can\n\n\n ------------------------------\n\n In learn/building_programs/distributing.md\n <#99 (comment)>\n :\n\n > @@ -0,0 +1,136 @@\n\n +---\n\n +layout: book\n\n +title: Distributing your programs\n\n +permalink: /learn/building_programs/distributing\n\n +---\n\n +\n\n +When you distributed your programs, there are a number of options you can\n\n +choose from:\n\n +\n\n +1. Distribute the entire source code\n\n +2. Distribute a pre-built executable program\n\n +3. Distribute static or dynamic libraries that people can use\n\n +\n\n +ad 1.\n\n\n What does ad. 1 (and so on) mean? Perhaps better to explicitly type out\n each item for each explanation\n ------------------------------\n\n In learn/building_programs/linking_pieces.md\n <#99 (comment)>\n :\n\n > +the function in the right way. It might be that you made a mistake and\n\n +called the function with two arguments instead of one. If the compiler\n\n +does not know anything about the function's interface, then it cannot\n\n +check anything.\n\n +\n\n +The second step invokes the compiler in such a way that:\n\n +\n\n +* it compiles the file \"tabulate.f90\" (using the module file);\n\n +* it invokes the linker to combine the object files tabulate.o and function.o into an\n\n +executable program - with the default name \"a.out\" or \"a.exe\" (if you\n\n +want a different name, use the option \"-o\").\n\n +\n\n +What you do not see in general is that the linker also adds a number of\n\n +extra files in this link step, the run-time libraries. These run-time\n\n +libraries contain all the \"standard\" stuff - low-level routines that do\n\n +the input and output to screen, the `sine` function and much more.\n\n\n \u2b07\ufe0f Suggested change\n\n -the input and output to screen, the `sine` function and much more.\n\n +the input and output to screen, the `sin` function and much more.\n\n\n ------------------------------\n\n In learn/building_programs/managing_libraries.md\n <#99 (comment)>\n :\n\n > +libraries remain outside the executable program and as a consequence\n\n +can be replaced without rebulding the entire program. Compilers and\n\n +indeed the operating system itself rely heavily on such dynamic\n\n +libraries. You could consider dynamic libraries as a sort of executable\n\n +programs that need a bit of help to be run.\n\n +\n\n +Building dynamic libraries works slightly differently from building\n\n +static libraries: you use the compiler/linker instead of a tool\n\n +like `ar` or `lib`.\n\n +\n\n +On Linux:\n\n +\n\n +```shell\n\n +    $ gfortran -fpic -c file1.f90 file2.f90\n\n +    $ gfortran -fpic -c file3.f90 ...\n\n +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n\n \u2b07\ufe0f Suggested change\n\n -    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n +   $ gfortran -shared -o supportlib.so file1.o file2.o file3.o ...\n\n\n ------------------------------\n\n In learn/building_programs/managing_libraries.md\n <#99 (comment)>\n :\n\n > +\n\n +```shell\n\n +    $ gfortran -o tabulate tabulate.f90 function.dll\n\n +```\n\n +\n\n +The DLL and the .mod file are used to build the executable program\n\n +with checks on the function's interface, the right name and the reference\n\n +to \"a\" DLL, called \"function.dll\".\n\n +\n\n +You can replace the shared library \"function.dll\" by another one, implementing\n\n +a different function \"f\". Of course, you need to be careful to use the correct\n\n +interface for this function. The compiler/linker are not invoked anymore, so they\n\n +can do no checking.\n\n +\n\n +## Windows and Intel Fortran\n\n +The setup is the same as with GNU/Linux, but on Windows it is necessary\n\n\n \u2b07\ufe0f Suggested change\n\n -The setup is the same as with GNU/Linux, but on Windows it is necessary\n\n +The setup is the same as with Linux, but on Windows it is necessary\n\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRYLJAJZQDC6GSNHXVLRVKO2NANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-16 17:08:08+00:00",
                    "text": "How to resolve this conflict?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-16 17:09:52+00:00",
                    "text": "Hi everyone,\n\njust did my best to get the remaining suggestions in. I do not know exactly\nwhat to do with the conflict in learn.yml, so I would like your advice on\nthis.\n\nRegards,\n\nArjen\n\nOp ma 8 jun. 2020 om 08:45 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi Milan,\n\n wrt the indentation, hm, no, not really - at least I guess they are\n superfluous now that the blocks are marked with the programming language. I\n did not realise the indentation could be removed. That could certainly be a\n cosmetic update.\n\n Regards,\n\n Arjen\n\n Op za 6 jun. 2020 om 22:08 schreef Milan Curcic ***@***.***\n >:\n\n> ***@***.**** approved this pull request.\n>\n> @arjenmarkus <https://github.com/arjenmarkus> Thanks a lot. I love your\n> writing style. I left several minor suggestions.\n>\n> I noticed that many code listings/snippets are entirely indented by 4 or\n> 8 spaces. Are these indentations necessary?\n> ------------------------------\n>\n> In learn/building_programs/build_tools.md\n> <#99 (comment)>\n> :\n>\n> > +* The `make` utility is a classical tool that uses instructions about\n>\n> +how the various components of a program depend on each other to\n>\n> +efficiently compile and link the program (or programs). It takes a\n>\n> +so-called `Makefile` that contains the dependencies.\n>\n> +\n>\n> +    Simply put:\n>\n> +\n>\n> +    If a program file is older than any of the libraries and object files\n>\n> +it depends on, the make utility knows it has to rebuild it and goes on\n>\n> +to look at the libraries and object files - are any out of date?\n>\n> +\n>\n> +    If an object file is older than the corresponding source file, the\n>\n> +make utility knows it has to compile the source file.\n>\n> +\n>\n> +* Integrated development tools take care of many of the above details. A\n>\n> +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n> +popular cross-platform  tool is Microsoft's [Visual Studio Code](https://code.visualstudio.com/), but others exist,\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/build_tools.md\n> <#99 (comment)>\n> :\n>\n> > +how the various components of a program depend on each other to\n>\n> +efficiently compile and link the program (or programs). It takes a\n>\n> +so-called `Makefile` that contains the dependencies.\n>\n> +\n>\n> +    Simply put:\n>\n> +\n>\n> +    If a program file is older than any of the libraries and object files\n>\n> +it depends on, the make utility knows it has to rebuild it and goes on\n>\n> +to look at the libraries and object files - are any out of date?\n>\n> +\n>\n> +    If an object file is older than the corresponding source file, the\n>\n> +make utility knows it has to compile the source file.\n>\n> +\n>\n> +* Integrated development tools take care of many of the above details. A\n>\n> +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n> +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n>\n> +such as [Atom](https://atom.io/), [Eclipse Photran](https://www.eclipse.org/photran/), and [Code::Blocks](http://www.codeblocks.org/). They offer a graphical\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/build_tools.md\n> <#99 (comment)>\n> :\n>\n> > +    Simply put:\n>\n> +\n>\n> +    If a program file is older than any of the libraries and object files\n>\n> +it depends on, the make utility knows it has to rebuild it and goes on\n>\n> +to look at the libraries and object files - are any out of date?\n>\n> +\n>\n> +    If an object file is older than the corresponding source file, the\n>\n> +make utility knows it has to compile the source file.\n>\n> +\n>\n> +* Integrated development tools take care of many of the above details. A\n>\n> +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n> +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n>\n> +user-interface, but are often very specific for the compiler and\n>\n> +platform.\n>\n> +\n>\n> +* Maintenance tools like autotools and CMake can generate makefiles or\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -* Maintenance tools like autotools and CMake can generate makefiles or\n>\n> +* Maintenance tools like autotools and CMake can generate Makefiles or\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/distributing.md\n> <#99 (comment)>\n> :\n>\n> > @@ -0,0 +1,136 @@\n>\n> +---\n>\n> +layout: book\n>\n> +title: Distributing your programs\n>\n> +permalink: /learn/building_programs/distributing\n>\n> +---\n>\n> +\n>\n> +When you distributed your programs, there are a number of options you can\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -When you distributed your programs, there are a number of options you can\n>\n> +When you distribute your programs, there are a number of options you can\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/distributing.md\n> <#99 (comment)>\n> :\n>\n> > @@ -0,0 +1,136 @@\n>\n> +---\n>\n> +layout: book\n>\n> +title: Distributing your programs\n>\n> +permalink: /learn/building_programs/distributing\n>\n> +---\n>\n> +\n>\n> +When you distributed your programs, there are a number of options you can\n>\n> +choose from:\n>\n> +\n>\n> +1. Distribute the entire source code\n>\n> +2. Distribute a pre-built executable program\n>\n> +3. Distribute static or dynamic libraries that people can use\n>\n> +\n>\n> +ad 1.\n>\n>\n> What does ad. 1 (and so on) mean? Perhaps better to explicitly type out\n> each item for each explanation\n> ------------------------------\n>\n> In learn/building_programs/linking_pieces.md\n> <#99 (comment)>\n> :\n>\n> > +the function in the right way. It might be that you made a mistake and\n>\n> +called the function with two arguments instead of one. If the compiler\n>\n> +does not know anything about the function's interface, then it cannot\n>\n> +check anything.\n>\n> +\n>\n> +The second step invokes the compiler in such a way that:\n>\n> +\n>\n> +* it compiles the file \"tabulate.f90\" (using the module file);\n>\n> +* it invokes the linker to combine the object files tabulate.o and function.o into an\n>\n> +executable program - with the default name \"a.out\" or \"a.exe\" (if you\n>\n> +want a different name, use the option \"-o\").\n>\n> +\n>\n> +What you do not see in general is that the linker also adds a number of\n>\n> +extra files in this link step, the run-time libraries. These run-time\n>\n> +libraries contain all the \"standard\" stuff - low-level routines that do\n>\n> +the input and output to screen, the `sine` function and much more.\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -the input and output to screen, the `sine` function and much more.\n>\n> +the input and output to screen, the `sin` function and much more.\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/managing_libraries.md\n> <#99 (comment)>\n> :\n>\n> > +libraries remain outside the executable program and as a consequence\n>\n> +can be replaced without rebulding the entire program. Compilers and\n>\n> +indeed the operating system itself rely heavily on such dynamic\n>\n> +libraries. You could consider dynamic libraries as a sort of executable\n>\n> +programs that need a bit of help to be run.\n>\n> +\n>\n> +Building dynamic libraries works slightly differently from building\n>\n> +static libraries: you use the compiler/linker instead of a tool\n>\n> +like `ar` or `lib`.\n>\n> +\n>\n> +On Linux:\n>\n> +\n>\n> +```shell\n>\n> +    $ gfortran -fpic -c file1.f90 file2.f90\n>\n> +    $ gfortran -fpic -c file3.f90 ...\n>\n> +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n>\n> +   $ gfortran -shared -o supportlib.so file1.o file2.o file3.o ...\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/managing_libraries.md\n> <#99 (comment)>\n> :\n>\n> > +\n>\n> +```shell\n>\n> +    $ gfortran -o tabulate tabulate.f90 function.dll\n>\n> +```\n>\n> +\n>\n> +The DLL and the .mod file are used to build the executable program\n>\n> +with checks on the function's interface, the right name and the reference\n>\n> +to \"a\" DLL, called \"function.dll\".\n>\n> +\n>\n> +You can replace the shared library \"function.dll\" by another one, implementing\n>\n> +a different function \"f\". Of course, you need to be careful to use the correct\n>\n> +interface for this function. The compiler/linker are not invoked anymore, so they\n>\n> +can do no checking.\n>\n> +\n>\n> +## Windows and Intel Fortran\n>\n> +The setup is the same as with GNU/Linux, but on Windows it is necessary\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -The setup is the same as with GNU/Linux, but on Windows it is necessary\n>\n> +The setup is the same as with Linux, but on Windows it is necessary\n>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#99 (review)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YRYLJAJZQDC6GSNHXVLRVKO2NANCNFSM4NU76QZQ>\n> .\n>"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 08:13:17+00:00",
                    "text": "Hi @arjenmarkus, many thanks.\nI've resolved the conflict on github - you will need to run git pull on your local copy if you intend to do any more edits in your local copy.\nI will update the #build_preview with the latest changes for a final check."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-17 08:14:29+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/99/"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-17 11:02:24+00:00",
                    "text": "Hi @LKedward, thanks - got the copy now. (I am still learning the workflow\n:))\n\nRegards,\n\nArjen\n\nOp wo 17 jun. 2020 om 10:13 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Hi @arjenmarkus <https://github.com/arjenmarkus>, many thanks.\n I've resolved the conflict on github - you will need to run git pull on\n your local copy if you intend to do any more edits in your local copy.\n I will update the #build_preview with the latest changes for a final check.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4TEBNL4IAIFOCOLLDRXB3KXANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-17 11:03:17+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/99/"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 13:37:25+00:00",
                    "text": "Thank you for everything."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-17 14:23:23+00:00",
                    "text": "Hi everyone,\n\njust committed the changes - I should now close the pull request, I guess?\n\nRegards,\n\nArjen\n\nOp wo 17 jun. 2020 om 15:46 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n *@LKedward* commented on this pull request.\n ------------------------------\n\n In learn/building_programs/distributing.md\n <#99 (comment)>\n :\n\n > +        !DEC$ ATTRIBUTES DLLEXPORT :: f\n\n +            real, intent(in) :: x\n\n +\n\n +            ... TO BE FILLED IN ...\n\n +\n\n +        end function f\n\n +        end module user_functions\n\n +```\n\n +\n\n +* Provide a basic build script with a command like:\n\n +\n\n +```shell\n\n +        gfortran -o function.dll function.f90 -shared\n\n +```\n\n +\n\n +        or:\n\n\n Okay, removing the indent fixes it.\n \u2b07\ufe0f Suggested change\n\n -        or:\n\n +or:\n\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZMTE2CNKZKBI4LU33RXDCMHANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 14:27:34+00:00",
                    "text": "Thanks @arjenmarkus - this looks good! Since you're happy with it, I will merge."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 14:29:44+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-17 14:30:12+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-17 14:43:53+00:00",
                    "text": "Nice to see this on the website :).\n\nRegards,\n\nArjen\n\nOp wo 17 jun. 2020 om 16:30 schreef github-actions[bot]\n<notifications@github.com>:\n\u2026\n\n The preview build for this PR has now been deleted.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub, or unsubscribe."
                }
            ]
        },
        {
            "number": 98,
            "user": "smeskos",
            "date": "2020-06-05 19:19:04+00:00",
            "title": "New page in quickstart derived types",
            "text": "I am attempting the same PR, as before, hopefully, this time correctly, without the _site directory.",
            "comments": [
                {
                    "user": "smeskos",
                    "date": "2020-06-05 19:21:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-05 19:22:47+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "certik",
                    "date": "2020-06-05 20:35:33+00:00",
                    "text": "Thanks @smeskos !"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-06 10:19:01+00:00",
                    "text": "@jvdp1, @LKedward thank you both for your suggestions!\n\n@LKedward: Finally, just in case you are not aware: github provides an easy interface on it's website to apply (or reject) any suggested changes with a click of a button - this avoids you having to manually copy them to your local copy and push back again. (But please use the workflow you are most comfortable with).\n\nI am learning git/Github as we speak, this is my first participation in a public repo. Everything is new to me and feel free to give all advice you think may help me. Speaking of which, I simply used the \"commit suggestion\" button to commit the changes you two suggested so far. What I have to do next for these commits to appear in the branch?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 10:24:11+00:00",
                    "text": "I am learning git/Github as we speak, this is my first participation in a public repo. Everything is new to me and feel free to give all advice you think may help me.\n\n\ud83d\udc4d\n\n... Speaking of which, I simply used the \"commit suggestion\" button to commit the changes you two suggested so far. What I have to do next for these commits to appear in the branch?\n\nYes that's the button I was referring to. To see these changes in your local copy I think you just need to pull again, try git pull"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-06 12:53:53+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-06 12:54:48+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-06 12:57:49+00:00",
                    "text": "How to make the new commits to show in the preview?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 13:20:25+00:00",
                    "text": "Hi @smeskos, can you try this link:\nhttps://fortran-lang.org/pr/98/learn/quickstart/derived_types?v=2.\nI can see your updated commits in the preview."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 14:28:21+00:00",
                    "text": "Thanks for your updates @smeskos - this is looking good! \ud83d\udc4d"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 02:44:43+00:00",
                    "text": "I think this looks pretty good. My only comment is with regards to code style. We haven't officially settled on one yet (I don't think), so no need to worry about it as part of this PR. Once we can settle on one we should go through and make sure all the code examples on the site comply with it."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-06-07 10:47:59+00:00",
                    "text": "I think this looks pretty good. My only comment is with regards to code style. We haven't officially settled on one yet (I don't think), so no need to worry about it as part of this PR. Once we can settle on one we should go through and make sure all the code examples on the site comply with it.\n\nHere is the code style for stdlib. Should we use the same one in these tutorials?"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 11:06:00+00:00",
                    "text": "Thank you, Milan for all your suggestions.\nRegarding your second suggestion: Move Derived types in detail to the advanced tutorial.\nDo you mean everything from this header and on? That would leave very little information regarding derived types in this Quickstart tutorial and personally, I am not agreeing to this. My thinking is that this Quickstart tutorial is meant for people who already know how to program, they are most probably experienced programmers in another language and want a quick \"get up to speed\" with modern Fortran.  In that sense everyone, more or less is accustomed with OOP features, and would expect to learn how to implement the basic OOP features in Fortran syntax."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 11:34:17+00:00",
                    "text": "Yes, I meant that whole section. But we can keep it for now because we don't have an advanced tutorial yet. When we do, I will propose to move it and we'll put it to a vote. You can't assume the level of reader here. Being experienced with OOP is quite advanced.\nBut it's not even the OOP, but more that it lists a set of rules and syntaxes in standardese-like format, without concrete examples. It reads more like reference than learning material."
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 15:46:04+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 15:46:55+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 15:59:05+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 16:00:00+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 16:15:08+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 16:16:05+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 16:33:20+00:00",
                    "text": "With 5 approvals, I will now merge this into master. Great work, @smeskos !"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 16:34:28+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 16:34:45+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 97,
            "user": "LKedward",
            "date": "2020-06-05 17:57:22+00:00",
            "title": "Add .gitignore to repo",
            "text": "To avoid problems like in #96.\nMine currently has:\n.bundle*\n_site*",
            "comments": []
        },
        {
            "number": 96,
            "user": "smeskos",
            "date": "2020-06-05 17:23:11+00:00",
            "title": "New page in quickstart derived types",
            "text": "A new introductory tutorial about derived types placed as the last page in the Quickstart tutorial.",
            "comments": [
                {
                    "user": "smeskos",
                    "date": "2020-06-05 17:31:54+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-05 17:32:46+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/96/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 17:39:22+00:00",
                    "text": "Hi @smeskos, this is great! Many thanks for adding this. I will go over and review in detail soon \ud83d\udc4d\nQuick observation: one of your commits seems to modify a lot of files, and I can't work out why?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 17:44:17+00:00",
                    "text": "Thanks a lot, Stavros! This is a great addition.\nHowever, I'm sorry if this wasn't clear (we need to improve the contributing guide): _site/* directory and any files built by Jekyll shouldn't be committed to the repo. They are built and deployed automatically by GitHub.\nI think the easiest way to fix this is to close this PR and open a new one which would include only your additions to the Markdown file where the tutorial is, and the associated metadata (.yml)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 17:53:05+00:00",
                    "text": "Ah I see what's happended.\n_site/ files are added in 82487ce.\nSo git revert 82487ce should fix this branch."
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-05 18:47:42+00:00",
                    "text": "I will try to fix this."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:59:38+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 09:00:01+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 95,
            "user": "milancurcic",
            "date": "2020-06-01 23:03:05+00:00",
            "title": "add Contributors section to TOC",
            "text": "We forgot to add Contributors to the TOC.",
            "comments": []
        },
        {
            "number": 94,
            "user": "LKedward",
            "date": "2020-06-01 09:43:16+00:00",
            "title": "Fix: page-nav script to work on any page.",
            "text": "This allows page contents to be easily added\nto any page by simply adding <ul id=\"page-nav\"></ul>.\nThis will be populated by all the <h2> headings on the current page.",
            "comments": []
        },
        {
            "number": 93,
            "user": "LKedward",
            "date": "2020-06-01 09:35:30+00:00",
            "title": "Update contributor guide",
            "text": "Minor update to workflow and adds information on styling.\nAdds new guide on writing mini-book tutorials.",
            "comments": []
        },
        {
            "number": 92,
            "user": "jvdp1",
            "date": "2020-05-28 19:29:17+00:00",
            "title": "News letter for June",
            "text": "I started a news letter for June. It is far to be finished, but it was to give it a start.\nIf inappropriate, please close the PR.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-28 19:55:00+00:00",
                    "text": "Thanks! In Hugo, you can have an item that is not published. Is this possible with Jekyll?\nIf so, let's add the \"draft\" tag, merge this PR and then we can keep sending PR to the draft document in master. When it is ready, we remove the \"draft\" tag and it appears online."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-28 20:18:45+00:00",
                    "text": "Thank you for starting it, @jvdp1. I meant to do it for a while now but it slipped away.\nYes, drafts are placed into _drafts directory, see here. I don't see a good reason to commit it master as a draft when we can just work on it in a fork via a PR. Plus, we have a single dedicated PR for each newsletter. @certik why do you prefer working on a draft in master over one in a fork?\nMy main objection is that it interrupts the current work flow and we're only few days away from publication.\nSome items we should recap here (I'll help with this):\n\nDiscourse was new in May (this is a big one)\nShort recap of the first monthly call\nNew fpm functionality from #82 if @everythingfunctional merges it this month\nFortranCon2020 and community submissions to it (LFortran, stdlib, fpm, community)\n\nI think we should drop the Jobs section unless we get contributions from employers. It will be just be a lot of work to scout things out ourselves and I don't have time to do it right now."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-28 20:27:05+00:00",
                    "text": "I agree with Milan here, one PR per newsletter is better than many incremental ones imo. The drafts tag sounds useful if you're not using version control, but here the git workflow is superior."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-28 20:37:19+00:00",
                    "text": "@milancurcic , I was giving everybody another day or two to follow up if they wanted to. I just merged it, so yeah, mention that in the newsletter."
                },
                {
                    "user": "certik",
                    "date": "2020-05-28 20:42:45+00:00",
                    "text": "If you open just one PR, is the workflow to comment here, or to provide suggestions in the diff?"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-28 20:52:41+00:00",
                    "text": "I think we should drop the Jobs section unless we get contributions from employers. It will be just be a lot of work to scout things out ourselves and I don't have time to do it right now.\n\nI agree. I'll remove the section."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-28 20:53:53+00:00",
                    "text": "If you open just one PR, is the workflow to comment here, or to provide suggestions in the diff?\n\nI think either or both. You could also push directly to the newsletter branch, although I think this works well if contributing complete sections rather than small edits."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-28 20:56:22+00:00",
                    "text": "@everythingfunctional Great! Mind contributing a paragraph here on what's new in fpm? New feature (dependencies from remote git) is super cool and I think even an \"in action\" example would be great for the newsletter."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-28 22:47:00+00:00",
                    "text": "@everythingfunctional Great! Mind contributing a paragraph here on what's new in fpm?\n\nYep, I'll take a crack at it."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-29 02:33:53+00:00",
                    "text": "I don't seem to have permissions to push to the branch. @jvdp1 can you grant me access?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-29 03:24:33+00:00",
                    "text": "Yes, that's the problem with just one PR as opposed to sending a bunch of PRs against a draft article, as anyone can send a PR and we can discuss changes on a case by case basis.\n\u2026\nOn Thu, May 28, 2020, at 8:34 PM, Brad Richardson wrote:\n\n\n I don't seem to have permissions to push to the branch. @jvdp1\n <https://github.com/jvdp1> can you grant me access?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#92 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAHERS6DLREVJFVDE3RT4NJ3ANCNFSM4NNLTIYQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-29 04:02:14+00:00",
                    "text": "@everythingfunctional I just added a permission for you to push to PR branches. If anybody else needs this, please let me know. For most edits and additions here, commit suggestions should be just fine.\n@certik Please open an issue to propose an alternative workflow and we'll discuss it. I'm open to ideas."
                },
                {
                    "user": "certik",
                    "date": "2020-05-29 04:46:50+00:00",
                    "text": "My only alternative workflow is what I proposed above. It's not that important for me, I am fine with doing just one PR. I have bigger fish to fry. :)"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-29 05:50:36+00:00",
                    "text": "@everythingfunctional Can you push to the branch now?"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-29 14:55:04+00:00",
                    "text": "There's always a little bit of friction and adjustment trying to strike a balance between security and convenience when trying to come up with the \"best\" workflow. I agree with @milancurcic and @LKedward , one PR per newsletter. Merging half done stuff always makes me nervous."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-31 17:33:16+00:00",
                    "text": "I think this is now in mostly good shape. Everyone please take the time to read it to make sure we're all okay with it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-31 17:36:10+00:00",
                    "text": "While working on this locally, I learned that if the post date is future date--like June 1 here--then the post is automatically a draft and not published. I don't know if this is a Jekyll default or our own setting."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 02:52:38+00:00",
                    "text": "I would suggest to either put all of the people who helped with everything that says \"we\" as authors or put authors something like fortran-lang contributors.\n\u2026\nOn Sun, May 31, 2020, at 8:36 PM, Brad Richardson wrote:\n\n\n ***@***.**** approved this pull request.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#92 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWGVLDMFEB5SHYABFXDRUMHZBANCNFSM4NNLTIYQ>."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 02:58:04+00:00",
                    "text": "In addition we should list all people who contributed code and comments across all fortran-lang repositories. I can run my scripts tomorrow to obtain the info.\n\u2026\nOn Sun, May 31, 2020, at 8:52 PM, Ond\u0159ej \u010cert\u00edk wrote:\n I would suggest to either put all of the people who helped with\n everything that says \"we\" as authors or put authors something like\n fortran-lang contributors.\n\n On Sun, May 31, 2020, at 8:36 PM, Brad Richardson wrote:\n >\n >\n > ***@***.**** approved this pull request.\n >\n > \u2014\n > You are receiving this because you were mentioned.\n > Reply to this email directly, view it on GitHub\n > <#92 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWGVLDMFEB5SHYABFXDRUMHZBANCNFSM4NNLTIYQ>.\n >"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 03:32:24+00:00",
                    "text": "Yes, authors are authors of the newsletter and not of the contributions to the projects.\nI agree we should acknowledge all contributors. @certik if you can do this by tomorrow (and add your name to the authors list), by all means, but please let's not delay the newsletter."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 04:39:59+00:00",
                    "text": "I strongly believe we can't send this without acknowledgment. I'll try to do it tomorrow, but if we have to delay by a day, then that's better than not giving credit.\n\u2026\nOn Sun, May 31, 2020, at 9:32 PM, Milan Curcic wrote:\n\n\n Yes, authors are authors of the newsletter and not of the contributions\n to the projects.\n\n I agree we should acknowledge all contributors. @certik\n <https://github.com/certik> if you can do this by tomorrow (and add\n your name to the authors list), by all means, but please let's not\n delay the newsletter.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#92 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWHKIFYHXFAQXFI27ODRUMONHANCNFSM4NNLTIYQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 11:23:18+00:00",
                    "text": "@certik sounds good, please merge when you're ready."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 15:30:05+00:00",
                    "text": "I am working on the scripts now."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 21:44:35+00:00",
                    "text": "I extracted all the data and posted it here:\nhttps://gitlab.com/fortran-lang/github_stats_data\nnow I am working on extracting contributor names in the range:\nhttps://gitlab.com/fortran-lang/github_stats/-/merge_requests/2"
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:27:38+00:00",
                    "text": "This is a first draft of the contributors. I am now working on adding names next to their GitHub IDs. This was automatically generated by a script in this MR:\nhttps://gitlab.com/fortran-lang/github_stats/-/merge_requests/2\nSo you can see exactly how it works.\nPatches / ideas welcome how to improve this."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:29:24+00:00",
                    "text": "I can see we should remove the github-actions[bot] user."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 22:36:50+00:00",
                    "text": "Great, thank you @certik!\nI have a few suggestions, feel free to apply them as you see fit:\n\nRather than saying \"The following contributors commented on any of the four repositories...\", I suggest a more personal message, something like: \"We thank everybody who contributed to fortran-lang in the past month: \". Currently the message is quite dry and impersonal. It's quite ironic that github-actions[bot] got included :).\nSimilar to 1), I suggest renaming the section title from \"Contributors\" to either \"Thank you\" or \"Acknowledgements\". (maybe I like \"Contributors\" on second read)\nRemove the numbering and the \"@\" and simply list names, comma-separated, for example (keep the hyperlinks):\n\n\ncertik, milancurcic, LKedward, ..."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:40:33+00:00",
                    "text": "I posted how the markdown looks like now, but realized it probably sent an email to all the people using a mention...; So I deleted my comment, don't know if that will fix it. If anyone of you got tagged by a mistake, I apologize.\nHere is how it looks like:\nhttps://gitlab.com/fortran-lang/github_stats/-/merge_requests/2#note_353238748"
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:46:02+00:00",
                    "text": "Thanks @milancurcic for the suggestions. I updated the wording. I think I would like to spell which repositories are counted, and that this lists people who commented.\nCurrently it looks like this:\n\nOnd\u0159ej \u010cert\u00edk (@certik)\nMilan Curcic (@milancurcic)\nLaurence Kedward (@LKedward)\n...\n\nShould we change it to:\nOnd\u0159ej \u010cert\u00edk (@certik), Milan Curcic (@milancurcic), Laurence Kedward (@LKedward), ...\nOr some other formatting?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 22:48:45+00:00",
                    "text": "I personally like this best:\n\nOnd\u0159ej \u010cert\u00edk (@certik), Milan Curcic (@milancurcic), Laurence Kedward (@LKedward), ..."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:49:04+00:00",
                    "text": "Ok, let me change it."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:52:33+00:00",
                    "text": "@milancurcic like this?"
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:54:55+00:00",
                    "text": "@milancurcic go ahead and merge this."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 22:55:05+00:00",
                    "text": "Excellent, thank you very much @certik! This is a huge improvement to our newsletter."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-02 07:11:48+00:00",
                    "text": "Thanks @certik for this! It's great also to see the number of people getting involved!"
                },
                {
                    "user": "certik",
                    "date": "2020-06-02 18:39:37+00:00",
                    "text": "Yes. We should figure out how to share this in some nice graphs also. But for now this is good enough."
                }
            ]
        },
        {
            "number": 91,
            "user": "HaoZeke",
            "date": "2020-05-23 02:45:35+00:00",
            "title": "packages: Init QUIP",
            "text": "",
            "comments": []
        },
        {
            "number": 90,
            "user": "arjenmarkus",
            "date": "2020-05-22 19:24:06+00:00",
            "title": "First commit of a mini-book on building programs",
            "text": "Please review the text: hopefully it presents the material in a clear way.  IMO, the pitfall is that it presents too much details. Suggestions for changes are welcome.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-23 11:04:49+00:00",
                    "text": "I don't think this needs to be changed in this pull request but the Windows-specific content is presented for Cygwin, and I wonder whether the same content can be abstracted away from this environment somehow? For this tutorial it seems that Cygwin only serves to present the same Linux workflow but on Windows. Does Windows development need a separate tutorial maybe?\nI have no problem with Cygwin but:\n\nreaders may not be familiar with it and;\nit is only one of multiple linux-type interfaces for Windows.\n\n(If I need to develop on Windows I now use MSYS2 because unlike WSL and Cygwin it produces truly native Windows executables)"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-25 17:45:10+00:00",
                    "text": "Hi Laurence,\n\nCygwin happens to be the easiest access I have to a Linux-like environment\n(with an up-to-date gfortran installation) ;). Nothing really essential.\nHowever, since some things simply work differently on Windows, I think it\nis good to present both platforms. Actually I would like to include MacOS*\nas well. But perhaps a bit more separation - present the common bits first\nand then (separately?) the specifics.\n\nRegards,\n\nArjen\n\nOp za 23 mei 2020 om 13:05 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n I don't think this needs to be changed in this pull request but the\n Windows-specific content is presented for *Cygwin*, and I wonder whether\n the same content can be abstracted away from this environment somehow? For\n this tutorial it seems that Cygwin only serves to present the same Linux\n workflow but on Windows. Does Windows development need a separate tutorial\n maybe?\n\n I have no problem with Cygwin but:\n\n    - readers may not be familiar with it and;\n    - it is only one of multiple linux-type interfaces for Windows.\n\n (If I need to develop on Windows I now use MSYS2 because unlike WSL and\n Cygwin it produces truly native Windows executables)\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#90 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6L7MJHD7CW7ZQC4JLRS6UV3ANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-25 17:46:17+00:00",
                    "text": "Hi J\u00e9r\u00e9mie,\n\nthanks for the review - I will have a look and pick those cherries ;).\n\nRegards,\n\nArjen\n\n\n\nOp ma 25 mei 2020 om 18:58 schreef Jeremie Vandenplas <\nnotifications@github.com>:\n\u2026\n ***@***.**** commented on this pull request.\n\n Great introduction. Cherry-pick what you want/like.\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +option \"/out:\" with the name of the new library next to it. To add\n\n +object files to an existing library, leave out the \"/out:\" bit.\n\n +* On platforms like Linux there is a particular convention to name\n\n +libraries. If you name your library like \"libname.a\" (note the \"lib\"\n\n +prefix), then you can refer to it as \"-lname\" in the link step.\n\n +* Libraries are often sought in directories indicated by an option \"-L\"\n\n +or \"/LIBPATH\". This saves you from having to specify the exact path for\n\n +every library.\n\n +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n\n \u2b07\ufe0f Suggested change\n\n -The above discussion is tacitly assuming that you are using so-called\n\n +The above discussion is tacitly assuming that you are using the so-called\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +or \"/LIBPATH\". This saves you from having to specify the exact path for\n\n +every library.\n\n +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n\n \u2b07\ufe0f Suggested change\n\n -A flexible alternative is to use so-called dynamic libraries. These\n\n +A flexible alternative is to use the so-called dynamic libraries. These\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +every library.\n\n +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n +libraries remain outside the executable program and as a consequence you\n\n\n \u2b07\ufe0f Suggested change\n\n -libraries remain outside the executable program and as a consequence you\n\n +libraries remain outside the executable program and as a consequence\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n +libraries remain outside the executable program and as a consequence you\n\n +can replace them without rebulding the entire program. Compilers and\n\n\n \u2b07\ufe0f Suggested change\n\n -can replace them without rebulding the entire program. Compilers and\n\n +can be replaced without rebulding the entire program. Compilers and\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n +libraries remain outside the executable program and as a consequence you\n\n +can replace them without rebulding the entire program. Compilers and\n\n +indeed the operating system itself rely heavily on such dynamic\n\n +libraries. You could consider dynamic libraries as a sort of executable\n\n +programs that need a bit of help to be run.\n\n +\n\n +Building dynamic libraries works slightly differently:\n\n\n Differently based on what? I have the feeling that something is missing in\n this sentence.\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Building dynamic libraries works slightly differently:\n\n +\n\n +On Linux:\n\n +\n\n +    $ gfortran -fpic -c file1.f90 file2.f90\n\n +    $ gfortran -fpic -c file3.f90 ...\n\n +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n +\n\n +On Windows, with the Intel Fortran compiler:\n\n +\n\n +    $ ifort -c file1.f90 file2.f90\n\n +    $ ifort -c file3.f90 ...\n\n +    $ ifort -dll -exe:supportlib.dll file1.obj file2.obj file3.obj ...\n\n +\n\n +The differences:\n\n\n \u2b07\ufe0f Suggested change\n\n -The differences:\n\n +The differences are that:\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +On Linux:\n\n +\n\n +    $ gfortran -fpic -c file1.f90 file2.f90\n\n +    $ gfortran -fpic -c file3.f90 ...\n\n +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n +\n\n +On Windows, with the Intel Fortran compiler:\n\n +\n\n +    $ ifort -c file1.f90 file2.f90\n\n +    $ ifort -c file3.f90 ...\n\n +    $ ifort -dll -exe:supportlib.dll file1.obj file2.obj file3.obj ...\n\n +\n\n +The differences:\n\n +\n\n +* You need to specify a compile option on Linux, \"-fpic\", because the\n\n\n This option is for gfortran right?It could be good to mention it\n explicitely\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +On Windows, with the Intel Fortran compiler:\n\n +\n\n +    $ ifort -c file1.f90 file2.f90\n\n +    $ ifort -c file3.f90 ...\n\n +    $ ifort -dll -exe:supportlib.dll file1.obj file2.obj file3.obj ...\n\n +\n\n +The differences:\n\n +\n\n +* You need to specify a compile option on Linux, \"-fpic\", because the\n\n +object code is slightly different.\n\n +* You need to tell in the link step that you want a dynamic library (on\n\n +Linux: a shared object/library, hence the extension \".so\"; on Windows:\n\n +a dynamic link library)\n\n +\n\n +There is one more thing to be aware of: On Windows you must\n\n +explicitly specify that a routine is to be _exported_, i.e. is visible\n\n\n \u2b07\ufe0f Suggested change\n\n -explicitly specify that a routine is to be _exported_, i.e. is visible\n\n +explicitly specify that a procedure is to be _exported_, i.e. is visible\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +compiler directive:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !GCC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Or, with the Intel Fortran compiler:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n\n \u2b07\ufe0f Suggested change\n\n -we look at the tabulation program.\n\n +we look at the `tabulation.f90` program.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +    !GCC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Or, with the Intel Fortran compiler:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n\n \u2b07\ufe0f Suggested change\n\n -The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +The `tabulate` program requires a user-defined routine `f`. If we\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +let it reside in a dynamic library, say \"function.dll\", we can simply\n\n +replace the implementation of the function by putting another dynamic\n\n +library in the directory. No need to rebuild the program as such.\n\n +\n\n +On Cygwin it is not necessary to explicitly export a routine - all\n\n\n \u2b07\ufe0f Suggested change\n\n -On Cygwin it is not necessary to explicitly export a routine - all\n\n +On Cygwin it is not necessary to explicitly export a procedure - all\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +let it reside in a dynamic library, say \"function.dll\", we can simply\n\n +replace the implementation of the function by putting another dynamic\n\n +library in the directory. No need to rebuild the program as such.\n\n +\n\n +On Cygwin it is not necessary to explicitly export a routine - all\n\n +publically visible routines are exported when you build a dynamic library.\n\n\n \u2b07\ufe0f Suggested change\n\n -publically visible routines are exported when you build a dynamic library.\n\n +publically visible procedures are exported when you build a dynamic library.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +let it reside in a dynamic library, say \"function.dll\", we can simply\n\n +replace the implementation of the function by putting another dynamic\n\n +library in the directory. No need to rebuild the program as such.\n\n +\n\n +On Cygwin it is not necessary to explicitly export a routine - all\n\n +publically visible routines are exported when you build a dynamic library.\n\n +Also, no import library is generated.\n\n +\n\n +Since our dynamic library can be built from a single source file, we\n\n +can take a shortcut:\n\n +\n\n +    $ gfortran -shared -o function.dll function.f90\n\n +\n\n +This produces the files \"function.dll\" and \"function.mod\". The\n\n +utility \"nm\" tells us the exact name of the function \"f\":\n\n\n \u2b07\ufe0f Suggested change\n\n -utility \"nm\" tells us the exact name of the function \"f\":\n\n +utility \"nm\" tells us the exact name of the function `f`:\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +This produces the files \"function.dll\" and \"function.mod\". The\n\n +utility \"nm\" tells us the exact name of the function \"f\":\n\n +\n\n +    $ nm function.dll\n\n +    ...\n\n +    000000054f9d7000 B __dynamically_loaded\n\n +                     U __end__\n\n +    0000000000000200 A __file_alignment__\n\n +    000000054f9d1030 T __function_MOD_f\n\n +    000000054f9d1020 T __gcc_deregister_frame\n\n +    000000054f9d1000 T __gcc_register_frame\n\n +    ...\n\n +\n\n +It has received a prefix `__function_MOD_` to distinguish it from any\n\n +other routine \"f\" that might be defined in another module.\n\n\n \u2b07\ufe0f Suggested change\n\n -other routine \"f\" that might be defined in another module.\n\n +other procedure `f` that might be defined in another module.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +    subroutine myroutine( ... )\n\n +    !GCC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Or, with the Intel Fortran compiler:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n\n It could be good to replace Cygwin by GNU/Linux\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Build tools\n\n +-----------\n\n +\n\n +If this seems complicated, well, you are right and we are only\n\n +scratching the surface here. The complications arise because of\n\n +differences between platforms, differences between compilers/linkers and\n\n +because of differences in the way programs are set up. Fortunately,\n\n +there are many tools to help configure and maintain the build steps.\n\n +We will not try and catalogue them, but give instead a very limited\n\n +list of tools that you typically encounter:\n\n +\n\n +* The \"make\" utility is a classical tool that uses instructions about\n\n +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called makefile that contains the dependencies.\n\n\n \u2b07\ufe0f Suggested change\n\n -so-called makefile that contains the dependencies.\n\n +so-called `Makefile` that contains the dependencies.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called makefile that contains the dependencies.\n\n +\n\n +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n\n \u2b07\ufe0f Suggested change\n\n -such Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +user-interface, but are often very specific for the compiler and\n\n +platform.\n\n +\n\n +* Maintenance tools like autotools and CMake can generate makefiles or\n\n +Visual Studio project files via a high-level description. They abstract\n\n +away from the compiler and platform specifics.\n\n +\n\n +Here is a very simple example of a makefile as used by the make utility,\n\n\n \u2b07\ufe0f Suggested change\n\n -Here is a very simple example of a makefile as used by the make utility,\n\n +Here is a very simple example of a `Makefile` as used by the make utility,\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +A pre-built program that does not need to be customised, other than via its\n\n +input, will still need to come with the various run-time libraries and will\n\n +be specific to the operating system/environment it was built for.\n\n +\n\n +The set of run-time libraries differs per operating system and compiler version.\n\n +For a freely available compiler like gfortran, the easiest thing is to ask the\n\n +user to install that compiler on their system. In the case of Windows: the Cygwin\n\n +environment may be called for.\n\n +\n\n +Alternatively, you can supply copies of the run-time libraries together with your\n\n +program. Put them in the directory where they can be found at run-time.\n\n +\n\n +Note: On Windows, the Intel Fortran comes with a set of _redistributable_ libraries.\n\n +These will need to be made available.\n\n +\n\n +In general: use a tool like \"ldd\" or \"dependency walker\" to find out what\n\n\n \u2b07\ufe0f Suggested change\n\n -In general: use a tool like \"ldd\" or \"dependency walker\" to find out what\n\n +In general: use a tool like `ldd` or `dependency walker` to find out what\n\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#90 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR5BRJN56DOTBQJR35DRTKPSPANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-05-25 19:15:40+00:00",
                    "text": "Just a note regarding the platform: I strongly propose that our long term goal should be to run natively on all platforms (Linux, macOS, Windows natively as well as in Cygwin and WSL, HPC, ...) using native tools where applicable. We should have some tutorial \"how to get started on each platform\", and how to do the basic things for each platform. That way the actual tutorial such as this PR can be written for one particular platform (Cygwin in this case) and people would know how to execute the commands on other platforms using the \"how to get started on each platform\" tutorial.\nSo I think it's perfectly fine if this tutorial sticks with Cygwin."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-03 11:04:07+00:00",
                    "text": "Hi everyone,\n\nI plan to work through the suggestions by J\u00e9r\u00e9mie tomorrow. I noticed that\nthe tutorial has been split into separate chapters. I can do that with this\nminibook as well.\n\nIf you have more comments/suggestions, let me know.\n\nRegards,\n\nArjen\n\nOp ma 25 mei 2020 om 21:15 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com>:\n\u2026\n Just a note regarding the platform: I strongly propose that our long term\n goal should be to run natively on all platforms (Linux, macOS, Windows\n natively as well as in Cygwin and WSL, HPC, ...) using native tools where\n applicable. We should have some tutorial \"how to get started on each\n platform\", and how to do the basic things for each platform. That way the\n actual tutorial such as this PR can be written for one particular platform\n (Cygwin in this case) and people would know how to execute the commands on\n other platforms using the \"\"how to get started on each platform\" tutorial.\n\n So I think it's perfectly fine if this tutorial sticks with Cygwin.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#90 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6EHDDRNKMDLC6PIQDRTK7WRANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-03 18:27:16+00:00",
                    "text": "Thanks for the update @arjenmarkus.\nJust to let you know that there is now a guide in the repository for how to use the new multi-page mini-book format. Do let me know if anything isn't clear or you need further assistance.\nLooking forward to seeing your mini-book published on site.\nLaurence"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-04 06:51:33+00:00",
                    "text": "Hi Laurence,\n\ngreat - that should be helpful indeed. I was going to do it with the\ntutorial's sources as an example but this is much better.\n\nRegards,\n\nArjen\n\nOp wo 3 jun. 2020 om 20:27 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n Just to let you know that there is now a guide\n <https://github.com/fortran-lang/fortran-lang.org/blob/master/MINIBOOKS.md>\n in the repository for how to use the new multi-page mini-book format. Do\n let me know if anything isn't clear or you need further assistance.\n Looking forward to seeing your mini-book published on site.\n Laurence\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#90 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR46J6WYRKX3VMZRIXDRU2IZFANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-05 19:27:59+00:00",
                    "text": "Okay, just created a new pull request for this minibook. I have tried to be\naccurate wrt the mark-up and the suggested changes. A few improvements I am\nthinking of:\n- Clearer characterisation of the platforms\n- The tabulate.f90 source should probably be revised. I have left it mostly\nas it was, but the suggestions made me think a bit.\n\nOh, and perhaps add the source code as examples for people to work with.\n\nRegards,\n\nArjen\n\nOp do 4 jun. 2020 om 08:51 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi Laurence,\n\n great - that should be helpful indeed. I was going to do it with the\n tutorial's sources as an example but this is much better.\n\n Regards,\n\n Arjen\n\n Op wo 3 jun. 2020 om 20:27 schreef Laurence Kedward <\n ***@***.***>:\n\n> Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n> Just to let you know that there is now a guide\n> <https://github.com/fortran-lang/fortran-lang.org/blob/master/MINIBOOKS.md>\n> in the repository for how to use the new multi-page mini-book format. Do\n> let me know if anything isn't clear or you need further assistance.\n> Looking forward to seeing your mini-book published on site.\n> Laurence\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#90 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR46J6WYRKX3VMZRIXDRU2IZFANCNFSM4NICRNUA>\n> .\n>"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 09:05:12+00:00",
                    "text": "Closing, superseded by #99."
                }
            ]
        },
        {
            "number": 89,
            "user": "certik",
            "date": "2020-05-22 18:14:02+00:00",
            "title": "Consider switching to Hugo from Jekyll",
            "text": "I have great experience with Hugo for site generation --- a single binary download on all platforms, it's very fast to run, and overall seems robust.\nThe issue with Jekyll is that it's harder to install and you typically run into issue such as this one:\n#77 (comment)\nThis is relatively lower priority, since this website was primarily developed by @milancurcic and @LKedward and so I let them choose the technology. I opened this issue just as an alternative to know about.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 18:27:15+00:00",
                    "text": "Indeed Hugo is easier to install and run because it's a single binary. The only Jekyll issue that I see is actually nothing about Jekyll but with gem and bundler, which IMO just plain suck. Especially when you start using specific versions. Tracebacks are inscrutable.\nHugo was actually what I started working with at first and then gave up after few hours. I was somewhat familiar with Jekyll already, and Hugo is overall more complex so there was more to learn.\nSo setting up the tooling to run Jekyll is worse than Hugo. But after you do that once, I think Jekyll is easier to work with than Hugo. Personal opinion of course.\nBuild previews that @LKedward made mostly solves this. If you know how to submit a PR, there's no need to run locally. For writing markdown pages and submitting content this is good enough. If you need to make structural changes to the website, chances are that setting up Jekyll is not an issue."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 18:35:09+00:00",
                    "text": "That's fine, you two are the main maintainers, so if you are comfortable with Jekyll, that is fine with me. If we start getting more users struggling to install Jekyll, we can reconsider."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-23 13:43:29+00:00",
                    "text": "I agree Jekyll isn't great for contributors to setup - I'm also not sure if it supports Windows or not?\nI find the Jekyll templating language very rudimentary at times, but this also means that it isn't too complicated to get started. I'm happy to stick with Jekyll for now, but we can reconsider later if need be."
                }
            ]
        },
        {
            "number": 88,
            "user": "LKedward",
            "date": "2020-05-20 15:38:32+00:00",
            "title": "Fixes #73 lapack entry in package index.",
            "text": "Fixes #73",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-20 16:30:53+00:00",
                    "text": "Good catch."
                }
            ]
        },
        {
            "number": 87,
            "user": "LKedward",
            "date": "2020-05-20 15:31:00+00:00",
            "title": "Add: Navbar social icons",
            "text": "Resolves #85.\nI also removed the social links from the news sidebar (now that they're in the navbar) and replaced them with the fortran-lang twitter feed.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-20 15:31:09+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-20 15:32:09+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/87/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-20 16:36:50+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-20 16:37:13+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 86,
            "user": "shahmoradi",
            "date": "2020-05-19 06:47:42+00:00",
            "title": " adding the ParaMonte library ",
            "text": "This commit adds the ParaMonte library to the list of Fortran numerical libraries. ParaMonte is a well-tested general-purpose open-source high-performance MPI/Coarray-parallel Monte Carlo simulation library implemented in the 2018-standard-complaint Fortran programming language, currently with interfaces to the C/C++/Fortran/MATLAB/Python programming languages. The project's documentation is available at: https://github.com/cdslaborg/paramonte",
            "comments": []
        },
        {
            "number": 85,
            "user": "certik",
            "date": "2020-05-18 19:40:56+00:00",
            "title": "Move the Discourse link at the top",
            "text": "Currently one must scroll down to find the Discourse link. Let's put it at the top horizontal menu? I think we want this as the primary discussion forum, so that would be a great place for it.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-18 19:56:55+00:00",
                    "text": "I agree it should be easier to find. I'm not crazy about the Discourse badge being in the navbar, design-wise. But maybe it could work, all the way to the right of \"News\". The problem here is that on mobile, Discourse link would be hidden until the user opens the sandwich bar. A workaround for this would be to keep the Discourse link both where it is now, and to add it to the navbar.\nAn alternative would be to move the whole \"Join us\" section up, and bring the \"News\" section down. I think this would be my favorite solution."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-18 20:00:27+00:00",
                    "text": "Yeah I agree, just move the section up. It definitely shouldn't be in the navbar."
                },
                {
                    "user": "certik",
                    "date": "2020-05-18 20:14:04+00:00",
                    "text": "I was thinking putting either \"Forum\" or \"Discourse\" text / link into the navigation bar at the top, not the logo. Is there a problem design-wise with that?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-18 20:20:28+00:00",
                    "text": "We could do something like this where we group our external links (discourse, twitter, github) as mini icons in the navbar far right, separate from internal nav links?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-18 20:23:34+00:00",
                    "text": "@LKedward this looks even better! I just want to go to fortran-lang.org and then get to Discourse from there. I just don't remember the address and ultimately we want more people to do what I do --- to go through the main webpage. So that as we add more things, or announcements, they can see them."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-18 20:27:14+00:00",
                    "text": "I just want to go to fortran-lang.org and then get to Discourse from there. I just don't remember the address ..\n\nI've been doing the exact same thing! Scrolling down each time.\n\nand ultimately we want more people to do what I do --- to go through the main webpage. So that as we add more things, or announcements, they can see them.\n\nAbsolutely I agree, we want this to be more accessible and visible.\nI can have a go at putting this together this week \ud83d\udc4d"
                }
            ]
        },
        {
            "number": 84,
            "user": "certik",
            "date": "2020-05-18 14:56:01+00:00",
            "title": "Cray: Fix the name of CCE",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-18 14:57:40+00:00",
                    "text": "This was an approved change by Cray, so I am just going to merge it."
                }
            ]
        },
        {
            "number": 83,
            "user": "LKedward",
            "date": "2020-05-17 14:39:33+00:00",
            "title": "Add navigation structure for learn section",
            "text": "As we expand the Quickstart tutorial and others start contributing tutorial content, we need a central structure for organising the learning pages on the site.\nI've drafted a possible solution in this PR:\n\nA new page layout is introduced with a navigation side bar which displays the contents of the learn section and the structure of the current page headings.\nA yaml file is used to define the contents and order of the navigation bar whereby learning pages are grouped into named chapters\n\nThis approach:\n\nmakes navigation explicitly clear to site users (no getting lost among lots of pages);\nallows contributors to start adding tutorial pages to the site now;\nbut is flexible enough that it can easily be restructured as the number of tutorials increases;\n\nTo add a page, contributors need only write a markdown file and add an entry under the appropriate chapter in the yaml data file. (I will update CONTRIBUTING.md)\nFor this draft PR I've just included the existing quickstart tutorial to demonstrate; eventually the landing page will be updated to include useful links etc.\n@milancurcic , @certik what are your thoughts?\n#build_preview",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-17 14:39:56+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-17 14:40:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/83/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-17 15:02:27+00:00",
                    "text": "I think this is great and a step forward. I approve.\nI anticipate that our structure of content will be more unordered than ordered, so we may drop the numbering, but we can figure this out later as we go."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-30 14:50:36+00:00",
                    "text": "Okay, I've restructured this PR so that it's less like a single monolithic book with chapters and\ninstead it allows single-page and multi-page mini-book tutorials.\nThe name and contents of each mini-book is defined in a yaml data file which is used to: populate the Learn landing page with a list of books, grouped by category; and populate a table-of-contents for each mini-book.\nTo demonstrate this, the Quickstart tutorial has been broken out into multiple pages so it's easier to navigate.\nThe 'Learn' landing page has been updated to also include an initial selection of third-party resources as well.\nThe Learn page is a little bare at the moment, but with the structure now in place it should be quite easy to start adding more mini-book tutorials (starting with #90).\nI will add a section to the contributor guide on how to write a mini-book tutorial.\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-30 14:51:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/83/"
                },
                {
                    "user": "certik",
                    "date": "2020-05-30 16:07:22+00:00",
                    "text": "@LKedward this looks really great. Lots of work done here thank you!\nWe should put there a link to https://github.com/j3-fortran/fortran_proposals also I think.\nI think it looks great, +1 from me."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-30 19:21:04+00:00",
                    "text": "An issue that comes up here is how to sort the books? Currently they don't seem sorted in any particular way. Books at the top of the list will be implicitly given higher priority or sense of importance. So we need to decide how to sort them:\n\nAlphabetically by title?\nAlphabetically by author last name?\nChronologically from newest to oldest?\n\n\nAs yes, good point, I hadn't considered this.\nI'm not sure what the best/standard way to sort them is - my preference would be to sort by date with newest first to prioritise up-to-date editions."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-30 19:31:31+00:00",
                    "text": "Print books are now sorted by year descending - this can be changed to alphabetical if desired.\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-30 19:32:40+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/83/"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-30 20:16:49+00:00",
                    "text": "This looks really great. Easy to navigate and read! Really good job!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-31 09:19:20+00:00",
                    "text": "Thanks all for the feedback and suggestions. I will now merge and work on updating the contributor guide with instructions in a new PR."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-31 09:25:09+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-31 09:25:28+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 82,
            "user": "LKedward",
            "date": "2020-05-17 14:19:00+00:00",
            "title": "Update Quickstart tutorial",
            "text": "#7 (comment)\nWe can discuss what needs to be done here.",
            "comments": [
                {
                    "user": "Irvise",
                    "date": "2020-06-13 21:13:59+00:00",
                    "text": "I have a proposal that I want to explain here to get some feedback before making any pull request.\nIn the control flow section only if-else, do and do-while are discussed.\nI propose to add a small footnote to indicate the existence of cycle, exit, where, forall? and do concurrent. Just like in derived types with the comment of pointer, codimension, etc. This will make the reader aware that fortran supports more than just the \"common\" flow instructions\nPS: it is great idea to have a \"modern\" place to get into/discuss fortran. Tank you!"
                },
                {
                    "user": "certik",
                    "date": "2020-06-14 04:34:20+00:00",
                    "text": "@Irvise I think that's a great idea. Go ahead and submit a PR."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 09:28:26+00:00",
                    "text": "Hi @Irvise, you're absolutely right; there should definitely be a mention and explanation of those control flow statements. The control flow page is a little sparse currently and I think there could probably be a bit more explanative text there (#99 is a good example of the writing style for these tutorials).\nThe Quickstart tutorial is by no means a finished product so any more suggestions and contributions are certainly welcome!"
                },
                {
                    "user": "Irvise",
                    "date": "2020-06-14 09:50:49+00:00",
                    "text": "@certik @LKedward would you like it to be a very short note commenting their existence or would you prefer to have a small sentence explaining what each of them are supposed to do?\nI personally think cycle and exit are \"basic\" control flow key words. Maybe they deserve their own section to be properly discussed?\nAnd regarding the more \"advance\" features. Are there any plans to make an \"Intermediate fortran\" page? I have seen that you are discussing a Rust-style book, will it be a complete language introduction?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 11:08:56+00:00",
                    "text": "I think we should actually explain what cycle and exit do since they are quite fundamental to loop operations; if you think they need their own section (on the same page) then I have no objection to that.\nThere could probably be another section on the Loops page about implied do loops and the where statement. I'm not sure about including the forall statement since this is now an obsolescent feature.\nDo concurrent could be be mentioned perhaps, but detail deferred to a future tutorial?\nWe've moved away from the idea of a single monolithic Rust-style book in favour of many smaller books on different topics - as part of this, I think an \"Intermediate Fortran\" book makes sense as a next step after the Quickstart guide. Do you have any thoughts on what could go in this? Perhaps we should open an issue to discuss that."
                },
                {
                    "user": "Irvise",
                    "date": "2020-06-14 15:21:39+00:00",
                    "text": "Okay, I will start to write in a week or two (a bit too much work now).\nHas the proposal to have something similar to Ada's learn page been discussed? I think it solves most of the points mentioned (plus it is interactive). However, I know this is not the issue to discuss this point. In order to keep the issue on point, could you point me to where the current discussion taking place?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-14 16:09:00+00:00",
                    "text": "Hi @Irvise, that would be a great addition.\n\n@certik @LKedward would you like it to be a very short note commenting their existence or would you prefer to have a small sentence explaining what each of them are supposed to do?\n\nWe should have at least a complete small example showing how they work and a paragraph describing each feature. So, considerably more than a note or a sentence. While you're at it, if you can help expand the existing https://fortran-lang.org/learn/quickstart/operators_control_flow#loop-constructs-do section, that would be great.\n\nI personally think cycle and exit are \"basic\" control flow key words. Maybe they deserve their own section to be properly discussed?\n\nI think they should be in this section, and each should probably have its own subsection. Something like this (and separated from logical operators which don't belong with control flow):\n# Control flow (chapter)\n## if-branches (section)\n...\n## do-loops (section)\n### regular do (subsection)\n### do while() (subsection)\n### do concurrent() (subsection)\n### cycle, exit (subsection)\nI agree that we shouldn't include forall for the reason that Laurence mentioned. We should include where, but not in control flow, as it's an array assignment construct. So it belongs in the Arrays chapter, which should be separated from strings."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-14 16:39:27+00:00",
                    "text": "We've moved away from the idea of a single monolithic Rust-style book in favour of many smaller books on different topics - as part of this, I think an \"Intermediate Fortran\" book makes sense as a next step after the Quickstart guide. Do you have any thoughts on what could go in this? Perhaps we should open an issue to discuss that.\n\n@LKedward I think you refer to this. I apologize that I didn't provide feedback back in that thread. I didn't in part because I haven't gotten clear my self with the best way forward, and this in a difficult problem to solve.\nI like the approach of mini-books over one large monolithic book. However, we're currently unclear what the specific mini-books are and what separates them. When you separate a subject matter into multiple parts (mini-books) you need to decide how to separate them. You can do it in different ways:\n\nBy topic (compiling and linking, arrays, control flow, OOP, etc.)\nBy reader skill level (intro, advanced, expert)\nBy teaching method (tutorial, reference, cookbook, FAQ, best practices)\n\nDifferent teaching methods serve different purposes, so I think we all agree we need separation by teaching method (e.g. we'll have best practices from fortran90.org etc.). There are kind of a neutral ground mini-books, because they will tend to touch on all of the topics, and be useful to programmers of all skill levels.\nHowever, please, please be cautious of separating mini-books by both topic and skill level at the same time. By doing that you have to assume which topics are basic or advanced. And by assuming that you're assuming about what the reader needs. Which I don't think we can or should assume.\nAnother problem is overlap in content. Inevitably, both the intro and advanced mini-books will cover I/O, arrays, derived types etc. There will be a lot of repetition and cross-referencing. An average reader won't know ahead of time where the specific feature they're looking for is described.\nI urge everybody here to discuss and decide whether to separate by topic or by skill level, but please don't do both. We'll end up with many messy and complicated books.\nMy preference is to separate by topic (e.g. mini-book on arrays, I/O, OOP, parallelism, interop etc.), and each successive section of a mini-book builds gradually in depth and skill level. Of course, some topics will depend on others, and we'll end up with a natural sequence of mini-books that form a nice, coherent, large book, just like the Rust book. Which is what we wanted in the first place. :)"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 18:08:24+00:00",
                    "text": "However, we're currently unclear what the specific mini-books are and what separates them.\n\nWe briefly discussed this (in the first tutorial PR I think) and I recall that we agreed to avoid separation by skill level, due to the issues you discuss, and primarily go for separation by topic + other formats (FAQ etc.). Based off this previous conversation, this is also my preferred method of separation.\n@milancurcic, my mention of an \"Intermediate Fortran\" book may have caused confusion - by this I meant that it would be good to have a follow-on book from the Quickstart tutorial that covers more advanced topics that are not already contained within the Quickstart tutorial. i.e. they are split by topic where multiple topics are grouped within a book. This would be more of a \"Further Fortran\" book.\nI realise that it may be preferable to have more topic granularity at the book level (one topic per book), however I also don't think we should have ~10 books each consisting of ~3 paragraphs to start off with.\n\nthis in a difficult problem to solve.\n\nAbsolutely, the idea behind the mini-books is to give us as much flexibility in structuring the content while also enabling us to publish content incrementally instead of in large tranches.\nMy idea was that topics can start off as sections and be expanded to pages and then broken-out into stand-alone books, as more content is added."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 18:17:19+00:00",
                    "text": "Okay, I will start to write in a week or two (a bit too much work now).\n\nThanks @Irvise ! Any help with the tutorials would be greatly appreciated!\n\nHas the proposal to have something similar to Ada's learn page been discussed? I think it solves most of the points mentioned (plus it is interactive). However, I know this is not the issue to discuss this point. In order to keep the issue on point, could you point me to where the current discussion taking place?\n\nWe have a general discussion for the Learn section in #7 - I'll take a look at the Ada page.\nI had considered including interactivity using compiler explorer: you can essentially store code snippets on it using the short urls; it can be configured to just show compilation and execution output without the assembly dump and it can be embedded via an iframe (see the 'share' menu)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 18:49:50+00:00",
                    "text": "it would be good to have a follow-on book from the Quickstart tutorial that covers more advanced topics that are not already contained within the Quickstart tutorial. i.e. they are split by topic where multiple topics are grouped within a book. This would be more of a \"Further Fortran\" book.\n\nFollow-up: I realise the idea of grouping topics into books still suffers from the underlying issue of making an assumption about the skill level of the topics and so isn't really a good idea.\nBest to keep to one topic per book."
                }
            ]
        },
        {
            "number": 81,
            "user": "aktech",
            "date": "2020-05-15 18:29:42+00:00",
            "title": "Use {{site.baseurl}} instead of relative link",
            "text": "As suggested here:\n#80 (comment) and\nhttps://github.com/fortran-lang/fortran-lang.org/blob/master/CONTRIBUTING.md#internal-site-links\nping @LKedward @certik",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-15 20:47:56+00:00",
                    "text": "Thanks Amit!"
                }
            ]
        },
        {
            "number": 80,
            "user": "aktech",
            "date": "2020-05-15 18:17:00+00:00",
            "title": "Fix broken getting started link from tutorial -> learn",
            "text": "It seems the getting started link in the home page (https://fortran-lang.org/) above footer is broken as it still points to tutorial/, which was removed in this commit: 2adc5eb#diff-94d9a081cd1256334373c8ca6fb6276c",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-15 18:19:47+00:00",
                    "text": "Nice to see you here @aktech !"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-15 18:22:27+00:00",
                    "text": "Thank you and welcome @aktech !"
                }
            ]
        },
        {
            "number": 79,
            "user": "LKedward",
            "date": "2020-05-15 14:49:22+00:00",
            "title": "Transfer fortran90.org content",
            "text": "See #7 (comment)",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-15 17:27:18+00:00",
                    "text": "Yes, we should transfer it and then put a banner at fortran90.org to come here."
                }
            ]
        },
        {
            "number": 78,
            "user": "LKedward",
            "date": "2020-05-15 14:47:42+00:00",
            "title": "Tutorial: object-oriented Fortran",
            "text": "As discussed on fortran-lang mailing list\nAssign: Williams",
            "comments": [
                {
                    "user": "jvdp1",
                    "date": "2020-05-16 06:48:53+00:00",
                    "text": "Here is a good tutorial (IMHO) on Fortran OOP:\nhttps://gist.github.com/n-s-k/522f2669979ed6d0582b8e80cf6c95fd\nIt is maybe worthwhile to ask the author (@n-s-k) if he would be interested to contribute to this tutorial."
                }
            ]
        },
        {
            "number": 77,
            "user": "LKedward",
            "date": "2020-05-15 14:45:12+00:00",
            "title": "Tutorial: building compiled programs",
            "text": "As discussed on fortran-lang mailing list, this will cover compiling, linking and libraries.\nAssigned: @arjenmarkus",
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-15 19:17:49+00:00",
                    "text": "I took the opportunity of a couple of hours during a lazy evening to sit down and write a quick-and-dirty document. No Markdown mark-up, just plain text. It is just the start, but it should illustrate what I am thinking of. Of course there are plenty of tools to help with building a program, but I think it is also important to understand what is going on when you build a program.\nThe document is very much work-in-progress, so have a look and et me know whether this is useful or not.\nbuilding_programs.txt"
                },
                {
                    "user": "certik",
                    "date": "2020-05-15 19:35:02+00:00",
                    "text": "@arjenmarkus I think this looks great and I would like to have it in our Documentation section somewhere. @milancurcic, @LKedward where do you think would be the best place?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-15 19:39:27+00:00",
                    "text": "I love this. I think this is the kind of style we should take for tutorials.\nI think it would work well as a self-contained \"book\" (as described in #7) on building and linking, and we can link to it from the quickstart tutorial (/learn page).\nIt will be straightforward to convert it to Markdown."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-15 20:08:37+00:00",
                    "text": "Looks great, thanks @arjenmarkus."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-15 20:31:07+00:00",
                    "text": "Well, that is encouraging :).\n\nRegards,\n\nArjen\n\nOp vr 15 mei 2020 om 22:08 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Looks great, thanks @arjenmarkus <https://github.com/arjenmarkus>.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZGPFQNWV62M4QGT6LRRWONJANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-16 06:35:23+00:00",
                    "text": "@arjenmarkus Thank you for this manuscript. I really like the style.\nIt would be indeed easy to convert it to Markdown. We could help with the conversion when it will submitted to a PR."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-16 18:32:20+00:00",
                    "text": "Thanks - I am always a trifle uncertain about the precise formatting or the\ndialect. Of course, so far the formatting requirements are very basic - and\nI intend to keep it that way.\n\nRegards,\n\nArjen\n\nOp za 16 mei 2020 om 08:35 schreef Jeremie Vandenplas <\nnotifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> Thank you for this\n manuscript. I really like the style.\n It would be indeed easy to convert it to Markdown. We could help with the\n conversion when it will submitted to a PR.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRYQGAVJTKVTXMZHPMDRRYX3NANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-19 06:49:59+00:00",
                    "text": "Short update: I have almost completed the draft of the tutorial I have in\nmind. A rather tricky problem: make sure the _necessary_ details are\npresented in a clear and structured way. It is easy enough to structure the\ntext and it is easy enough to describe all the details. But the challenge\nis: only what is necessary in a structured way :).\n\nPutting in the Markdown formatting was not a big issue, butI will probably\nneed some assistance with the next step - the pull request.\n\nRegards,\n\nArjen\n\nOp za 16 mei 2020 om 20:32 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Thanks - I am always a trifle uncertain about the precise formatting or\n the dialect. Of course, so far the formatting requirements are very basic -\n and I intend to keep it that way.\n\n Regards,\n\n Arjen\n\n Op za 16 mei 2020 om 08:35 schreef Jeremie Vandenplas <\n ***@***.***>:\n\n> @arjenmarkus <https://github.com/arjenmarkus> Thank you for this\n> manuscript. I really like the style.\n> It would be indeed easy to convert it to Markdown. We could help with the\n> conversion when it will submitted to a PR.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#77 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YRYQGAVJTKVTXMZHPMDRRYX3NANCNFSM4NBUJL7Q>\n> .\n>"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-19 07:35:22+00:00",
                    "text": "Thanks for the update @arjenmarkus.\nRegarding the next step, I'm happy to provide guidance on putting together the PR or otherwise to submit the PR myself on your behalf."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 14:14:14+00:00",
                    "text": "Hi Laurence,\n\nokay, I have finished the draft, converted it to Markdown and I have cloned\nthe website on my machine. I can simply add the file in the subdirectory\n\"learn\", but I suppose I also need to add the header, like from the index:\n---\nlayout: page\ntitle: Quickstart Fortran\npermalink: /learn/\nnavbar: Learn\n---\nbut what to fill in?\n\nAlso: for now I have added a link to CC-BY, but is that the sort of license\nwe want to use for these mini-books? Or do we use LGPL or ...?\n\nRegards,\n\nArjen\n.\n\nOp di 19 mei 2020 om 09:35 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n Regarding the next step, I'm happy to provide guidance on putting together\n the PR or otherwise to submit the PR myself on your behalf.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR3FKPEDIEZ32WDH6R3RSIZETANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-22 14:28:35+00:00",
                    "text": "Hi @arjenmarkus,\nSounds good. Regarding the header, you only need to change the title field to the title of your tutorial\nand the permalink field to something like permalink: /learn/building_programs - this will cause the web address of your tutorial to be https://fortran-lang.org/learn/building_programs. The ending after /learn/ just needs to be a short descriptive string for your tutorial. The other fields (layout, navbar) can be kept the same as in the index file.\nI'm not sure if we are using a different license for the tutorial content - the website source is currently licensed under MIT, but it may be a good idea to license the tutorials under one of the CC-BY licenses. As the author and copyright holder, the licensing of the tutorial content is ultimately your choice - but it would be good to agree a license for all tutorial and similar content on fortran-lang.org. What are your thoughts @milancurcic and @certik ?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 14:30:18+00:00",
                    "text": "I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n\u2026\nOn Fri, May 22, 2020, at 8:14 AM, arjenmarkus wrote:\n\n\n  Hi Laurence,\n\n  okay, I have finished the draft, converted it to Markdown and I have cloned\n  the website on my machine. I can simply add the file in the subdirectory\n  \"learn\", but I suppose I also need to add the header, like from the index:\n  ---\n  layout: page\n  title: Quickstart Fortran\n  permalink: /learn/\n  navbar: Learn\n  ---\n  but what to fill in?\n\n  Also: for now I have added a link to CC-BY, but is that the sort of license\n  we want to use for these mini-books? Or do we use LGPL or ...?\n\n  Regards,\n\n  Arjen\n  .\n\n  Op di 19 mei 2020 om 09:35 schreef Laurence Kedward <\n  ***@***.***>:\n\n  > Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n  > Regarding the next step, I'm happy to provide guidance on putting\n together\n  > the PR or otherwise to submit the PR myself on your behalf.\n  >\n  > \u2014\n  > You are receiving this because you were mentioned.\n  > Reply to this email directly, view it on GitHub\n  >\n <#77 (comment)>,\n  > or unsubscribe\n  >\n <https://github.com/notifications/unsubscribe-auth/AAN6YR3FKPEDIEZ32WDH6R3RSIZETANCNFSM4NBUJL7Q>\n  > .\n  >\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWBIDBGGX23I6ZUPBZTRS2CELANCNFSM4NBUJL7Q>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-22 14:34:40+00:00",
                    "text": "I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n\nI agree with preferring consistency, but MIT is strictly a software license - I believe the general copyright equivalent is CC-BY which simply requires attribution like MIT."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 14:38:37+00:00",
                    "text": "I am not an expert on the CC licenses, I know some of them are not open source so we have to be very careful to pick the right one. What does Rust use for their documentation?\n\u2026\nOn Fri, May 22, 2020, at 8:34 AM, Laurence Kedward wrote:\n\n\n > I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n\n I agree with preferring consistency, but MIT is strictly a software\n license - I believe the general copyright equivalent is CC-BY which\n simply requires attribution like MIT.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAWTD7KUYWDJZRTMETRS2EQ5ANCNFSM4NBUJL7Q>."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 14:43:04+00:00",
                    "text": "P.S. I view documentation as code: it's written in Markdown, which literally is a source code that gets parsed and compiled to the final form, whether html or pdf. Also one can then copy and paste example code from the documentation into user projects without problem. So I've always used MIT for documentation.  But I am not opposed to other options.\n\u2026\nOn Fri, May 22, 2020, at 8:38 AM, Ond\u0159ej \u010cert\u00edk wrote:\n I am not an expert on the CC licenses, I know some of them are not open\n source so we have to be very careful to pick the right one. What does\n Rust use for their documentation?\n\n On Fri, May 22, 2020, at 8:34 AM, Laurence Kedward wrote:\n >\n >\n > > I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n >\n > I agree with preferring consistency, but MIT is strictly a software\n > license - I believe the general copyright equivalent is CC-BY which\n > simply requires attribution like MIT.\n >\n > \u2014\n > You are receiving this because you were mentioned.\n > Reply to this email directly, view it on GitHub\n > <#77 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAWTD7KUYWDJZRTMETRS2EQ5ANCNFSM4NBUJL7Q>.\n >"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-22 14:44:40+00:00",
                    "text": "I am not an expert on the CC licenses, I know some of them are not open source so we have to be very careful to pick the right one.\n\nAh okay, good point - I'm no expert either.\n\nWhat does Rust use for their documentation?\n\nIt appears to be under the same license as Rust itself which is MIT/Apache2.\n\nP.S. I view documentation as code: it's written in Markdown, which literally is a source code that gets parsed and compiled to the final form, whether html or pdf. Also one can then copy and paste example code from the documentation into user projects without problem. So I've always used MIT for documentation. But I am not opposed to other options.\n\nThis makes sense to me; I'm happy to keep with MIT for consistency then \ud83d\udc4d"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 16:54:59+00:00",
                    "text": "Hi everyone,\n\nno problem with me - as long as it is a permissive licence :). The MIT\nlicence should do fine and consistency is not unimportance.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 16:44 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n I am not an expert on the CC licenses, I know some of them are not open\n source so we have to be very careful to pick the right one.\n\n Ah okay, good point - I'm no expert either.\n\n What does Rust use for their documentation?\n\n It appears to be under the same license as Rust itself which is MIT/Apache2\n <https://github.com/rust-lang/book/blob/master/CONTRIBUTING.md#licensing>.\n\n P.S. I view documentation as code: it's written in Markdown, which\n literally is a source code that gets parsed and compiled to the final form,\n whether html or pdf. Also one can then copy and paste example code from the\n documentation into user projects without problem. So I've always used MIT\n for documentation. But I am not opposed to other options.\n\n This makes sense to me; I'm happy to keep with MIT for consistency then \ud83d\udc4d\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR7LVOJEL47USCHNI4DRS2FWNANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 18:02:20+00:00",
                    "text": "Ok then, let's stick to MIT then."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:03:19+00:00",
                    "text": "Hi everyone,\n\nI tried to view the new page as per the instructions via \"jekyll\", but I\ngot a lot of error messages:\n\n$ bundle exec jekyll serve --watch\nConfiguration file: none\n            Source: /cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn\n       Destination: /cygdrive/d/fortran/fortran-lang/\nfortran-lang.org/learn/_site\n Incremental build: disabled. Enable with --incremental\n      Generating...\n     Build Warning: Layout 'page' requested in best_practices.md does not\nexist.\n     Build Warning: Layout 'page' requested in building_programs.md does\nnot exist.\n  Liquid Exception: Could not locate the included file 'note.html' in any\nof [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\nEnsure it exists in one of those directories and, if it is a symlink, does\nnot point outside your site source. in index.md\njekyll 3.8.6 | Error:  Could not locate the included file 'note.html' in\nany of [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\nEnsure it exists in one of those directories and, if it is a symlink, does\nnot point outside your site source.\n\nI did a fresh install of Ruby, gems and bundle - there were some complaints\nabout old and deprecated packages, but nothing that seemed serious.\n\nThe file \"note.html\"  it is complaining about does actually exist in the\nsubdirectory _includes.\n\nFor your information: I installed Ruby and its packages on Cygwin.\n\nRegards,\n\nArjen\n\n\nOp vr 22 mei 2020 om 18:54 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi everyone,\n\n no problem with me - as long as it is a permissive licence :). The MIT\n licence should do fine and consistency is not unimportance.\n\n Regards,\n\n Arjen\n\n Op vr 22 mei 2020 om 16:44 schreef Laurence Kedward <\n ***@***.***>:\n\n> I am not an expert on the CC licenses, I know some of them are not open\n> source so we have to be very careful to pick the right one.\n>\n> Ah okay, good point - I'm no expert either.\n>\n> What does Rust use for their documentation?\n>\n> It appears to be under the same license as Rust itself which is\n> MIT/Apache2\n> <https://github.com/rust-lang/book/blob/master/CONTRIBUTING.md#licensing>\n> .\n>\n> P.S. I view documentation as code: it's written in Markdown, which\n> literally is a source code that gets parsed and compiled to the final form,\n> whether html or pdf. Also one can then copy and paste example code from the\n> documentation into user projects without problem. So I've always used MIT\n> for documentation. But I am not opposed to other options.\n>\n> This makes sense to me; I'm happy to keep with MIT for consistency then\n> \ud83d\udc4d\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#77 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR7LVOJEL47USCHNI4DRS2FWNANCNFSM4NBUJL7Q>\n> .\n>"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:06:27+00:00",
                    "text": "Oh, now I see the problem - it looks at \"learn/_includes\", not \"_includes\".\nHm.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 20:03 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi everyone,\n\n I tried to view the new page as per the instructions via \"jekyll\", but I\n got a lot of error messages:\n\n $ bundle exec jekyll serve --watch\n Configuration file: none\n             Source: /cygdrive/d/fortran/fortran-lang/\n fortran-lang.org/learn\n        Destination: /cygdrive/d/fortran/fortran-lang/\n fortran-lang.org/learn/_site\n  Incremental build: disabled. Enable with --incremental\n       Generating...\n      Build Warning: Layout 'page' requested in best_practices.md does not\n exist.\n      Build Warning: Layout 'page' requested in building_programs.md does\n not exist.\n   Liquid Exception: Could not locate the included file 'note.html' in any\n of [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\n Ensure it exists in one of those directories and, if it is a symlink, does\n not point outside your site source. in index.md\n jekyll 3.8.6 | Error:  Could not locate the included file 'note.html' in\n any of [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\n Ensure it exists in one of those directories and, if it is a symlink, does\n not point outside your site source.\n\n I did a fresh install of Ruby, gems and bundle - there were some\n complaints about old and deprecated packages, but nothing that seemed\n serious.\n\n The file \"note.html\"  it is complaining about does actually exist in the\n subdirectory _includes.\n\n For your information: I installed Ruby and its packages on Cygwin.\n\n Regards,\n\n Arjen\n\n\n Op vr 22 mei 2020 om 18:54 schreef Arjen Markus ***@***.***\n >:\n\n> Hi everyone,\n>\n> no problem with me - as long as it is a permissive licence :). The MIT\n> licence should do fine and consistency is not unimportance.\n>\n> Regards,\n>\n> Arjen\n>\n> Op vr 22 mei 2020 om 16:44 schreef Laurence Kedward <\n> ***@***.***>:\n>\n>> I am not an expert on the CC licenses, I know some of them are not open\n>> source so we have to be very careful to pick the right one.\n>>\n>> Ah okay, good point - I'm no expert either.\n>>\n>> What does Rust use for their documentation?\n>>\n>> It appears to be under the same license as Rust itself which is\n>> MIT/Apache2\n>> <https://github.com/rust-lang/book/blob/master/CONTRIBUTING.md#licensing>\n>> .\n>>\n>> P.S. I view documentation as code: it's written in Markdown, which\n>> literally is a source code that gets parsed and compiled to the final form,\n>> whether html or pdf. Also one can then copy and paste example code from the\n>> documentation into user projects without problem. So I've always used MIT\n>> for documentation. But I am not opposed to other options.\n>>\n>> This makes sense to me; I'm happy to keep with MIT for consistency then\n>> \ud83d\udc4d\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <#77 (comment)>,\n>> or unsubscribe\n>> <https://github.com/notifications/unsubscribe-auth/AAN6YR7LVOJEL47USCHNI4DRS2FWNANCNFSM4NBUJL7Q>\n>> .\n>>\n>"
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 18:14:55+00:00",
                    "text": "@arjenmarkus did you figure it out?\nI struggle with Jekyll too. See also #89."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 18:17:34+00:00",
                    "text": "@arjenmarkus we can also build a live preview from a pull request. Here's what you need to do:\n\nFork this repository\nClone your fork (not this repo), that would be https://github.com/arjenmarkus/fortran-lang.org\nAdd your content locally, commit it, then push to your repo on GitHub.\nWhen you navigate back to this repo, there will be a button suggesting you to open a pull request\nIn pull request dialog, check the box that says \"allow edits from reviewers\" (or similar).\n\nand we can make sure it previews correctly from there."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:35:39+00:00",
                    "text": "Hi everyone,\n\nthe problem was (apparently) that I started jekyll in the subdirectory\n\"learn\" rather than the root. Now it works fine, that is. under \"Learn\" I\nonly see the contents of \"index.md\". I f I specify the paths\nlearn/best_practices and learn/build_programs I can see those pages. So,\naccessing those pages is not entirely correct yet.\n\nWell, with that solved and after a look at the page I will now proceed with\nthe pull request :).\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 20:17 schreef Milan Curcic <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> we can also build a live\n preview from a pull request. Here's what you need to do:\n\n    1. Fork this repository\n    2. Clone your fork (not this repo), that would be\n    https://github.com/arjenmarkus/fortran-lang.org\n    3. Add your content locally, commit it, then push to your repo on\n    GitHub.\n    4. When you navigate back to this repo, there will be a button\n    suggesting you to open a pull request\n    5. In pull request dialog, check the box that says \"allow edits from\n    reviewers\" (or similar).\n\n and we can make sure it previews correctly from there.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR3XFBTIN6XBKRGXSPDRS26UXANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:56:08+00:00",
                    "text": "Hi Milan, everyone,\n\nI have now cloned the repository and created a branch\n\"building_programs\". The pull request is there.\n\nThe repository is public, so I guess you can see it and submit your\ncomments etc. I hope I did all that correctly :).\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 20:17 schreef Milan Curcic <notifications@github.com>:\n\u2026\n\n @arjenmarkus we can also build a live preview from a pull request. Here's what you need to do:\n\n Fork this repository\n Clone your fork (not this repo), that would be https://github.com/arjenmarkus/fortran-lang.org\n Add your content locally, commit it, then push to your repo on GitHub.\n When you navigate back to this repo, there will be a button suggesting you to open a pull request\n In pull request dialog, check the box that says \"allow edits from reviewers\" (or similar).\n\n and we can make sure it previews correctly from there.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub, or unsubscribe."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 19:06:32+00:00",
                    "text": "Almost there. It looks like you created a pull request in your own repository (arjenmarkus/fortran-lang.org).\nInstead, create a pull request in this repository (fortran-lang/fortran-lang.org) by navigating to its home page and clicking on the \"New pull request\" button.\nI don't know if this matters, but I also see that your fortran-lang.org repository doesn't appear as a fork. Did you create it by clicking the \"Fork\" button on this repository?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 19:12:11+00:00",
                    "text": "Hi Milan,\n\nI thought I had created a fork. Hm, let me redo that. (It does not seem\npossible to create a pull request based on the one I just created).\nHopefully I will get it right this time.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 21:06 schreef Milan Curcic <notifications@github.com>:\n\u2026\n Almost there. It looks like you created a pull request in your own\n repository (arjenmarkus/fortran-lang.org).\n\n Instead, create a pull request in this repository\n <https://github.com/fortran-lang/fortran-lang.org> (fortran-lang/\n fortran-lang.org) by navigating to its home page and clicking on the \"New\n pull request\" button.\n\n I don't know if this matters, but I also see that your fortran-lang.org\n repository doesn't appear as a fork. Did you create it by clicking the\n \"Fork\" button on this repository?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR662YRNGPREGQIAOGLRS3EMNANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 19:26:46+00:00",
                    "text": "No, I had created a repository in my personal space and imported the\nfortran-lang.org repository. What I should have done is go to the home page\nof fortran-lang.org and use the \"Fork\" option from there. Well, hopefully\nit is all right now :). I think this will be the last e-mail from me for\ntoday.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 21:11 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi Milan,\n\n I thought I had created a fork. Hm, let me redo that. (It does not seem\n possible to create a pull request based on the one I just created).\n Hopefully I will get it right this time.\n\n Regards,\n\n Arjen\n\n Op vr 22 mei 2020 om 21:06 schreef Milan Curcic ***@***.***\n >:\n\n> Almost there. It looks like you created a pull request in your own\n> repository (arjenmarkus/fortran-lang.org).\n>\n> Instead, create a pull request in this repository\n> <https://github.com/fortran-lang/fortran-lang.org> (fortran-lang/\n> fortran-lang.org) by navigating to its home page and clicking on the\n> \"New pull request\" button.\n>\n> I don't know if this matters, but I also see that your fortran-lang.org\n> repository doesn't appear as a fork. Did you create it by clicking the\n> \"Fork\" button on this repository?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#77 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR662YRNGPREGQIAOGLRS3EMNANCNFSM4NBUJL7Q>\n> .\n>"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 19:41:31+00:00",
                    "text": "@arjenmarkus Yes, that worked! Thank you! I will review it in detail over the weekend."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-18 12:58:04+00:00",
                    "text": "Closing, completed by #99."
                }
            ]
        },
        {
            "number": 76,
            "user": "certik",
            "date": "2020-05-14 22:36:54+00:00",
            "title": "Add the MESA code",
            "text": "I first heard about it here:\nhttps://news.ycombinator.com/item?id=23160114",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-15 07:36:39+00:00",
                    "text": "This code looks impressive: last release in March 2020, it uses modern Fortran with OpenMP and it has an informative website! This should definitely be listed!\nyaml entry looks good to me \ud83d\udc4d"
                },
                {
                    "user": "certik",
                    "date": "2020-05-15 18:25:20+00:00",
                    "text": "@LKedward yes, exactly. There might be a few more codes like this out there.\nAs discussed before, I think this code is not something that is probably super easy to use in other projects. However, I want it in to proudly show that Fortran is still used in actively maintained codes as the main language and for the community to see this and to perhaps learn some stuff how they do, and they can learn some stuff from other such projects."
                }
            ]
        },
        {
            "number": 75,
            "user": "certik",
            "date": "2020-05-14 20:24:44+00:00",
            "title": "Change the name to HPE / Cray",
            "text": "",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-14 20:30:10+00:00",
                    "text": "I think @longb mentioned on the call that they still use Cray for software products. Should we rather call this \"Cray (HPE)\". That way it's clear that it's what people know as Cray, while still acknowledging the parent company. Bill, how would you word this?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-14 20:39:43+00:00",
                    "text": "Otherwise, it's fine with me. My earlier comment is a super minor nit pick. We can always improve it later."
                },
                {
                    "user": "certik",
                    "date": "2020-05-14 20:41:23+00:00",
                    "text": "I am going to merge it, and if Bill suggests a different wording, we'll change it.\nI plan to contact each company anyway to approve the wording for their compiler, I just didn't have time yet."
                },
                {
                    "user": "longb",
                    "date": "2020-05-14 20:43:20+00:00",
                    "text": "On May 14, 2020, at 3:30 PM, Milan Curcic ***@***.***> wrote:\n\n\n I think @longb mentioned on the call that they still use Cray for software products.\nCorrect. As the page correctly indicates, the old HP compiler is not longer being maintained.  The Cray compilers are being ported to the more modern HPE hardware, such as Apollo.\n Should we rather call this \"Cray (HPE)\". That way it's clear that it's what people know as Cray, while still acknowledging the parent company. Bill, how would you word this?\nI\u2019ll ask the manager in the know.  At least for Fortran, everyone still thinks of it as the \u201cCray compiler\u201d.    However, \u201cCray\u201d by itself (as a company) probably needs qualification.\n\nCheers,\nBill\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub, or unsubscribe.\n\nBill Long                                                                       longb@cray.com\nPrincipal Engineer, Fortran Technical Support &   voice:  651-605-9024\nBioinformatics Software Development                      fax:  651-605-9143\nCray, a Hewlett Packard Enterprise company/ 2131 Lindau Lane/  Suite 1000/  Bloomington, MN  55425"
                }
            ]
        },
        {
            "number": 74,
            "user": "p-costa",
            "date": "2020-05-13 20:55:13+00:00",
            "title": "nitpicking :)",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-13 21:17:11+00:00",
                    "text": "Thanks for noticing and fixing it @p-costa."
                }
            ]
        },
        {
            "number": 73,
            "user": "LKedward",
            "date": "2020-05-13 11:15:33+00:00",
            "title": "Fix LAPACK package entry",
            "text": "The github entry should be:\nReference-LAPACK/lapack\nand license is BSD 3-Clause.",
            "comments": []
        },
        {
            "number": 72,
            "user": "certik",
            "date": "2020-05-12 23:03:34+00:00",
            "title": "Add a category \"contains Fortran\"",
            "text": "We should add a new category:\n\nCodes that contain some Fortran code, but Fortran is not the primary development language (either has never been, or is not anymore) as judged from the latest commits in the last few years. It does not matter in terms of lines if the Fortran code is a majority or minority.\n\nWhat this category will show is what projects depend on Fortran, even if only as \"clients\". All those projects will benefit from any improvement we will do for the Fortran ecosystem, even if indirectly.\nHere I found libraries that fit exactly into this category:\n\nhttps://github.com/scipy/scipy\nhttps://github.com/xianyi/OpenBLAS\n\nAnd I think many of these fit there also (they all have Fortran code inside, but I suspect Fortran is not the primary development language):\n\nhttps://github.com/keflavich/plfit\nhttps://github.com/kthyng/tracpy\nhttps://github.com/dfm/python-fsps\nhttps://github.com/sonofeft/RocketCEA\nhttps://github.com/pvthinker/Fluid2d\nhttps://github.com/stfc/PSyclone\nhttps://github.com/mancellin/capytaine\n\nI am sure there are many more such projects.",
            "comments": []
        },
        {
            "number": 71,
            "user": "certik",
            "date": "2020-05-12 22:44:25+00:00",
            "title": "Remove OpenBLAS",
            "text": "The package does not satisfy our criteria, in particular:\nRelevance\n\nthe package must be primarily implemented in Fortran\nor provide a complete Fortran interface to an existing package\nor be purposed solely towards software development in Fortran.\n\nNone of these apply. They do not provide a Fortran interface to another\npackage, and OpenBLAS is not purposed solely towards software\ndevelopment in Fortran. Regarding the first bullet point, the package is\nprimarily developed in assembly, all new code is in assembly. Fortran is\nnot the primary implementation language, despite technically having more\nlines than their implementation language (assembly).\nThey have a lot of Fortran code (in fact the majority of lines) because\nthey have several copies of LAPACK. They keep applying fixes from\nreference LAPACK (which is already included in our index, so we should\nnot be including it twice). OpenBLAS is in the same category as SciPy.\nThey copied a mature Fortran project / code, but use a different\nlanguage to further develop the package (assembly and Python\nrespectively). In the SciPy's case, the Python code now has more lines\nthan Fortran, in OpenBLAS case the assembly code does not yet have more\nlines, but eventually it will.\nUniqueness\n\nthe package shall not be a fork or minor revision of existing packages\n\nAs far as Fortran is concerned, this package is just a fork of LAPACK.\nThere is no new Fortran code that isn't in LAPACK that other projects\ncould use.\n\nWe can think (see #72) if we should have categories for projects that happen to\nhave Fortran code included, even it is not further developed. OpenBLAS\nand SciPy would be two major libraries to include there. Until then, we\nshould remove OpenBLAS from our listing.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 23:10:11+00:00",
                    "text": "Indeed OpenBLAS doesn't expose Fortran bindings to its capability. I had assumed it did, but never checked. Fortran code is truly just a dependency here. If we made Fortran bindings to say, libcurl, which would then be a dependency, we wouldn't call the bindings a C project.\nI agree with removing it."
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 23:13:03+00:00",
                    "text": "I think OpenBLAS is be exposing its functionality into Fortran using the Lapack interface. But it would be like we took libcurl, and rewrote some internal subroutines into Fortran, and only used Fortran to keep improving over libcurl --- that would not be a C project anymore."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 23:24:02+00:00",
                    "text": "I didn't get that impression from the documentation. They expose a C interface to Fortran code. They don't expose a Fortran interface to their C and Assembly code."
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 23:32:37+00:00",
                    "text": "Yes, I think we are both saying the same thing.\n\nFurthermore even if they exposed Fortran code to their assembly, it wouldn't make it a Fortran project.\n\u2026\nOn Tue, May 12, 2020, at 5:24 PM, Milan Curcic wrote:\n\n\n I didn't get that impression from the documentation\n <https://github.com/xianyi/OpenBLAS/wiki/User-Manual>. They expose a C\n interface to Fortran code. They don't expose a Fortran interface to\n their C and Assembly code.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#71 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWB6RT7THWFLUL7DACDRRHLB5ANCNFSM4M7HMK5A>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 23:37:10+00:00",
                    "text": "Furthermore even if they exposed Fortran code to their assembly, it wouldn't make it a Fortran project.\n\nIt wouldn't be strictly a \"Fortran project\", but it would qualify to list it in the registry because:\n\nor provide a complete Fortran interface to an existing package\n\nIf OpenBLAS had Fortran bindings to its unique value (that is not reference BLAS and LAPACK), it would be very important to include it."
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 00:47:18+00:00",
                    "text": "I see, so it would be in the interfaces section.\n\nI need to check, maybe they provide an interface.\n\nThe interfaces is a special section.\n\nFor me the main value of our Packages section is to show and promote codes that are actively developed in Fortran, to show the Fortran community that there are open source codes out there and to connect us together. And to show some success stories to motivate us.\n\nThe interfaces section is a secondary goal for me, those are useful to have and use obviously. But I don't view these as Fortran codes, although they would obviously be packaged by fpm later on.\nSort of like the issue #72 which I think is also very useful to have. But these are not Fortran packages in my understanding of the word.\n\u2026\nOn Tue, May 12, 2020, at 5:37 PM, Milan Curcic wrote:\n\n\n > Furthermore even if they exposed Fortran code to their assembly, it wouldn't make it a Fortran project.\n\n It wouldn't be strictly a \"Fortran project\", but it would qualify to\n list it in the registry because:\n\n > or provide a complete Fortran interface to an existing package\n\n If OpenBLAS had Fortran bindings to its unique value (over reference\n BLAS and LAPACK), it would be very important to include it.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#71 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWE3UJDY6AE6A2FGAF3RRHMTFANCNFSM4M7HMK5A>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-13 11:10:41+00:00",
                    "text": "I agree that according to our criteria, unless OpenBLAS contains explicit Fortran interfaces, it should not be listed.\n\nFor me the main value of our Packages section is to show and promote codes that are actively developed in Fortran, to show the Fortran community that there are open source codes out there and to connect us together. And to show some success stories to motivate us. The interfaces section is a secondary goal for me, those are useful to have and use obviously. But I don't view these as Fortran codes, although they would obviously be packaged by fpm later on. Sort of like the issue #72 which I think is also very useful to have.\n\nI have a different view of the Packages section: it is already well-accepted that many large applications (mainly scientific) are actively developed in Fortran. What is less accepted is that Fortran is a suitable language and has a sufficient ecosystem for developing new codes.\nThe Packages section shows off the large offering of Fortran libraries that are available to support code development - this is because someone looking to develop in Fortran will interested in what libraries already exist to make their life easier. As part of this, the interfaces category is absolutely essential.\nTo summarise my view:\n\n\nThe existence of large scientific codes already written in Fortran is unlikely to heavily influence someone to choose Fortran for their new project (unless they want to link against them);\n\n\nRather, the ecosystem (libraries, tools and community) are much more of an influencing factor;\n\n\nIn the absence of an online package registry, the packages section serves this purpose.\n\n\n\nBut these are not Fortran packages in my understanding of the word.\n\nIf they contain c-binding interfaces written in Fortran, then I consider them Fortran regardless of whether they implement functionality or not. (Creating a c-binding module can be a lot work)"
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 13:36:59+00:00",
                    "text": "OpenBLAS can be used from Fortran easily just like any other LAPACK implementation. I've done it.\n\nIt doesn't contain modern Fortran interfaces for linear algebra like we are creating in stdlib, but it nevertheless works from Fortran.\n\nSo I would say it qualifies for the interfaces section. It's a package that you can use from Fortran.\n\nGood points. It looks like the purpose of the Package section is twofold. In the broader sense to show what packages are readily available to use in Fortran. And in the narrower sense to show that Fortran is used to develop new open source code. Everything except interfaces qualifies for the second point.\n\u2026\nOn Wed, May 13, 2020, at 5:10 AM, Laurence Kedward wrote:\n\n\n I agree that according to our criteria, unless OpenBLAS contains\n explicit Fortran interfaces, it should not be listed.\n\n > For me the main value of our Packages section is to show and promote codes that are actively developed in Fortran, to show the Fortran community that there are open source codes out there and to connect us together. And to show some success stories to motivate us. The interfaces section is a secondary goal for me, those are useful to have and use obviously. But I don't view these as Fortran codes, although they would obviously be packaged by fpm later on. Sort of like the issue #72 <#72> which I think is also very useful to have.\n\n *I have a different view of the Packages section:* it is already\n well-accepted that many large applications (mainly scientific) are\n actively developed in Fortran. What is less accepted is that Fortran is\n a suitable language and has a sufficient ecosystem for *developing new\n codes*.\n  The Packages section shows off the large offering of Fortran libraries\n that are available to support code development - this is because\n someone looking to develop in Fortran will interested in what libraries\n already exist to make their life easier. As part of this, the\n interfaces category is absolutely essential.\n\n To summarise my view:\n\n  * The existence of large scientific codes already written in Fortran\n is unlikely to heavily influence someone to choose Fortran for their\n new project (unless they want to link against them);\n\n  * Rather, the ecosystem (libraries, tools and community) are much more\n of an influencing factor;\n\n  * In the absence of an online package registry, the packages section\n serves this purpose.\n\n > But these are not Fortran packages in my understanding of the word.\n\n If they contain c-binding interfaces written in Fortran, then I\n consider them Fortran regardless of whether they implement\n functionality or not. (Creating a c-binding module can be a lot work)\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#71 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWCHGOVZAYOWKCSFQJTRRJ54BANCNFSM4M7HMK5A>."
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 14:32:38+00:00",
                    "text": "So I think I vote to move OpenBLAS to interfaces.\nThis is unlike SciPy, as SciPy cannot directly be used in Fortran, while OpenBLAS can."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-13 15:12:56+00:00",
                    "text": "Okay, if that's the case, I'm okay with keeping it in \"Interfaces\". I am still concerned that I couldn't find OpenBLAS documentation on Fortran bindings, and I had assumed that if you're just calling Fortran LAPACK included OpenBLAS, you're not gaining anything over reference LAPACK. But I trust @certik and if he says that OpenBLAS has a meaningful and useful Fortran binding, I'm okay with it.\nI want to also caution about the \"Interfaces\" category. If you looked at our existing categories, you'll see that \"Interfaces\" is the only category that says \"how something works\" rather than \"what it does\".\nSimilar to @LKedward, for me by far the main purpose of this page is for new developers to be able to find the tool they need for their Fortran work. Not so much for us to prove there are pure Fortran packages out there, or to be proud of it. That too is important, but is secondary to me.\nIn that sense, when a newcomer to Fortran arrives to the packages page, the \"Interfaces\" category is the only one that doesn't really tell them what's in there, only that the packages in there are bindings to other languages. However, I don't think this category is necessarily harmful, and is okay to keep it."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-13 15:23:59+00:00",
                    "text": "So I think I vote to move OpenBLAS to interfaces.\n\nOkay I see your point here, we should keep it.\n\nI am still concerned that I couldn't find OpenBLAS documentation on Fortran bindings, and I had assumed that if you're just calling Fortran LAPACK included OpenBLAS, you're not gaining anything over reference LAPACK.\n\nMy understanding is that all the LAPACK interfaces are purely explicit (explicit shape etc.) so they don't need explicit Fortran interfaces to be visible to the calling code.\n(Presumably because LAPACK predates the iso c binding)\nAs to OpenBLAS usefulness, I only ever use OpenBLAS because it is significantly faster than the reference LAPACK."
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 16:24:51+00:00",
                    "text": "As @LKedward said, OpenBLAS does not provide new functionality (as far as I know), but the main purpose of it is that it provides a drop in replacement for LAPACK that is much faster, as in, one of the fastest out there. It's a great library.\nYes, LAPACK predates iso_c_binding, and OpenBLAS just follows what LAPACK does. The tradition there is to just provide the symbols and hope that they work (but they do in practice, even if I don't recommend to do that for new projects).\nSo let's put it into into interfaces.\nI think we are in agreement --- for you and @LKedward the main purpose is to list packages that are useful for Fortran developers to use. For me that is part of it. But equally important for me is to leverage our community and connect us to each other and to show what is out there, and showing how Fortran can be used --- because I think we absolutely have to prove that Fortran can be used for new projects and for new developments. That Fortran is not just for wrapping other languages and for legacy codes."
                },
                {
                    "user": "certik",
                    "date": "2020-05-14 21:21:03+00:00",
                    "text": "I am going back and forth on this. Maybe OpenBLAS can stay where it currently is, right next to LAPACK:\nhttps://fortran-lang.org/packages/numerical\nThey both provide the same functionality, both can readily be used from Fortran, and OpenBLAS provides a much faster implementation.\nI viewed the Package list as packages written in Fortran, but since both of you @milancurcic and @LKedward see it as packages that can be directly used from Fortran, then we don't care what the primary implementation language is.\nI would say that OpenBLAS satisfies this bullet point:\n\nor provide a complete Fortran interface to an existing package\n\nSince it provides the complete Fortran interface to their very fast (assembly+Fortran) implementation of LAPACK. As discussed, the interface is not iso_c_binding interface, but it's the old fashioned LAPACK interface. However it works.\nSo I am going to close this PR, I think OpenBLAS can stay where it is. And our understanding of the Packages section then must be: any package that can be used from Fortran right away."
                }
            ]
        },
        {
            "number": 70,
            "user": "certik",
            "date": "2020-05-12 22:24:18+00:00",
            "title": "Change categories for fgsl and SciFortran",
            "text": "They are both SciPy like libraries, and so should belong into\n\"numerical\". The Scientific Codes category I think should be reserved\nfor more of end user applications or physics solvers, not purely\nnumerical libraries.",
            "comments": []
        },
        {
            "number": 69,
            "user": "certik",
            "date": "2020-05-12 20:09:59+00:00",
            "title": "Arpack: fix version and license",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 20:28:48+00:00",
                    "text": "Weird, the website now says version not found, but there are releases for Arpack."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 20:38:55+00:00",
                    "text": "Weird, the website now says version not found, but there are releases for Arpack.\n\nNot sure why this is happening - I'll look into it."
                }
            ]
        },
        {
            "number": 68,
            "user": "certik",
            "date": "2020-05-12 19:51:28+00:00",
            "title": "Add packages from List-of-popular-open-source-Fortran-projects",
            "text": "Go over:\nhttps://github.com/fortran-lang/stdlib/wiki/List-of-popular-open-source-Fortran-projects\nand add the rest of the packages.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-12 20:19:44+00:00",
                    "text": "OpenBLAS\n fortran-machine\n LAPACK\n ElmerFEM\n WRF\n fds\n functional-fortran\n Quantum ESPRESSO\n fluidity\n fortranlib\n json-fortran\n Nek5000\n cp2k\n fortran2018-examples\n NASTRAN-95\n specfem3d (https://github.com/geodynamics/specfem3d)\n NWChem (#148)\n gtk-fortran\n CFL3D (https://github.com/nasa/CFL3D)\n fortran-utils\n SHTOOLS\n OpenCoarrays\n arpack-ng\n DFTB+ (#143)\n NASTRAN-93 (https://github.com/nasa/NASTRAN-93)\n MPAS (https://github.com/MPAS-Dev/MPAS-Model)\n neural-fortran\n NetCDF-Fortran\n CTSM (https://github.com/ESCOMP/CTSM)\n Castro\n ABINIT\n FLAP\n bspline-fortran\n FOODIE\n forpy\n OFF\nWAVEWATCH III (https://github.com/NOAA-EMC/WW3) no open source license\n MOM6 (https://github.com/NOAA-GFDL/MOM6)\n VTKFortran\n datetime-fortran\n node-fortran (https://github.com/IonicaBizau/node-fortran)\n Fortran-Astrodynamics-Toolkit (https://github.com/jacobwilliams/Fortran-Astrodynamics-Toolkit)\n pyplot-fortran\nStarlink (https://github.com/jacobwilliams/pyplot-fortran) license unknown\nWPS (https://github.com/wrf-model/WPS) license unknown\n ogpf\n pFUnit\n tcp-client-server\n ftl\n fgsl\nOpenCMISS (https://github.com/OpenCMISS/cm) license unknown\n StringiFor\nwrf_hydro_nwm_public (https://github.com/NCAR/wrf_hydro_nwm_public) license unclear\n SciFortran\n bandup (https://github.com/band-unfolding/bandup)\n LaGriT\n stdlib\n clfortran\n fox\n HANDE-QMC (#153)\n FEconv\n lesgo (https://github.com/lesgo-jhu/lesgo)\n FortranPatterns\nFV3-GFS (https://github.com/NOAA-EMC/fv3gfs) no open source license\n coretran\n tsunami (https://github.com/modern-fortran/tsunami)\n fdict\nCFD (https://github.com/liruipengyu/CFD) no open source license\n ICAR (https://github.com/NCAR/icar)\nMODFLOW6 (https://github.com/MODFLOW-USGS/modflow6) no open source license\nPIC Skeleton Codes (https://github.com/UCLA-Plasma-Simulation-Group/PIC-skeleton-codes) no open source license\nIAMR (https://github.com/AMReX-Codes/IAMR) license unclear\n ADflow\n PoisFFT (#153)\nsigma (https://github.com/danshapero/sigma) no open source license\n aenet (https://github.com/atomisticnet/aenet)\n DBCSR\n GALAHAD\n node.fortran (https://github.com/IonicaBizau/node.fortran)\n h5fortran\n kdtree2\n numerical-methods-fortran\n TRACMASS (https://github.com/TRACMASS/tracmass)\n CompDam (https://github.com/nasa/CompDam_DGD)\n Flexi (https://github.com/flexi-framework/flexi)\nGFR (https://github.com/nasa/GFR) no open source license\n OpenSWPC (https://github.com/tktmyd/OpenSWPC)\nROMS (https://github.com/kshedstrom/roms) no open source license\n slsqp\n Truchas\n fortran-csv-module\n FMS (https://github.com/NOAA-GFDL/FMS)\n SNAP (https://github.com/lanl/SNAP)\n freeCappuccino"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 20:43:23+00:00",
                    "text": "Looks like there are 35 packages left. I had a quick look, but non is really in my field of expertise, so putting together useful tags would be difficult.\nI think this could be a good opportunity for contributions, I will tag it with help-wanted good-first-issue to make it more visible."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 21:09:43+00:00",
                    "text": "Thank you @awvwgk for your help with this. For volunteers who submit PRs for the remaining packages, don't be afraid to guess the relevant tags. We will do our best in the PR review. And if the upstream authors of the packages become interested in the future, they can always submit a PR to improve their entry."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 19:06:57+00:00",
                    "text": "I went through all the packages and opened #186 to add them to the package index. I removed projects by strikeout from the above list where I was unable to identify if the project is free open source software, this assessment might be incorrect for some projects (marked with unclear license), so feel free to double check those projects."
                }
            ]
        },
        {
            "number": 67,
            "user": "certik",
            "date": "2020-05-12 19:47:54+00:00",
            "title": "Packages: add Quantum ESPRESSO",
            "text": "",
            "comments": []
        },
        {
            "number": 66,
            "user": "certik",
            "date": "2020-05-12 19:46:37+00:00",
            "title": "Packages: add Castro",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 19:57:56+00:00",
                    "text": "@LKedward what does version: none do? I added the actual version instead."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 20:01:05+00:00",
                    "text": "@LKedward what does version: none do? I added the actual version instead.\n\nIt hides the version badge - otherwise it shows an error if it can't find a github version.\nI've just realised this repo does have github realises so you don't need the version field, my mistake.\nIt will look like this:\n\n(https://img.shields.io/github/v/release/AMReX-Astro/Castro?color=green)"
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 20:05:56+00:00",
                    "text": "@LKedward I see, thanks for the info and the reviews."
                }
            ]
        },
        {
            "number": 65,
            "user": "certik",
            "date": "2020-05-12 19:37:59+00:00",
            "title": "Packages: add ABINIT",
            "text": "",
            "comments": []
        },
        {
            "number": 64,
            "user": "certik",
            "date": "2020-05-12 19:31:19+00:00",
            "title": "Add a CI",
            "text": "When a new PR is submitted a CI should run to check that the website can be built. This is especially critical for new package submissions to ensure the yaml is properly formatted.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-18 12:59:07+00:00",
                    "text": "Another task for the CI is to check for broken links (both internal and external)."
                }
            ]
        },
        {
            "number": 63,
            "user": "certik",
            "date": "2020-05-12 19:24:14+00:00",
            "title": "Packages: add dftatom",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 19:50:41+00:00",
                    "text": "When I click on Merge, nothing happens. That's ridiculous. I'll try again later."
                }
            ]
        },
        {
            "number": 62,
            "user": "certik",
            "date": "2020-05-12 19:16:25+00:00",
            "title": "Packages: add Truchas",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 19:22:41+00:00",
                    "text": "@nncarlson can you please review this?"
                },
                {
                    "user": "nncarlson",
                    "date": "2020-05-12 22:00:20+00:00",
                    "text": "Good to me, though I'm not sure about the \"version 3.0\" bit.  That's the the last official tarball we rolled, but it's very old and no one should use it.  Everyone works off the master branch version.  I've done a bad job of managing versioning (help @certik :-)."
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 22:14:05+00:00",
                    "text": "Ok, I removed the version. I am going to merge it now. Thanks @nncarlson for reviewing. Yes, we need to fix the Truchas's release process."
                }
            ]
        },
        {
            "number": 61,
            "user": "milancurcic",
            "date": "2020-05-12 18:21:15+00:00",
            "title": "add f03gl and PLplot",
            "text": "Submitting 2 graphics libraries to the registry. I couldn't find the PR template for this. Do we have any?",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:36:39+00:00",
                    "text": "Submitting 2 graphics libraries to the registry. I couldn't find the PR template for this. Do we have any?\n\nNo PR template yet"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:38:48+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-12 18:39:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/61/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:40:30+00:00",
                    "text": "Preview doesn't seem to work."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:42:12+00:00",
                    "text": "Preview doesn't seem to work.\n\nWorking for me:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:44:27+00:00",
                    "text": "It does for me as well now."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:46:54+00:00",
                    "text": "Regarding versions: f03gl indeed didn't have a version and we don't want to show a version none badge. However, PLplot does (5.15.0, I forgot to include it). Why wouldn't we show version for non-GH projects that have one?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:48:21+00:00",
                    "text": "Sorry I didn't mean for all non-github repos, just those without explicit versions"
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 18:50:49+00:00",
                    "text": "Here is what we have to go over: https://github.com/fortran-lang/fortran-lang.org/blob/8f74576faef57a6da975195ffda8da85402b1ba9/PACKAGES.md"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:52:02+00:00",
                    "text": "@certik I did, feel free to check it as well."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:52:40+00:00",
                    "text": "Here is what we have to go over: https://github.com/fortran-lang/fortran-lang.org/blob/8f74576faef57a6da975195ffda8da85402b1ba9/PACKAGES.md\n\nI'm happy these packages meet all the criteria discussed \ud83d\udc4d"
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 18:55:19+00:00",
                    "text": "Have you tried installing the packages and do they work? I haven't checked the \"Maturity\" section.\nI am hoping that fpm will help with libraries like these, to make them easy to install, part of the wide Fortran ecosystem and also have usage statistic at the registry webpage, and so on.\nI am fine adding them."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 19:02:08+00:00",
                    "text": "Have you tried installing the packages and do they work? I haven't checked the \"Maturity\" section.\n\nYes for f03gl, no for PLplot.\nHave you looked at PLplot? This may be among the most mature libraries in the registry (contributions go back to 1992): https://www.openhub.net/p/plplot/contributors/summary"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 19:02:38+00:00",
                    "text": "Thank you both, merging."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 19:02:57+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-12 19:03:24+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 60,
            "user": "LKedward",
            "date": "2020-05-07 17:04:04+00:00",
            "title": "Fix: preview build action checkout.",
            "text": "",
            "comments": []
        },
        {
            "number": 59,
            "user": "LKedward",
            "date": "2020-05-07 16:58:43+00:00",
            "title": "Fix: preview build action.",
            "text": "",
            "comments": []
        },
        {
            "number": 58,
            "user": "LKedward",
            "date": "2020-05-07 16:55:14+00:00",
            "title": "Fix: preview action PR checkout.",
            "text": "Checkout the PR ref manually.",
            "comments": []
        },
        {
            "number": 57,
            "user": "LKedward",
            "date": "2020-05-07 16:02:28+00:00",
            "title": "Fix: pr preview action.",
            "text": "Checkout pull request head and fix comment action.",
            "comments": []
        },
        {
            "number": 56,
            "user": "LKedward",
            "date": "2020-05-07 15:48:48+00:00",
            "title": "Change PR preview trigger to comment.",
            "text": "PR preview builds are triggered by a pull request\ncomment containing '#build_preview'.",
            "comments": []
        },
        {
            "number": 55,
            "user": "LKedward",
            "date": "2020-05-07 14:54:35+00:00",
            "title": "Fix: minor typo on compilers page.",
            "text": "This small PR will test PR preview functionality.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:51:03+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 16:04:03+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 16:05:17+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 16:37:01+00:00",
                    "text": "@LKedward thanks for setting it up! Note that it does not seem to work, the PR link shows the website with the word \"Discountinued\", which you fixed in this PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 16:39:38+00:00",
                    "text": "Hmm, seems to me like it works--both link here and link on the preview website."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 16:41:18+00:00",
                    "text": "@LKedward thanks for setting it up! Note that it does not seem to work, the PR link shows the website with the word \"Discountinued\", which you fixed in this PR.\n\nYep you are right - the action is not checking out the right commit, currently looking for a solution."
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 16:42:39+00:00",
                    "text": "@milancurcic it does not work for me, see the screenshot:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 16:43:13+00:00",
                    "text": "Got it, nevermind, I totally misunderstood."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 16:56:49+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 17:00:11+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 17:05:56+00:00",
                    "text": "this is the one...\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 17:06:56+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 17:14:52+00:00",
                    "text": "Okay, I think this is finally working!\n@milancurcic and @certik apologies for the large number of notifications you have probably received in the last hour!\nLast thing to test is that both of you can also trigger a build by commenting '#build_preview'."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 17:15:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 17:22:02+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 17:23:10+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 17:27:44+00:00",
                    "text": "I think it's working! Thanks for fixing it @LKedward."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-10 16:40:33+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-10 16:40:55+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 54,
            "user": "LKedward",
            "date": "2020-05-07 12:09:48+00:00",
            "title": "Reapply \"Github actions build & PR preview\" PR",
            "text": "This PR is identical to #46 which was reverted.\n@milancurcic when the repo has been renamed and is serving from 'gh-pages', then this PR can be re-merged.\nResolves #41.\n#no_preview",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-07 14:40:26+00:00",
                    "text": "@milancurcic it looks like it's serving from the previously-built gh-pages branch now which is good.\nIf we merge this, the action should rebuild the site with your latest changes."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:41:32+00:00",
                    "text": "Yes, but I think we need to rebase+merge, no? Edit: Actually, I may be wrong."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:44:56+00:00",
                    "text": "Website looks good and up to date. Great work @LKedward !"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 14:46:48+00:00",
                    "text": "Yep github action completed succesfully \ud83d\udc4d\nCheers @milancurcic !"
                }
            ]
        },
        {
            "number": 53,
            "user": "milancurcic",
            "date": "2020-05-06 00:22:33+00:00",
            "title": "52 add discourse badge",
            "text": "This PR:\n\nAdds Discourse badge and link to the landing page and the sidebar in News and Compilers pages;\nRemoves Stack Exchange reference on the landing page (rationale: I think it's now redundant if we want to have these questions on the Discourse)\nMinor clean up of the mailing list description\n\nFixes #52",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-06 03:27:47+00:00",
                    "text": "+1 to merge, looks good!\n\u2026\nOn Tue, May 5, 2020, at 6:22 PM, Milan Curcic wrote:\n This PR:\n\n  * Adds Discourse badge and link to the landing page and the sidebar in\n News and Compilers pages;\n  * Removes Stack Exchange reference on the landing page (rationale: I\n think it's now redundant if we want to have these questions on the\n Discourse)\n  * Minor clean up of the mailing list description\n Fixes #52\n <#52>\n\n You can view, comment on, or merge this pull request online at:\n\n #53\n\n Commit Summary\n\n  * add discourse badge to landing page and sidebar\n  * remove Stack Exchange pointer from landing page\n  * trim the mailing list description a bit\n File Changes\n\n  * *A* _includes/discourse.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-7e8162ce65434463728971b6d879dc8b> (5)\n  * *M* _includes/mailing_list.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-2bbfd89da94f9b32b63605742d481452> (4)\n  * *M* _includes/news_sidebar.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-29c04d30d4ad9d8bf45e8fafd5608ab2> (2)\n  * *A* assets/img/discourse.png\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-4c3ad1e15c7e2781bffa97b865406994> (0)\n  * *M* index.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-eacf331f0ffc35d4b482f1d15a887d3b> (6)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/53.patch\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/53.diff\n \u2014\n You are receiving this because your review was requested.\n Reply to this email directly, view it on GitHub\n <#53>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWE4QX3TQGY3FJPZBQTRQCUVLANCNFSM4M2AOI3A>."
                }
            ]
        },
        {
            "number": 52,
            "user": "milancurcic",
            "date": "2020-05-05 20:46:30+00:00",
            "title": "Add Discourse badge to the landing page",
            "text": "We now have a Discourse instance. Please join and try it out.\nThe website should have a hyperlinked Discourse badge that would allow people who visit the site to discover Discourse. We have an obvious place for this, where we list the mailing list, Twitter, and so on.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-05 20:52:27+00:00",
                    "text": "Thanks for setting it up. For inspiration, here is how Rust and Julia do discourse:\nhttps://users.rust-lang.org/\nhttps://discourse.julialang.org/"
                }
            ]
        },
        {
            "number": 51,
            "user": "milancurcic",
            "date": "2020-05-03 18:13:42+00:00",
            "title": "Revert \"Github actions build & PR preview\"",
            "text": "Reverts #46",
            "comments": []
        },
        {
            "number": 50,
            "user": "certik",
            "date": "2020-05-03 14:14:59+00:00",
            "title": "Contact each compiler vendor to update their text",
            "text": "Here is the list of all Fortran compilers:\nhttps://fortran-lang.org/compilers/\nFor now I just copied the text from their official websites. We should now contact each vendor and see if they would prefer to change the text that appears at the webpage for their compiler. Perhaps they would like to stress that they have free versions for open source, or such.\nWe should limit the text to 100 words, to be fair to everyone. Currently all the texts at the webpage fit into 100 words and that seems like the right size to give enough background for each compiler but not be too long.",
            "comments": [
                {
                    "user": "phil-blain",
                    "date": "2020-12-31 22:48:59+00:00",
                    "text": "My 2 cents: if the text comes from the vendor, it should be styled as a citation on the website, so as not to look like the website authors \"sell\" one compiler better than the other :)"
                }
            ]
        },
        {
            "number": 49,
            "user": "certik",
            "date": "2020-05-03 00:15:34+00:00",
            "title": "Make the scope of the mailinglist broader",
            "text": "If you have even better way to word this, go ahead and provide suggestions.\nI want the mailing list to be a place where people can have a general discussion, announcements and other things. Not just to passively receive the latest news (Twitter is much better for that, and we already have a Twitter account).",
            "comments": []
        },
        {
            "number": 48,
            "user": "milancurcic",
            "date": "2020-05-02 19:39:35+00:00",
            "title": "47 mailing list",
            "text": "Adds the mailing list to the landing page and news sidebar.\nIt also makes a few minor imporovements such as add RSS feed to the news sidebar, and adds a heading to the Twitter component for consistency.\nFixes #47",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-02 19:49:21+00:00",
                    "text": "Thanks! With Laurence's approval, I'll go ahead and merge. @certik if there are any issues we'll follow-up in another PR."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 00:20:08+00:00",
                    "text": "See #49."
                }
            ]
        },
        {
            "number": 47,
            "user": "milancurcic",
            "date": "2020-05-02 18:12:38+00:00",
            "title": "Mailing list",
            "text": "Thank you @certik for starting the fortran-lang mailinglist.\nFor everybody else, please see Group Email Addresses on that page for details.\nSpecifically, we should have a subscription link on the website.\nI think a good place is on the landing page in the \"Join us\" section, such that we have, in this order:\n\nSubscribe to the mailing list\nFollow us on Twitter\nContribute on GitHub\nAsk about usage on Stack Exchange\n\nIn addition, it should also be in the sidebar on the news page\n@certik @LKedward Let me know what you think and I can follow up with a PR.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-02 19:14:31+00:00",
                    "text": "I think that looks good. Can you submit a PR? Let's get it done, then we can refine later."
                }
            ]
        },
        {
            "number": 46,
            "user": "LKedward",
            "date": "2020-05-02 15:56:48+00:00",
            "title": "Github actions build & PR preview",
            "text": "This PR aims to resolve #41.\nThe approach here is to use github actions to explicitly build the site on push as opposed to the automatic github Jekyll build used currently; this action builds the site using Jekyll on the master branch and pushes to the 'gh-pages' branch. (Repo settings will therefore need to be changed by admin here to point to 'gh-pages' branch).\nAdditional actions are added for pull requests which are built and pushed to the 'gh-pages' branch under the path 'pr/<pr_number>'; therefore pull requests can be previewed at fortran-lang.org/pr/46/ for example.\nTo enable the 'pr/<pr_number>' sub-path, the site source has been updated such that all internal site links and references are prepended with {{site.baseurl}}, see here for explanation.\nI'm not an expert on github actions so if anyone has more experience and feedback then let me know!\nThis has been tested on a private repo, but I'm not sure if any extra steps are required for this organisation repo.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-02 15:59:31+00:00",
                    "text": "Thanks for this! Yes, that's exactly what we need. How do I test it out?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-02 16:05:57+00:00",
                    "text": "... How do I test it out?\n\nI'm going to see if I can merge into the master of my fork and demonstrate a working build and PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-02 17:08:26+00:00",
                    "text": "Thank you @LKedward! Once you nail down the workflow, please document each step from a developer's point of view, either in a \"How to contribute\" section in README.md, or in CONTRIBUTING.md. I also don't know how this works."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-02 17:23:47+00:00",
                    "text": "Thank you @LKedward! Once you nail down the workflow, please document each step from a developer's point of view, either in a \"How to contribute\" section in README.md, or in CONTRIBUTING.md. I also don't know how this works.\n\nAh yes good point, I'll make sure to document this."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 09:41:43+00:00",
                    "text": "To test this out I have merged into my personal fork:\n\n\nThis is the site built using this github action:\nhttps://lkedward.github.io/fortran-lang.github.io/\n\n\nThis is a pull request preview built with this github action:\nhttps://lkedward.github.io/fortran-lang.github.io/pr/3/\n\nfor this pull request:  LKedward#3\n\n\n\nThe rendered site files (for both the normal site and for PRs) are pushed to the 'gh-pages' orphan branch https://github.com/LKedward/fortran-lang.github.io/tree/gh-pages.\nBefore this can be merged, a 'gh-pages' branch needs to be created in this main repository by an admin as an orphan branch"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 16:01:40+00:00",
                    "text": "Sounds good, I'll go ahead and create the orphan branch."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 16:14:24+00:00",
                    "text": "@milancurcic if you have time to set this up, please go ahead! I am quite busy today."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 17:55:26+00:00",
                    "text": "@LKedward done. Is this PR ready to merge?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:01:49+00:00",
                    "text": "@LKedward done. Is this PR ready to merge?\n\nCheers @milancurcic, yep I'm happy with it - ready to merge!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 18:06:02+00:00",
                    "text": "Okay, just merged. Do we now need to have a dummy PR to trigger the build? Notice that the site is currently broken."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:09:18+00:00",
                    "text": "Okay, just merged. Do we now need to have a dummy PR to trigger the build? Notice that the site is currently broken.\n\nNo, it's been built and pushed okay.\nCan you check in the repo settings that the github pages are pointing to 'gh-pages' branch.\nLike this:"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:12:34+00:00",
                    "text": "Oh no, I think we can't use the gh-pages branch on github.io repos!\nI didn't take this into account here. I think we need to revert since I can't think a solution atm."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 18:12:50+00:00",
                    "text": "I just realized it too:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 18:16:23+00:00",
                    "text": "Okay I just reverted this PR.\nRegarding a possible solution, could we:\n\nRename this repository so that it's not a user page, for example fortran-lang-website or similar;\nSet it up to serve from gh-pages"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:34:19+00:00",
                    "text": "Okay I just reverted this PR.\n\nThanks.\nOkay it looks like we have to do 1 but keep this repo:\nSo the current repo contents is moved to a separate repository and the github actions push the built html to this repository.\nIt's a bit of an upheaval unfortunately."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:48:33+00:00",
                    "text": "It's a bit of an upheaval unfortunately.\n\nBy this I just mean that all contributors will have to checkout a different repository.\nRegarding the github action workflows I've put together here: there is very little that needs changing, I only need to change the repository that it pushes to."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 21:08:38+00:00",
                    "text": "That was a mistake of using a repo and serving it directly. A better approach is to have a repository with the sources, and the CI then builds the page from master and pushes it somewhere else to be served.\nSecond, the name of this repository fortran-lang.github.io is misleading anyway because it is actually serves at fortran-lang.org. So how about we rename this repository to fortran-lang.org, to keep all the history, stars, issues, etc.\nThen we create a new repository that would actually serve fortran-lang.org. So that it is not confusing, perhaps it can be called fortran-lang.org.deploy or something like that.\nAnd then setup a CI at fortran-lang.org that checks each PR (it builds it and pushes somewhere to be looked at, not at fortran-lang.org), and then every master will get built and pushed into fortran-lang.org.deploy to be served at fortran-lang.org."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 21:12:44+00:00",
                    "text": "Now when I think about it, let's just keep https://github.com/fortran-lang/fortran-lang.github.io as is, if GitHub allows it, but it will become the source repository. The fortran-lang.org domain will be served from the new repository, say fortran-lang.org.deploy. The same setup from my previous comment, but we don't need to rename this repository, so people don't need to update their setup."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 21:24:12+00:00",
                    "text": "That was a mistake of using a repo and serving it directly. A better approach is to have a repository with the sources, and the CI then builds the page from master and pushes it somewhere else to be served.\n\nI disagree here, this approach, of using the 'gh-pages' branch is quite standard for so-called project sites, see here. Unfortunately I didn't realise github doesn't allow this approach for so-called organisation sites. (I can see no actual reason why it is disallowed here)\n\nSecond, the name of this repository fortran-lang.github.io is misleading anyway because it is actually serves at fortran-lang.org. So how about we rename this repository to fortran-lang.org, to keep all the history, stars, issues, etc.\nThen we create a new repository that would actually serve fortran-lang.org. So that it is not confusing, perhaps it can be called fortran-lang.org.deploy or something like that.\nAnd then setup a CI at fortran-lang.org that checks each PR (it builds it and pushes somewhere to be looked at, not at fortran-lang.org), and then every master will get built and pushed into fortran-lang.org.deploy to be served at fortran-lang.org.\n\nWe have to keep the rendered html at fortran-lang.github.io since this is a so-called organisation site which serves the site at https://<organization>.github.io. If we use any other repository it will not be an organisation site but simply a project site which is not served at the site root but under https://<organization>.github.io/<repository>.\nSee here for full explanation:\nhttps://help.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites\nMy proposition is similarly based on a two repository approach, but the unbuilt source (current repo contents) is moved to a new repository and fortran-lang.github.io is used for deployment via CI for the reasons mentioned above.\nUnfortunately as I said, and as you point out, it is an upheaval meaning stars, issues etc are effectively lost."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 21:27:04+00:00",
                    "text": "That was a mistake of using a repo and serving it directly.\n\nNo, I did it on purpose as an org page so that repository pages like stdlib automatically inherit the top-level domain.\nI'm okay with either approach. For the site in production repository name, just fortran-lang.org is my preference."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 21:28:00+00:00",
                    "text": "To lay out my proposed solution more formally:\n\n\nRename existing fortran-lang.github.io repo to fortran-lang-source\n(We get to keep stars, issues, history, etc)\n\n\nCreate new fortran-lang.github.io repo\n\n\nUpdate pull request CI to deploy to master on new fortran-lang.github.io"
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 21:30:36+00:00",
                    "text": "@LKedward that's fine, this will work.\nNote that I routinely deploy from a deploy repository, e.g. https://www.theoretical-physics.com/, is served by https://github.com/certik/tfc-deploy and pushed into it from the https://gitlab.com/certik/theoretical-physics/ source repository. But perhaps it's different if we are part of an organization? I don't know."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 21:36:38+00:00",
                    "text": "The only reason the original workflow didn't work here is because github allows the workflow for project sites but not for organisation/user sites. (I had the workflow working in my fork, but because it was a fork it was a project site not an organisation site.)"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 21:53:36+00:00",
                    "text": "We don't have to use an organization page. I chose that because of 2 benefits:\n\nYou don't need to maintain a production repo (the one being served), it's done automatically and under the hood by GitHub;\nProject pages inherit top-level domain.\n\nI don't think there are any other advantages. The obvious downside is that you can't do what we're now trying to do here, and we want to do it.\nIf the repo is called <orgname>.github.io and you chose to serve a page from it, then it's an org page (and ditto for <username>).\nHowever, this doesn't mean that fortran-lang.github.io (this repo) must be an org page. If you disable serving in the settings, it's not a page anymore.\nThere's a number of solutions here that preserve repo metadata (stars, issues, etc.).\nMy favorite actually is to:\n\nRename this repo so it's not an org page (preserves metadata);\nDeploy to gh-pages branch.\n\nBut deploying to master of another repo is okay too. It just seems like unnecessary added complexity of carrying a separate repo for deployment."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 21:56:39+00:00",
                    "text": "We have to keep the rendered html at fortran-lang.github.io since this is a so-called organisation site which serves the site at https://.github.io. If we use any other repository it will not be an organisation site but simply a project site which is not served at the site root but under https://<organization>.github.io/<repository>.\n\n@LKedward I don't think this matters at all because GitHub will redirect https://<organization>.github.io/<repository> to fortran-lang.org anyway. Am I wrong?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 22:30:45+00:00",
                    "text": "It's a clean approach to just have a repository with the sources. But I am fine either way.\n\nWhat do you mean by inherit top level domain? I think one can always serve to subdomains such as docs.fortran-lang.org with different repositories.\n\u2026\nOn Sun, May 3, 2020, at 3:53 PM, Milan Curcic wrote:\n\n\n We don't have to use an organization page. I chose that because of 2 benefits:\n\n  1. You don't need to maintain a production repo (the one being\n served), it's done automatically and under the hood by GitHub;\n  2. Project pages inherit top-level domain.\n I don't think there are any other advantages. The obvious downside is\n that you can't do what we're now trying to do here, and we want to do\n it.\n\n If the repo is called .github.io *and* you chose to serve a page from\n it, then it's an org page (and ditto for ).\n\n However, this doesn't mean that fortran-lang.github.io (this repo) must\n be an org page. If you disable serving in the settings, it's not a page\n anymore.\n\n There's a number of solutions here that preserve repo metadata (stars,\n issues, etc.).\n\n My favorite actually is to:\n\n  1. Rename this repo so it's not an org page (preserves metadata);\n  2. Deploy to gh-pages branch.\n But deploying to master of another repo is okay too. It just seems like\n unnecessary added complexity of carrying a separate repo for deployment.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#46 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWHGDBV5AFWVF5CU4WTRPXRWZANCNFSM4MXXO3AQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 22:37:53+00:00",
                    "text": "What do you mean by inherit top level domain?  I think one can always serve to subdomains such as docs.fortran-lang.org with different repositories.\n\nExample: https://fortran-lang.org/stdlib/. That page is served from the fortran-lang/stdlib repo. It's just a convenience feature, nothing major.\nYes, we can easily serve other project pages as subdomains, it's just a matter of adding a CNAME record.\nI defer the choice of final implementation for this to you and Laurence. What matters to me is that we have automatic previews and preserve metadata, for both of which it looks like we have solutions."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 22:41:35+00:00",
                    "text": "I see. I think we should not use this master domain feature. Rather, I would serve the whole webpage as a single generated page from a single repo. I feel that's cleaner. We can still pull out docs from other repos.\n\u2026\nOn Sun, May 3, 2020, at 4:38 PM, Milan Curcic wrote:\n\n\n > What do you mean by inherit top level domain? I think one can always serve to subdomains such as docs.fortran-lang.org with different repositories.\n\n Example: https://fortran-lang.org/stdlib/. That page is served from the\n fortran-lang/stdlib repo. It's just a convenience feature, nothing\n major.\n\n Yes, we can easily serve other project pages as subdomains, it's just a\n matter of adding a CNAME record.\n\n I defer the choice of final implementation for this to you and\n Laurence. What matters to me is that we have automatic previews and\n preserve metadata, for both of which it looks like we have solutions.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#46 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWBHYTPCQZ7VVOBLII3RPXW4ZANCNFSM4MXXO3AQ>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-04 07:58:28+00:00",
                    "text": "@LKedward I don't think this matters at all because GitHub will redirect https://<organization>.github.io/<repository> to fortran-lang.org anyway. Am I wrong?\n\nAh okay, yep you are right here.\n\nMy favorite actually is to:\n\nRename this repo so it's not an org page (preserves metadata);\nDeploy to gh-pages branch.\n\n\nI agree this is by far the simplest and least-disruptive solution.\nWe get to keep metadata and this pull request can be merged as is.\nDoes anyone know how this will affect existing forks?\nUpdate: I've never renamed a repository before but it seems github is very accommodating to renaming repositories: the original repository url will redirect all web traffic and git operations to the new one (assuming we don't create another fortran-lang.github.io repo) so there aren't really any disadvantages to this approach!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 12:10:12+00:00",
                    "text": "I've reopened this PR in #54 for when the repo has been renamed.\nI think fortran-lang.org makes sense as a repo name, what do you think?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 12:41:15+00:00",
                    "text": "I agree. @certik what do you think?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 12:49:38+00:00",
                    "text": "Yes.\n\u2026\nOn Thu, May 7, 2020, at 6:41 AM, Milan Curcic wrote:\n\n\n I agree. @certik <https://github.com/certik> what do you think?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#46 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWDVAQYBOWH3NYIFG2DRQKT7TANCNFSM4MXXO3AQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:35:07+00:00",
                    "text": "Okay, I'm gonna rename the repo now."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:40:32+00:00",
                    "text": "The rename seems like it worked. The website had about 1 minute of downtime while I was applying the custom domain in the settings. It is now served from gh-pages. I think we can now move forward and merge #54"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 14:41:27+00:00",
                    "text": "Sounds good!"
                }
            ]
        },
        {
            "number": 45,
            "user": "certik",
            "date": "2020-04-30 22:36:50+00:00",
            "title": "Add the rest of the Fortran compilers",
            "text": "Every compiler from the following pages should now be listed (either\nactive or discontinued):\nhttps://en.wikipedia.org/wiki/List_of_compilers#Fortran_compilers\nhttp://fortranwiki.org/fortran/show/Compilers\nhttps://fortran.bcs.org/2017/fortran_2003_2008_compiler_support.pdf",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 22:48:04+00:00",
                    "text": "Available now at https://fortran-lang.org/compilers/\nWe are now in a pretty good shape. Turns out there are still 12 commercial compilers that seem maintained (some more than others). That's impressive."
                }
            ]
        },
        {
            "number": 44,
            "user": "certik",
            "date": "2020-04-30 16:01:13+00:00",
            "title": "Make the favicon F white inside",
            "text": "Currently this is how the https://fortran-lang.org/ page looks in a Tab that is not active:\n\nThe F is really hard to read. We should make the F inside the purple box white. That way it should be nicely visible.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 16:02:05+00:00",
                    "text": "It's this file that has to be fixed: https://github.com/fortran-lang/fortran-lang.github.io/blob/837383d01152ff8fdf5412228fca6bee8c09781f/favicon.ico"
                },
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-30 16:13:28+00:00",
                    "text": "Can do! Actually I thought I did make it white... Maybe it is transparent."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:22:43+00:00",
                    "text": "Thanks @jacobwilliams. I thought you did too, but for some reason it still is transparent on the website. Not sure where the problem is."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-30 16:28:37+00:00",
                    "text": "@certik could your browser be caching the old icon?\nIt doesn't appear transparent here: https://fortran-lang.org/favicon.ico"
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:31:06+00:00",
                    "text": "@LKedward I don't know. Can you send a screenshot how it looks like in an inactive Tab for you?\nI would like the corners to be transparent, but the F inside to be white. Here is how  https://fortran-lang.org/favicon.ico looks in my Firefox on Ubuntu:\n\nIt has white inside, but also around the corners. The corners should be transparent."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-30 16:35:16+00:00",
                    "text": ""
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:35:26+00:00",
                    "text": "Ok, maybe it is cached. Here is how the fortran-lang.org tab looks like now:\nInactive:\n\nActive:\n\nIn both cases, the corners are transparent and the F is white, as I would like it.\nSo maybe it's already fixed and it was just my browser that cached the old icon? I don't know what I did differently. I tested both Firefox and Chrome in Ubuntu 18.04 and it seems to work now.\nCan others confirm that what they see is exactly what I posted in this comment?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 14:12:06+00:00",
                    "text": "I am going to close this. I think it is fixed."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-05-03 17:57:01+00:00",
                    "text": "Just noticed this issue now. After clicking \"Clear recent history\" in my browser and marking the cache checkbox, the favicon is displayed correctly. \ud83d\udc4d"
                }
            ]
        },
        {
            "number": 43,
            "user": "LKedward",
            "date": "2020-04-30 10:12:32+00:00",
            "title": "Update: packages footer with instructions link.",
            "text": "After #26 is merged, this will update the link at the bottom of\nthe packages pages to point to PACKAGES.md which details the criteria and\nprocess for getting a project listed in the index.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 15:52:28+00:00",
                    "text": "Looks great, thanks!"
                }
            ]
        },
        {
            "number": 42,
            "user": "certik",
            "date": "2020-04-25 16:25:13+00:00",
            "title": "Make all urls clickable links",
            "text": "",
            "comments": []
        },
        {
            "number": 41,
            "user": "certik",
            "date": "2020-04-25 16:08:21+00:00",
            "title": "Create a Preview for each PR",
            "text": "Right now we have to test a PR locally that it works. Our CI should create a preview of each PR, so that we can simply see it right away. Typically that is achieved by pushing the PR into some review github pages as a branch with a url prefix so each PR has its own prefix and we can check that the page looks good.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-03 21:17:04+00:00",
                    "text": "We had to revert the fix, so I am reopening the issue also."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:02:31+00:00",
                    "text": "I think this needs re-opening unfortunately,\nTest PR #55 failed to push the preview build to the repo.\nThere's a permissions problem."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 15:10:31+00:00",
                    "text": "I don't see any failure in that link. What kind of permission is needed?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:17:42+00:00",
                    "text": "I don't see any failure in that link.\n\nYeah it's a bit annoying, the marketplace action for pushing to the repo completes successfully even if the push failed.\nLook under  > Commit and push to gh-pages /  > Internal logs.\nIt seems the github action for pull requests from forks only has read-only access.\nI think a solution can be to have the preview build triggered explicitly when someone with write access comments #build_pr or something. I will look into this."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 15:24:01+00:00",
                    "text": "If we add you as collaborator with permissions on this repo, would you know how to set it up?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:27:37+00:00",
                    "text": "If we add you as collaborator with permissions on this repo, would you know how to set it up?\n\nYes I believe so"
                }
            ]
        },
        {
            "number": 40,
            "user": "LKedward",
            "date": "2020-04-25 09:24:37+00:00",
            "title": "Fix: navbar highlighting and sign-posting",
            "text": "Fixes #39\nCompilers and Learn section are now highlighting correctly.\nThe newsletters have been switched to using the 'post' layout so that 'News' is highlighted in the navbar.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-25 16:06:21+00:00",
                    "text": "I checked locally, it looks good. Thanks!"
                }
            ]
        },
        {
            "number": 39,
            "user": "LKedward",
            "date": "2020-04-25 09:21:33+00:00",
            "title": "Navbar highlighting not working consistently",
            "text": "Highlighting the current site section in the Navbar is currently only working for the packages pages.",
            "comments": []
        },
        {
            "number": 38,
            "user": "LKedward",
            "date": "2020-04-25 09:11:31+00:00",
            "title": "News sidebar displays recent news.",
            "text": "Copied the news format from the top-level index.html\nto _includes/news_sidebar.html so that it shows recent\nnews titles.",
            "comments": []
        },
        {
            "number": 37,
            "user": "LKedward",
            "date": "2020-04-25 09:01:32+00:00",
            "title": "Add: gemfile.lock to repository.",
            "text": "Fixes #17.",
            "comments": []
        },
        {
            "number": 36,
            "user": "LKedward",
            "date": "2020-04-25 08:58:32+00:00",
            "title": "Update: news page to show more posts",
            "text": "Fixes #35.\nNews page shows last five posts; first post is shown in full.\nArchive page formatting updated to group posts.\nNav bar highlighting fixed for news pages.",
            "comments": []
        },
        {
            "number": 35,
            "user": "certik",
            "date": "2020-04-24 21:27:37+00:00",
            "title": "The NEWS page only shows the latest news item",
            "text": "This should list all the news, not just the latest:\nhttps://fortran-lang.org/news/",
            "comments": []
        },
        {
            "number": 34,
            "user": "certik",
            "date": "2020-04-24 21:23:56+00:00",
            "title": "Show authors",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:58:16+00:00",
                    "text": "I need this to show online already (I am sending a link to it to my management). I am going to merge it. @milancurcic and others --- if you are against this change, I am happy to revert it. Let me know."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 21:59:41+00:00",
                    "text": "It's perfect, I'm glad you moved it forward."
                }
            ]
        },
        {
            "number": 33,
            "user": "certik",
            "date": "2020-04-24 21:12:40+00:00",
            "title": "Use better formatting of headers",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:13:10+00:00",
                    "text": "This makes it look much better. I am just going to merge it."
                }
            ]
        },
        {
            "number": 32,
            "user": "certik",
            "date": "2020-04-24 21:00:25+00:00",
            "title": "Installation instructions fail",
            "text": "Even after the fix in #31 they fail:\n$ bundle install --path .bundle\n[DEPRECATED] The `--path` flag is deprecated because it relies on being remembered across bundler invocations, which bundler will no longer do in future versions. Instead please use `bundle config set path '.bundle'`, and stop using this flag\nFetching gem metadata from https://rubygems.org/...........\nFetching gem metadata from https://rubygems.org/.\nResolving dependencies...\nFetching public_suffix 4.0.4\nInstalling public_suffix 4.0.4\nFetching addressable 2.7.0\nInstalling addressable 2.7.0\nUsing bundler 2.1.4\nFetching colorator 1.1.0\nInstalling colorator 1.1.0\nFetching concurrent-ruby 1.1.6\nInstalling concurrent-ruby 1.1.6\nFetching eventmachine 1.2.7\nInstalling eventmachine 1.2.7 with native extensions\nGem::Ext::BuildError: ERROR: Failed to build gem native extension.\n\ncurrent directory:\n/home/ondrej/repos/fortran-lang.github.io/.bundle/ruby/2.5.0/gems/eventmachine-1.2.7/ext\n/usr/bin/ruby2.5 -r ./siteconf20200424-23119-fxep5g.rb extconf.rb\nmkmf.rb can't find header files for ruby at /usr/lib/ruby/include/ruby.h\n\nextconf failed, exit code 1\n\nGem files will remain installed in\n/home/ondrej/repos/fortran-lang.github.io/.bundle/ruby/2.5.0/gems/eventmachine-1.2.7\nfor inspection.\nResults logged to\n/home/ondrej/repos/fortran-lang.github.io/.bundle/ruby/2.5.0/extensions/x86_64-linux/2.5.0/eventmachine-1.2.7/gem_make.out\n\nAn error occurred while installing eventmachine (1.2.7), and Bundler\ncannot continue.\nMake sure that `gem install eventmachine -v '1.2.7' --source\n'https://rubygems.org/'` succeeds before bundling.\n\nIn Gemfile:\n  jekyll was resolved to 3.8.6, which depends on\n    em-websocket was resolved to 0.5.1, which depends on\n      eventmachine\n\nI am using Ubuntu 18.04.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-04-24 21:02:21+00:00",
                    "text": "I think you need to install ruby-dev package.\nThis should be added to the README."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 21:03:27+00:00",
                    "text": "I figured it out: fc3a958"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 21:03:52+00:00",
                    "text": "@LKedward you are right. I figured it out right as you posted it."
                }
            ]
        },
        {
            "number": 31,
            "user": "certik",
            "date": "2020-04-24 20:59:53+00:00",
            "title": "Fix installation instructions",
            "text": "Fixes #32.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:28:24+00:00",
                    "text": "I am just going to merge this simple fix to get things done. If there are any objections, I can wait longer next time."
                }
            ]
        },
        {
            "number": 30,
            "user": "certik",
            "date": "2020-04-24 20:53:14+00:00",
            "title": "Meeting fixes",
            "text": "This was meant to be part of #29.",
            "comments": []
        },
        {
            "number": 29,
            "user": "certik",
            "date": "2020-04-24 20:41:26+00:00",
            "title": "NEWS: Summarize the February J3 meeting",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 20:55:43+00:00",
                    "text": "So this looks really ugly:\nhttps://fortran-lang.org/newsletter/2020/02/28/J3-february-meeting/\nPlease do not advertise this."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 21:33:22+00:00",
                    "text": "I fixed it up in #30 and #33. Looks much better now. But it still needs #34. Then I am happy."
                }
            ]
        },
        {
            "number": 28,
            "user": "milancurcic",
            "date": "2020-04-24 20:29:57+00:00",
            "title": "Should we list g95 in open source compilers?",
            "text": "http://g95.org/\nI'm torn. :)\nOn one side, I used this compiler briefly over 10 years ago and it's dear to me. \"It's free crunch time\" is an awesome tagline. Despite what its name implies, this compiler supports coarrays out of the box, at least to some capacity. Its status page has a long list of packages that work with g95.\nOn the other side, it looks like the project is not developed any more. The most recent update on the site that I can find is from 2013.",
            "comments": [
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-24 20:46:17+00:00",
                    "text": "I would say no. It\u2019s defunct. I know people still use it but people still use g77 too. Best not to encourage that."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 20:50:21+00:00",
                    "text": "Indeed. From looking at the source, it seems that g95 was meant to be included as the Fortran frontend of GCC. I guess it continued as its own project once gfortran was released."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 20:50:41+00:00",
                    "text": "I vote no. I would only list actively maintained compilers. Otherwise we have to list every old F77 and other commercial compilers. Every old compiler can be used in principle. But the purpose of the page is to list compilers that are maintained today.\nIf, however, somebody forks g95 and starts maintaining it again, then we can list it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-27 19:48:06+00:00",
                    "text": "The opinion is unanimous on this one, so I will close it."
                }
            ]
        },
        {
            "number": 27,
            "user": "certik",
            "date": "2020-04-24 19:30:09+00:00",
            "title": "Add more commercial Fortran compilers",
            "text": "And describe each of them using their own words as copied from their\nwebsites.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 20:06:57+00:00",
                    "text": "I merged it. Now the compiler page looks decent, and we can keep improving it with further PRs."
                }
            ]
        },
        {
            "number": 26,
            "user": "LKedward",
            "date": "2020-04-24 19:15:16+00:00",
            "title": "Start document for detailing package index guidelines.",
            "text": "@milancurcic and @certik I think this covers everything we discussed in #20 ?",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 15:51:10+00:00",
                    "text": "Let's merge this. People approved it and we can refine as we go later if needed."
                }
            ]
        },
        {
            "number": 25,
            "user": "certik",
            "date": "2020-04-24 19:02:51+00:00",
            "title": "Reorder open source compilers",
            "text": "I think the order now roughly reflects the maturity, community size and\nmind-share in that order.\nAs the author of LFortran, I approve this change.",
            "comments": []
        },
        {
            "number": 24,
            "user": "gklimowicz",
            "date": "2020-04-24 18:32:28+00:00",
            "title": "Suggest some tweaks for Ond\u0159ej.",
            "text": "@certik I've written some proposed changes for F18 and current Flang.\nThis seemed like the easiest way to suggest the wording change.\nLet me know if you would like something else.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 18:57:31+00:00",
                    "text": "Thank you @gklimowicz, I appreciate it. This is perfect, and if you are ok with the wording, then so are we."
                }
            ]
        },
        {
            "number": 23,
            "user": "gklimowicz",
            "date": "2020-04-24 18:20:36+00:00",
            "title": "Suggest some tweaks for Ond\u0159ej.",
            "text": "Hi, @certik. I thought I would go through the exercise of generating a pull request with some tweaks to the language about current Flang and f18 for the compilers.md page.\nLet me know what you think and we can perhaps iterate on a change.",
            "comments": [
                {
                    "user": "gklimowicz",
                    "date": "2020-04-24 18:22:32+00:00",
                    "text": "Whoops. Link is wrong."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 18:23:36+00:00",
                    "text": "Perfect, thank you. Ping me once it is ready."
                }
            ]
        },
        {
            "number": 22,
            "user": "LKedward",
            "date": "2020-04-24 18:06:08+00:00",
            "title": "Add package: p-costa/CaNS",
            "text": "Fixes #21",
            "comments": []
        },
        {
            "number": 21,
            "user": "p-costa",
            "date": "2020-04-24 16:46:03+00:00",
            "title": "addition to the list scientific codes",
            "text": "would it be possible to add CaNS to the list of scientific codes?\nthe repo on github: https://github.com/p-costa/CaNS",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-04-24 16:50:57+00:00",
                    "text": "This code looks good, I don't think there'll be an opposition to adding it.\nAre you happy with the following entry:\nname: Canonical Navier Stokes (CaNS)\ndescription: A code for fast, massively-parallel direct numerical simulations (DNS) of canonical flows\nLicense: MIT\n\nCan you suggest some tags to use for indexing?\nDo you have a version number or plan to release a version on github?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:54:11+00:00",
                    "text": "@p-costa very nice project!\n@LKedward @certik we should design a PR template with a checklist for these submissions."
                },
                {
                    "user": "p-costa",
                    "date": "2020-04-24 16:59:18+00:00",
                    "text": "Thanks @LKedward :). The description is perfect. I would just change the name to just name: CaNS.\nIn terms of tags, I can suggest those of the GitHub repo:\nfluid-dynamics\nfluid-simulation\ncomputational-fluid-dynamics\nturbulence\nhigh-performance-computing\ncfd\nI do not have a release version on GitHub, and I was not planning to have it for the being; hope that is fine!"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:10:42+00:00",
                    "text": "@p-costa thanks! We missed this project I think in our initial list.\nWe are still figuring out the detailed criteria in #20, but I think you are satisfying them, so you have my +1."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 17:11:48+00:00",
                    "text": "Cheers @p-costa, that's great! Will put together the PR."
                }
            ]
        },
        {
            "number": 20,
            "user": "certik",
            "date": "2020-04-24 16:28:48+00:00",
            "title": "Write down criteria how to include a package",
            "text": "We should also setup criteria how to include a package there --- right now the criterion I think was at least 29 stars at GitHub and Fortran as the majority language (as determined by GitHub). I would be for lowering the number of stars, for example if we lower to 15, then one of my other 100% Fortran project would qualify: https://github.com/certik/hfsolver :), what is nice about this one is that it has all kinds of very good computational routines that could be useful for others. But if we lower the number of stars, then I want to do it in a systematic way, I want to see every single GitHub project included. I think we achieved it with the > 29 stars.",
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-04-24 16:43:27+00:00",
                    "text": "Yes I think we need criteria - however having now been through a large list of projects I don't find number of stars to be a very good indicator of project quality or utility.\nI find they are much more like social media 'likes' and, as I think you've mentioned @certik, they are skewed towards projects which have been online for longer.\nI think more objective criteria should be used to include projects which importantly will allow new projects to gain good exposure and momentum. Such objective criteria could include:\n\nProject does not appear to be archived/abandoned\nProject includes open source license\nProject has a README clearly stating project purpose, dependencies and build process\nProject source can be browsed and cloned without registration\nProject permits issues/tickets to be raised\nProject has some form of documentation (however basic)\n\nA possible idea is to have a stricter set of criteria which earn the project a green 'Verified' flag in the package index and a higher ranking:\n\nProject contains complete documentation\nProject contains tests\nProject follows some standard best practices for portability"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:45:22+00:00",
                    "text": "I don't think we should use GitHub stars as a criterion. It was okay for the first step but we need something better now. I think we all agree that the number of GitHub stars is not a measure of relevence of a package.\nI also don't think we should include every GitHub Fortran project. Many repos could fall in that are either unusable or semi-usable, or they're a slight modification of another project.\nAs you say, we need to decide what makes a package relevant enough. I think some requirements should be:\n\nPure Fortran or mixed-language project where Fortran is the majority of the code (or > than some % of the code). This is somewhat arbitrary;\nEither installable by fpm (in the future) or includes install instructions in the repo;\nUnique: We shouldn't include packages that are a slight modification of an existing package. Including them could create confusion for the end user.\n\nMy guess is that based on these criteria, most packages that one would care submitting would be acceptable."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:48:15+00:00",
                    "text": "I agree with most ideas by @LKedward, except these:\n\nProject does not appear to be archived/abandoned\n\nI think we would be amiss to not include some mature legacy projects that aren't actively maintained. I can't think of any from the top of my head, but I'd bet there are.\n\nProject permits issues/tickets to be raised\n\nThis one may be too restrictive as it assumes a development platform. It would disqualify archived packages which I think may be important to list.\nBut of course, I'm yet to provide examples of worthwhile archived projects."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:06:08+00:00",
                    "text": "The proposed criteria from @LKedward and @milancurcic seem ok with me.\nI would like some criterion to exclude projects that literally just started and have no users and are not yet clear that they would be a good community project. As an example of such a project would be https://github.com/certik/allocate. I know that this project doesn't satisfy the other criteria either (e.g., doesn't have a README).\nHow about an additional criterion such as having at least 5 GitHub stars? A really low bar, but it would exclude some personal test projects such as the one I linked above."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:08:26+00:00",
                    "text": "An in addition, after we write down the criteria, I would say that it has to get at least 3 positive reviews from the fortran-lang community. That way we will simply judge each project on a case by case basis, and requiring 3 reviews should guarantee that we are fair."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 17:16:34+00:00",
                    "text": "I agree with all these points"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:19:11+00:00",
                    "text": "@LKedward if you have time, do you want to submit a PR with the document that has these rules?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 17:23:44+00:00",
                    "text": "@certik yep I can do that."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 15:51:29+00:00",
                    "text": "This was fixed in #26."
                }
            ]
        },
        {
            "number": 19,
            "user": "LKedward",
            "date": "2020-04-24 15:49:45+00:00",
            "title": "Fortran Packages",
            "text": "@milancurcic  These are the final edits for #18  that I didn't push. Sorry!",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:10:02+00:00",
                    "text": "Excellent, I love the styling, thank you.\nThe categories of packages look great. You're right about using sub-pages over one long page--I didn't realize how many packages there would be. And these aren't even all of them."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:11:10+00:00",
                    "text": "@certik take a look at the preview."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 16:26:02+00:00",
                    "text": "This is really awesome. The GitHub info (stars, license, issues, ...) take a long time to load for me (but that's good enough for now).\n+1 to merge as is.\nWe should also setup criteria how to include a package there --- right now the criterion I think was at least 29 stars at GitHub and Fortran as the majority language (as determined by GitHub). I would be for lowering the number of stars, for example if we lower to 15, then one of my other 100% Fortran project would qualify: https://github.com/certik/hfsolver  :), what is nice about this one is that it has all kinds of very good computational routines that could be useful for others. But if we lower the number of stars, then I want to do it in a systematic way, I want to see every single GitHub project included. I think we achieved it with the > 29 stars. I made this #20."
                }
            ]
        },
        {
            "number": 18,
            "user": "LKedward",
            "date": "2020-04-23 15:37:47+00:00",
            "title": "Add explore page for listing community projects.",
            "text": "Inspired by your comment @certik, I've put together a very simple and (hopefully) user-friendly community project index page.\nThe 'Development' top-level page has been replaced with an 'Explore' page which lists foremost the stdlib and fpm projects followed by a searchable index of community code packages also broken down by category.\nPackages are listed centrally by metadata in a yaml file, everything else is generated.\nI've populated a few popular packages to start off with.\nEventually this could involve some integration with FPM.\nSearch functionality is fairly rudimentary based on substrings.\nI've included automated badges for github stars etc. as done here, though do note they take some time to load due to the API - there might be a way to cache them, but I can't think how exactly.\nFeedback welcome.\nPreview this pull request statically here",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-23 16:37:50+00:00",
                    "text": "This is great, thank you so much @LKedward !\nWe need to ensure all the codes from https://github.com/fortran-lang/stdlib/wiki/List-of-popular-open-source-Fortran-projects are there.\nIt's great that it's in the yaml format, that way we can write scripts to sort them by the number of stars."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-23 16:47:17+00:00",
                    "text": "I love this, thank you Laurence for taking the initiative.\nI have a few high-level suggestions for now:\n\nPage and tab name: \"Explore\" seems a little vague to me. I expected that it meant \"Explore Fortran language\" which would be more like a tutorial. Should we use a more specific word here, perhaps \"Packages\"?\nFortran-lang organisation projects: I'd like to de-empasize \"organization\" and emphasize community. I suggest rewording this header as \"Fortran-lang community projects\", and adding this website and repo as the 3rd project. I'd like us to encourage people to discover this website as an editable and contributable project in motion, rather than a static place on the internet.\nFeatured community projects: Considering point above, then we should reword this to avoid confusion with this specific community (fortran-lang.org) and because not all projects listed are community projects. Perhaps a broader header, Featured open source projects is more appropriate.\n\nCategory sub-pages: I recommend not navigating to a level 3 sub-page for each category, but to have one longer page (level 2) that lists all categories and projects, with a hyperlinked category TOC at the top. Then the visitor could easily browse all categories and packages without navigating away. I personally start to get lost when websites have level 3 sub-page.\nSpecific categories: I don't think these categories work well. Specifically, they're all broad and have overlap between each other. I suggest having more specific and narrowly defined categories, like Linear Algebra, Simulation, Graphics, General purpose, and perhaps others.\n\n\n\nThe rewording suggestions are probably easy to implement here. If you agree, you can include them as part of this PR.\nFor others I suggest we open specific follow-up PRs to improve each part of the page."
                },
                {
                    "user": "certik",
                    "date": "2020-04-23 16:53:03+00:00",
                    "text": "This will really help the Fortran community. Later on some of these become part of fpm registry, etc. But for now this is what is needed."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 10:09:43+00:00",
                    "text": "Thanks for the comments!\n@milancurcic I agree with you re rewording - I'll update with your suggestions.\n\n\nCategory sub-pages: I recommend not navigating to a level 3 sub-page for each category, but to have one longer page (level 2) that lists all categories and projects, with a hyperlinked category TOC at the top. Then the visitor could easily browse all categories and packages without navigating away. I personally start to get lost when websites have level 3 sub-page.\n\n\nUnfortunately I disagree here. I personally find long scrolling pages difficult to navigate efficiently and therefore poor design. I think your point can be easily remedied using appropriate signposting (e.g. breadcrumbs; I will attempt to demonstrate this better here. We can discuss this in a separate issue for the site as a whole?\n\n\nSpecific categories: I don't think these categories work well. Specifically, they're all broad and have overlap between each other. I suggest having more specific and narrowly defined categories, like Linear Algebra, Simulation, Graphics, General purpose, and perhaps others.\n\n\nYep this is true - as I've added more packages, it's become clearer which categories to use and they are now more distinct. The category system is very extensible, so future PRs can refine easily.\n\nThis is great, thank you so much @LKedward !\nWe need to ensure all the codes from https://github.com/fortran-lang/stdlib/wiki/List-of-popular-open-source-Fortran-projects are there.\n\nThanks @certik, I've been through that whole list now; for this initial PR I've prioritised adding libraries and modules that would be of use to Fortran programmers over large domain-specific scientific applications. Having been through the list (and as you note also) I find that the number of stars is actually a poor indicator of package utility IMHO. I find they are much more like social media 'likes' - we see this in the skew towards large scientific applications, which are domain-specific and hence of limited utility to the wider Fortran community. We can discuss criteria for indexing packages in another issue?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 15:45:38+00:00",
                    "text": "This is good to go, I will merge. Great addition to the site!\nWe can discuss and refine any specifics in separate issues and PRs."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 15:48:06+00:00",
                    "text": "Hi @milancurcic , I didn't realise this had come out of draft status - I haven't pushed the final commits from my local repo!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:22:32+00:00",
                    "text": "Sorry, my bad, I misunderstood!"
                }
            ]
        },
        {
            "number": 17,
            "user": "LKedward",
            "date": "2020-04-22 14:50:16+00:00",
            "title": "Add Gemfile.lock to repo",
            "text": "A minor point, and I will defer to those with more experience with Ruby, however my understanding is that for non-library projects (no dependents) the lock file should be committed to the repository so that all contributors are building within the same environment. Repo lock files are only then updated when updated dependencies have been tested.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-22 14:59:56+00:00",
                    "text": "My experience with Ruby is near zero, just enough to get by. What you say makes sense, Rust does similarly.\nThis is most likely inconsequential because the site is built by GitHub, but I agree with committing Gemfile.lock to the repo."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-22 17:29:05+00:00",
                    "text": "This is most likely inconsequential because the site is built by GitHub...\n\nThis is actually an issue I think because the build is not strictly reproducible between the local copy and the GitHub build; so theoretically a local build could succeed but fail to build with GitHub when pushed.\nI see now that this is recommended for bundler so I'll do a PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-22 17:38:26+00:00",
                    "text": "You're right, my bad. I see why it's important to have a Gemfile.lock now."
                }
            ]
        },
        {
            "number": 16,
            "user": "LKedward",
            "date": "2020-04-22 14:45:44+00:00",
            "title": "Update: compilers page with Flang information.",
            "text": "Fixes #6",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-22 15:01:36+00:00",
                    "text": "This looks good to me. @certik would you add anything to the description?"
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-04-22 19:12:08+00:00",
                    "text": "I should point out, that it seems like only the F18 parser is complete. So to get an executable you would still have to use the \"old\" flang."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-22 19:33:05+00:00",
                    "text": "Good point. I'll update to re-include link to \"old\" flang."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 16:53:26+00:00",
                    "text": "@gklimowicz, is this a good wording for the Flang compilers?\nWe are trying list all Fortran compilers at https://fortran-lang.org/compilers/.\nRegarding the order, for open source compilers we should order based on the number of GitHub stars, so that should be this order:\nFlang https://github.com/llvm/llvm-project (4400)\nGFortran https://github.com/gcc-mirror/gcc (3700)\nLFortran https://github.com/lfortran/lfortran (131)\nYes, it's unfair to LFortran, as both Flang and GFortran are benefiting from being part of a large compiler collection, but I am ok with that for now.\nRegarding the commercial compilers, we should list them in the order of their relative usage, which we don't know, but we can do our best to estimate. (We plan to add all the commercial compilers eventually.)"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 19:00:28+00:00",
                    "text": "This was fixed in #24."
                },
                {
                    "user": "gklimowicz",
                    "date": "2020-04-24 19:03:55+00:00",
                    "text": "@certik Just as a comment after this issue was closed, I would suggest that, like the commercial compilers, you list the open source compilers in order of presumed use. That would suggest (for now), GFortran, Current Flang (it's Arm's commercial compiler), LFortran and new Flang."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 19:07:19+00:00",
                    "text": "@gklimowicz I've already done that here: #25. I listed both Flangs in front of LFortran (we can re-evaluate in a year). I agree that GFortran should be first, as I have done in #25."
                }
            ]
        },
        {
            "number": 15,
            "user": "jacobwilliams",
            "date": "2020-04-21 20:59:38+00:00",
            "title": "added updated favicon and the png used to create it.",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-21 21:11:06+00:00",
                    "text": "I am little confused by the diff ---- there is already a favicon.ico file, and you are replacing it, and yet the diff shows your favicon.ico as a new file. I would expect it would show replacing it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-21 21:43:10+00:00",
                    "text": "In my email I see it as modified:\nFile Changes\nA assets/img/fortran_logo_64x64.png (0)\nM favicon.ico (0)"
                },
                {
                    "user": "certik",
                    "date": "2020-04-21 21:44:01+00:00",
                    "text": "Ok. @milancurcic I'll let you merge this one."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-21 21:44:29+00:00",
                    "text": "https://raw.githubusercontent.com/jacobwilliams/fortran-lang.github.io/purple-favicon/favicon.ico\nLooks good! Thank you @jacobwilliams."
                }
            ]
        },
        {
            "number": 14,
            "user": "jacobwilliams",
            "date": "2020-04-21 02:59:43+00:00",
            "title": "added SVG file for purple logo",
            "text": "If you are interested, I added an Inkscape SVG file of the purple version of the logo. I also rerendered the png files so they look a bit less pixely now.\nI can make any other adjustments as necessary.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-21 03:26:15+00:00",
                    "text": "This is a big improvement, so I am going to merge it."
                },
                {
                    "user": "certik",
                    "date": "2020-04-21 03:27:34+00:00",
                    "text": "Can you also add a new version of https://github.com/fortran-lang/fortran-lang.github.io/blob/b1a92bee30a6b0454bc6ece006c1e1f8822a853d/favicon.ico ? That is what appears in the Tab in a browser and it would greatly help to have the white F instead of a transparent F for better visibility."
                },
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-21 13:45:23+00:00",
                    "text": "Yes I can do that later today."
                },
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-21 20:59:57+00:00",
                    "text": "see: #15"
                }
            ]
        },
        {
            "number": 13,
            "user": "milancurcic",
            "date": "2020-04-18 19:29:55+00:00",
            "title": "Change date format to %d %b %Y in news list",
            "text": "Currently the date in the news list on the landing page is formatted as %B %Y (example: \"February 2020\").\nFor multiple news items in a single month, it's helpful to see a day value as well.\nThis PR changes the date format to %d %b %Y so that we have something like:\n06 Apr 2020\n25 Feb 2020",
            "comments": []
        },
        {
            "number": 12,
            "user": "milancurcic",
            "date": "2020-04-18 19:12:16+00:00",
            "title": "add Fortran webinar newsletter post",
            "text": "This PR adds a newsletter post about the Open Source Directions Fortran webinar.\n@certik please review, edit as needed, and merge.",
            "comments": []
        },
        {
            "number": 11,
            "user": "Carreau",
            "date": "2020-04-18 04:41:40+00:00",
            "title": "Fix footer link to github site source.",
            "text": "",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-18 05:03:22+00:00",
                    "text": "Thank you Matthias!\n\u2026\nOn Fri, Apr 17, 2020, at 10:41 PM, Matthias Bussonnier wrote:\n\n You can view, comment on, or merge this pull request online at:\n\n #11\n\n Commit Summary\n\n  * Fix footer link to github site source.\n File Changes\n\n  * *M* _includes/footer.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/11/files#diff-7693eb643e8fe8b8d46b407909b408ce> (2)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/11.patch\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/11.diff\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#11>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWD3DZAGYSMALYMTFADRNEVQ7ANCNFSM4MLGM6MQ>."
                }
            ]
        },
        {
            "number": 10,
            "user": "milancurcic",
            "date": "2020-04-17 18:59:41+00:00",
            "title": "How to distribute newsletters?",
            "text": "See #3 first.\nHow should we distribute the newsletter, and specifically, should we have a mailing list?\nCurrently we have:\n\nFeed for RSS clients here: https://fortran-lang.org/news.xml\nTwitter: https://twitter.com/fortranlang, which we can further automate and have a GitHub bot post a tweet on a merged newsletter.\n\nRegarding mailing lists, I've used Google Groups (not sure if still exists) and Mailchimp (great features but a PITA to work with).\nUnless there's a really easy to set up and low maintenance mailing list solution, or we have a volunteer to do it, I'm not convinced that it's worthwhile doing this for the time being.\nWhat do you think?",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-17 19:15:03+00:00",
                    "text": "For LFortran we use groups.io, i.e. https://groups.io/g/lfortran.\nI agree Google Groups interface is really bad, especially if you do not use a gmail.\nThe GitHub issues work almost like a mailinglist.\nThe other options to use are Zulip: https://lfortran.zulipchat.com, or Gitter: https://gitter.im/sympy/sympy.\nThe advantage of a mailinglist is that you do not need to worry about closing an issue, so it's great for a general discussion or announcements. And you can use an email.\nI wondered for LFortran a lot, whether we need a mailinglist or not, initially we just setup Zulip. But later we created a mailinglist, so that I can post my updates there, and we can have a general discussion from time to time if needed.\nFor example: we should have a medium where we can announce the FortranCon, and other things and have means for people to discuss it. Twitter is one medium, but I think mailinglist is better than Twitter."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 19:22:43+00:00",
                    "text": "GitHub issues are great for developers with GitHub accounts and who want to follow everything about the development.\nZulip, Gitter, or Slack are good for development collaboration and building community, but they're not good for distributing newsletters and such.\nSo yes, for newsletters we need a low friction (just email signup) delivery like a mailing list.\nTwitter is better than mailing list for reaching people (non-subscribers can see it through the feed or retweets), but mailing list is better for discussion.\nHowever, would there be much discussion around news? It seems to me that the discussion would be centered more around a Chat (Zulip, Slack, etc.) or a Message Board (Discourse) format.\nGroups.io seems simple and no-nonsense on first look. If you like it, we should try using it."
                },
                {
                    "user": "certik",
                    "date": "2020-04-17 19:32:16+00:00",
                    "text": "If we decide to create a mailinglist, then groups.io is the best one I found.\nThe key question is:\n\nHowever, would there be much discussion around news? It seems to me that the discussion would be centered more around a Chat (Zulip, Slack, etc.) or a Message Board (Discourse) format.\n\nThat's what I didn't know initially either. The chat is less permanent, but the Discourse might be a good option. Discourse is probably the closest to a mailinglist.\nThe kind of discussions that people would have are visible e.g. here:\nhttps://groups.google.com/forum/#!forum/comp.lang.fortran\nYou can see that anyone can post an announcement of a new project or a new idea or a new conference, and then people can discuss and comment. I think it's very helpful in this respect.\nEssentially it would be the place to reach the Fortran community. Our CoC would apply to it, we would moderate it so that the discussions stay healthy."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 19:43:42+00:00",
                    "text": "We may be able to get a hosted Discourse instance for free: https://blog.discourse.org/2018/11/free-hosting-for-open-source-v2/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-22 15:01:08+00:00",
                    "text": "I agree, I think Twitter makes the most sense as an easy way to distribute.\nIn terms of discussion it would be good to have a central moderated and modern place for Fortran.\n(comp.lang.fortran is not moderated and I not too amenable for non-experts).\nI don't have much experience with different discussion mediums - the free Discourse instance sounds like it's worth a try?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-02 20:05:15+00:00",
                    "text": "The mailing list is in place thanks to @certik, and is now listed on the landing page.\nI also just applied for the free Discourse instance for open source projects. We should hear back about it in few days."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-05 20:16:29+00:00",
                    "text": "The Fortran Discourse instance is up: https://fortran-lang.discourse.group/\nIt's basically a self-managed, free instance of a modern message board.\nConsidering that in the meantime we also set up the mailing list, there's some overlap between the two as in that both facilitate discussion. Let's see how each works out and whether there's prevalent preference among the community for one or the other."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-05 20:22:31+00:00",
                    "text": "Awesome, cheers for setting it up @milancurcic!\nWe have RSS and twitter for distributing newsletters and mailing list and discourse for discussions - is this issue now resolved?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-05 20:57:19+00:00",
                    "text": "I think we can close it now. We have enough avenues now to have good solid engagement with the public and among ourselves and let's see how this goes and how we are using things. We might end up using both the mailinglist and the discourse."
                }
            ]
        },
        {
            "number": 9,
            "user": "LKedward",
            "date": "2020-04-17 15:47:34+00:00",
            "title": "Fix: get started link on home page.",
            "text": "Fixes #8",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 16:05:27+00:00",
                    "text": "Perfect, thanks! :)"
                }
            ]
        },
        {
            "number": 8,
            "user": "LKedward",
            "date": "2020-04-17 15:46:00+00:00",
            "title": "Broken 'Get Started' link on home page.",
            "text": "Apologies, broken by my recent tutorials PR.\nSee PR for fix.",
            "comments": []
        },
        {
            "number": 7,
            "user": "milancurcic",
            "date": "2020-04-16 15:41:12+00:00",
            "title": "Tutorial / Learn page",
            "text": "What should the learning page and tutorial look like?\nWhat should they cover?\nHow should they be organized?\nLet's discuss.\nFollow up from #5 .",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-16 16:12:47+00:00",
                    "text": "I like how Rust does it: https://www.rust-lang.org/learn\nThey have \"books\" on various subjects. So one book can be a general tutorial to Fortran, like at #5.\nAnother book can be the \"Best Practices\" from here:\nhttps://www.fortran90.org/src/best-practices.html\nwhere I collected some of the common idioms and how they should be done in the modern way.\nAnother book can be Python Fortran Rosetta Stone:\nhttps://www.fortran90.org/src/rosetta.html\nAnother can be FAQ:\nhttps://www.fortran90.org/src/faq.html\n..."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-19 09:34:06+00:00",
                    "text": "I agree, the Rust learn page is a very good example.\nI like the idea of having short online 'Books' for different topics.\nWe can easily add books as they are written and group them on the top-level Learn page by category.\nA possible structure:\n\n\nCategory: Getting started\n\nBook: Quickstart tutorial (existing tutorial)\nBook: Fortran FAQ (fortran90.org)\nBook: Fortran for Python programmers (fortran90.org)\nBook: Fortran for C/C++ programmers (see flang)\nBook: Fortran best practices (fortran90.org)\nBook: Fortran community style guide\n\n\n\nCategory: Core Language Documentation\n\nBook: Basic programming concepts (types, variables, constants, arrays, operators, expressions, character strings)\nBook: Program units (scoping units, programs, procedures, modules, submodules) and control flow (conditional and looping constructs)\nBook: Working with arrays (static, automatic, allocatable, pointer, passing/returning arrays to/from procedures)\nBook: Data input & output\n\n\n\nCategory Advanced Language Documentation\n\nBook: Object-oriented Fortran\nBook: Submodules\nBook: C interoperability\n\n\n\nThis makes it easy for people of different abilities to quickly find relevant documentation.\nGetting the structure perfect first time isn't important since we can adjust as content is added.\nThe core and advanced documentation should eventually cover the whole language in detail as a searchable and more accessible (easier-to-read) alternative to the standards documents.\nFinally there should be a section at the bottom of the learn page with links to external resources: books, standards documents, mailing lists, fortranwiki etc.\nWhat do you think?"
                },
                {
                    "user": "certik",
                    "date": "2020-04-19 13:09:10+00:00",
                    "text": "I agree.\n\u2026\nOn Sun, Apr 19, 2020, at 3:34 AM, LKedward wrote:\n\n\n I agree, the Rust learn page is a very good example.\n  I like the idea of having short online 'Books' for different topics.\n  We can easily add books as they are written and group them on the\n top-level Learn page by category.\n\n A possible structure:\n\n  * Category: Getting started\n\n    * Book: *Quickstart tutorial* (existing tutorial)\n    * Book: *Fortran FAQ* (fortran90.org)\n    * Book: *Fortran for Python programmers* (fortran90.org)\n    * Book: *Fortran for C/C++ programmers* (see flang)\n    * Book: *Fortran best practices* (fortran90.org)\n    * Book: *Fortran community style guide*\n  * Category: Core Language Documentation\n\n    * Book: *Basic programming concepts* (types, variables, constants,\n arrays, operators, expressions, character strings)\n    * Book: *Program units* (scoping units, programs, procedures,\n modules, submodules) and control flow (conditional and looping\n constructs)\n    * Book: *Working with arrays* (static, automatic, allocatable,\n pointer, passing/returning arrays to/from procedures)\n    * Book: *Data input & output*\n  * Category Advanced Language Documentation\n\n    * Book: *Object-oriented Fortran*\n    * Book: *Submodules*\n    * Book: *C interoperability*\n This makes it easy for people of different abilities to quickly find\n relevant documentation.\n  Getting the structure perfect first time isn't important since we can\n adjust as content is added.\n\n The core and advanced documentation should eventually cover the whole\n language *in detail* as a searchable and *more accessible*\n (easier-to-read) alternative to the standards documents.\n\n Finally there should be a section at the bottom of the learn page with\n links to external resources: books, standards documents, mailing lists,\n fortranwiki etc.\n\n What do you think?\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#7 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWGGDTDM23JYL5PED7TRNLARVANCNFSM4MJ2C3VQ>."
                },
                {
                    "user": "vansnyder",
                    "date": "2020-05-05 01:02:03+00:00",
                    "text": "I've never used GitHub. I can't find anything. A tutorial how to use GitHub in the Fortran project context would be useful."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-05 17:24:53+00:00",
                    "text": "Hi @vansnyder, I'm happy you joined. I assume you need help finding your way around GitHub and getting used to its interface. There is GitHub Help documentation, but to be honest I don't think it will be helpful. Instead, I recommend just exploring and trying to find your way through practice. It looks quite busy at first but you get used to it.\nIf you'd like, I'm happy to get on a Zoom video call with you to guide you via shared screen. Just let me know.\nOtherwise, the best place for you to start is the J3 Fortran proposals repo:\nhttps://github.com/j3-fortran/fortran_proposals/issues\nYou will find many discussion topics there, a few of them evolved into J3 papers. I suggest to read those, and post in whichever you want.\n\nBut your point also makes me think of this: We should probably have a dedicated \"Contributor's guide\" page on the website that would explain:\n\nWhat is where, e.g. proposals, standard library, package manager, website code etc.\nBasic workflow for each project. E.g. workflow for proposals is different from the workflow for stdlib or fpm, which is different from that of the website code;\nA list of items that we need help with the most from new contributors.\n\nThis info is basically already in each of the repositories. However, a dedicated single-page guide for all fortran-lang projects on the website would be helpful for people who aren't already proficient with GitHub. We want everybody who is willing to be able to join and participate.\nHow do we further lower barrier to entry?"
                },
                {
                    "user": "melissawm",
                    "date": "2020-05-14 18:50:35+00:00",
                    "text": "I'd like to link this issue from stdlib. I think many of the points I raised there are valid here.\nI'd also like to offer to write the Contributor's Guide."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-15 17:58:37+00:00",
                    "text": "Like what @arjenmarkus said on the mailing list. the quickstart tutorial needs work and is IMO the highest priority to get into a somewhat polished and complete state.\nI will open a dedicated issue for that later today so we can discuss the contents and style."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-16 19:40:59+00:00",
                    "text": "@melissawm Great, a contributor's guide is direly needed if we are to attract new contributors.\nAre you thinking of a contributor's guide specifically for this repo, or for fortran-lang projects as a whole?\nEach project should have its own contributor's guide. This repo has this. Can you please take a look at it and think of how it could be improved?\nFurther, what do you think about having an overall contributor's guide which would be a page on the website, basically a guide to contributing to the community project as a whole, and then linking to individual project contributor guides?"
                }
            ]
        },
        {
            "number": 6,
            "user": "ivan-pi",
            "date": "2020-04-15 14:50:14+00:00",
            "title": "F18 information outdated",
            "text": "It seems that the F18 front-end branch has been accepted as the brand new flang and is part of the official LLVM project. The former flang compiler still exists here.\nI can take a shot at updating the page in the upcoming days, if no one else does it first.",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-15 18:20:41+00:00",
                    "text": "Absolutely, let's fix it!"
                },
                {
                    "user": "certik",
                    "date": "2020-04-15 19:36:39+00:00",
                    "text": "Yes, I think it should be just called Flang."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-25 09:03:45+00:00",
                    "text": "@ivan-pi I believe this was fixed with #16 and can be closed?"
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-04-25 11:10:02+00:00",
                    "text": "Sure. Great work!"
                }
            ]
        },
        {
            "number": 5,
            "user": "LKedward",
            "date": "2020-04-15 14:36:22+00:00",
            "title": "Start tutorials",
            "text": "I've added a stylesheet to enable syntax highlighting and made a start on writing tutorials.\nI've put a static preview here to make it easier to view this draft pull request.\nMy idea is to have self-contained tutorials targeting three different programming abilities:\n\n\nFor beginners: quite common to see undergraduates with little programming experience asked to pick up Fortran for science//engineering degrees\n\n\nIntermediate: for those with basic programming experience using another language like c or python\n\n\nAdvanced: for those who just want to pick up the Fortran syntax and advanced features (OOP etc.)\n\n\nI also think the Learn section can contain other articles for things like best practices and advanced/niche topics etc.\nI'm happy to put work into filling this out since compared to other programming languages there are fewer good quality online tutorials and examples which makes it less accessible.\nHappy to hear feedback and ideas.\nThanks for work so far @milancurcic, the site is looking good!",
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-15 18:19:16+00:00",
                    "text": "Super nice work, thank you! I like most of it. I have some doubts about the 3-level categories of tutorials. I will write more tonight."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-16 15:39:39+00:00",
                    "text": "@certik Yes, I think so."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-16 17:08:56+00:00",
                    "text": "Thanks for the comments @milancurcic; you make some very good points which I agree with.\nIt shouldn't take long for me to consolidate current content onto the top page by tomorrow morning ready for merging."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-17 11:33:36+00:00",
                    "text": "I have completed the consolidated content (preview).\nFor review I ask:\n\nIf I have missed out any fundamental Fortran features?\nWhat technique should be recommended for real kinds?\n\nkind(0.0), kind(0.0d0)\niso_c_binding, only: c_float, c_double\niso_fortran_env, only: real32, real64"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 14:00:34+00:00",
                    "text": "Regarding your question about kinds, here's what we're currently doing in stdlib. This may change in the future, of course.\nThe higher level issue related to this is the Style Guide. There's currently a very minimal style guide in the stdlib repo, however, I think we should work on a Style Guide here (like a PEP8 for Python) that would then apply to all fortran-lang community projects."
                }
            ]
        },
        {
            "number": 4,
            "user": "milancurcic",
            "date": "2020-04-12 22:26:06+00:00",
            "title": "begin may 2020 newsletter draft",
            "text": "Draft newsletter for May 2020.\nTo be merged into master on May 1. Work on it until then.",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:29:14+00:00",
                    "text": "This should list all the news items that happened since the last newsletter."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-29 16:50:43+00:00",
                    "text": "First draft of May newsletter is up. Please review and suggest edits and/or additions. If you add content, please also add your name to the author field in the preamble.\nThis will be merged into master on Friday, May 1."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-29 17:46:13+00:00",
                    "text": "@jacobwilliams Do you have any Fortran positions open in your company to list here?"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-04-30 05:50:24+00:00",
                    "text": "Question: could projects like your Fortran-Keras Bridge project be mentioned in this news letter?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-30 16:25:36+00:00",
                    "text": "@certik I added a section on WG5 convenor candidates and minor updates to stdlib news. Please review and edit as you see fit. I'm otherwise happy with this newsletter."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:26:29+00:00",
                    "text": "I am ok with the wording for my WG5 run."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:27:41+00:00",
                    "text": "Please do not merge yet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-30 16:39:22+00:00",
                    "text": "@jvdp1 Good question. We discussed the scope to a limited extent in #3 .\nI don't know the answer. Originally I thought that personal projects should be out of scope for the newsletter. On the other side, it would be useful for readers to learn of new projects. They would need to be submitted for consideration, i.e. we don't want to list small toy projects that don't build or have docs. There would need to be some criterion on how to do this, like we have for including packages in the registry. I'm curious to hear what other think. Please write in #3. We don't have to rush for this newsletter, obviously we don't have a good idea yet how to do this.\nThis makes me think of another question: Should we include relevant (Fortran) new papers? I think yes if they're open access. Again, write in #3"
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:42:27+00:00",
                    "text": "I would not delay this first newsletter, and I would not include personal projects yet. Let's figure out a process for that, and then we can list them in future newsletters.\nThe same with the job postings, it's kind of arbitrary now, but I think it's fine to list what is in there now to get started. None of these are \"our\" postings, so nobody will feel that we are just pushing our pet projects."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-30 16:47:58+00:00",
                    "text": "Yes, conflict of interest (even non-financial kind) is my main concern for announcing personal projects or job postings. We need a well documented process for this."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 17:00:29+00:00",
                    "text": "Yes, our main goal and job is to create home for Fortran, a community, tools, a platform for everybody, so we have to be very careful about conflicts of interest. We are in agreement."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-04-30 17:19:11+00:00",
                    "text": "I agree about conflicts of interest. Let see first how the people react to this newsletter."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-01 13:38:01+00:00",
                    "text": "Thank you all. The newsletter is up: https://fortran-lang.org/newsletter/2020/05/01/Fortran-Newsletter-May-2020/. Please share it."
                },
                {
                    "user": "certik",
                    "date": "2020-05-01 19:30:29+00:00",
                    "text": "Thanks @milancurcic !"
                }
            ]
        },
        {
            "number": 3,
            "user": "milancurcic",
            "date": "2020-04-11 12:17:09+00:00",
            "title": "Newsletter",
            "text": "Let's discuss what should the fortran-lang newsletters be and how we should work on them.\nI posted an example newsletter in #2 yesterday. You can see the post here and the source file here. With Jekyll, like with most popular static site generators, you write posts in plain markdown, with html for any extras.\nTopics\nFirst, what topics/news should be covered by the newsletter. Here's my idea:\n\nEvents: conferences, meetups, and similar. These could be either announcements for upcoming events or briefings/reports from events that happened. They should be related to Fortran. A NumPy or weather prediction conference is probably off-topic. Fortran or HPC meetings are on topic.\nUpdates from J3 and WG5 meetings and developments of the language. Highlight proposals discussed. Like what @certik has been posting directly in issues in j3-fortran/fortran_proposals.\nFortran compiler releases\nNew development in fortran-lang projects: For example, highlighting new modules or functions in stdlib, or new fpm capability.\nNew packages available in the fpm registry.\nLast but not least, new Fortran releases (202x, 202y...). This one's pretty obvious. :)\nAnything else?\n\nWhat I think should be off-topic and omitted in newsletters:\n\nPersonal (non-community) Fortran projects, except listing them when they're added to the fpm registry.\nNews not directly about Fortran but that could be interesting to Fortran developers. Stuff about other languages etc.\n\nFormat\nI think we could have two kinds of newsletters:\n\nOff-schedule, topic-specific. This kind of newsletter covers only one item that is noteworthy. Examples: Fortran meetings, language releases, perhaps even compiler releases.\nMonthly, recurring. This kind of newsletter comes out periodically at the beginning of each month, summarizing the Fortran development and news from the previous month. It's formatted more as a summary rather than an in-depth coverage of a topic, so it can include on-topic odds and ends.\n\nHow should we work on it\nHere's what I propose:\n\nAnybody can open a PR for a newsletter\nMust assign a reviewer/editor. Can assign more than one if desired, ideally not too many. You don't want to have to wait for 5 people to review if you want timely news to go out.\nOf course, anybody can comment. If somebody thinks a PR doesn't make appropriate newsletter, they should say so.\nFor a monthly recurring newsletter, I suggest we open a draft PR at the beginning of each month, and we work on it as the month goes and new stuff happens. At the end of the month, we clean it up and merge.\n\nObviously, my PR #2 was not an example of this workflow. I just wanted to get something up quickly to use as an example.\nWe can automate posting of new newsletters to the @fortranlang Twitter using this. For people who use RSS readers, we have a feed on the website.\nWhat do you think? @certik @jvdp1 @ivan-pi @everythingfunctional @jacobwilliams @marshallward @zbeekman",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-11 14:53:07+00:00",
                    "text": "I agree with everything you wrote. This is a good start. As we go, we can further refine or relax some of the rules.\n\u2026\nOn Sat, Apr 11, 2020, at 6:17 AM, Milan Curcic wrote:\n\n\n Let's discuss what should the fortran-lang newsletters be and how we\n should work on them.\n\n I posted an example newsletter in #2\n <#2>\n yesterday. You can see the post here\n <https://fortran-lang.org/newsletter/2020/04/06/Announcing-FortranCon-2020/> and the source file here <https://raw.githubusercontent.com/fortran-lang/fortran-lang.github.io/master/_posts/2020-04-06-Announcing-FortranCon-2020.md>. With Jekyll, like with most popular static site generators, you write posts in plain markdown, with html for any extras.\n\n Topics\n\n First, what topics/news should be covered by the newsletter. Here's my idea:\n\n  * Events: conferences, meetups, and similar. These could be either\n announcements for upcoming events or briefings/reports from events that\n happened. They should be related to Fortran. A NumPy or weather\n prediction conference is probably off-topic. Fortran or HPC meetings\n are on topic.\n  * Updates from J3 and WG5 meetings and developments of the language.\n Highlight proposals discussed. Like what @certik\n <https://github.com/certik> has been posting directly in issues in\n j3-fortran/fortran_proposals.\n  * Fortran compiler releases\n  * New development in fortran-lang projects: For example, highlighting\n new modules or functions in stdlib, or new fpm capability.\n  * New packages available in the fpm registry.\n  * Last but not least, new Fortran releases (202x, 202y...). This one's\n pretty obvious. :)\n  * Anything else?\n What I think should be off-topic and omitted in newsletters:\n\n  * Personal (non-community) Fortran projects, except listing them when\n they're added to the fpm registry.\n  * News not directly about Fortran but that could be interesting to\n Fortran developers. Stuff about other languages etc.\n Format\n\n I think we could have two kinds of newsletters:\n\n  * Off-schedule, topic-specific. This kind of newsletter covers only\n one item that is noteworthy. Examples: Fortran meetings, language\n releases, perhaps even compiler releases.\n  * Monthly, recurring. This kind of newsletter comes out periodically\n at the beginning of each month, summarizing the Fortran development and\n news from the previous month. It's formatted more as a summary rather\n than an in-depth coverage of a topic, so it can include on-topic odds\n and ends.\n How should we work on it\n\n Here's what I propose:\n\n  * Anybody can open a PR for a newsletter\n  * Must assign a reviewer/editor. Can assign more than one if desired,\n ideally not too many. You don't want to have to wait for 5 people to\n review if you want timely news to go out.\n  * Of course, anybody can comment. If somebody thinks a PR doesn't make\n appropriate newsletter, they should say so.\n  * For a monthly recurring newsletter, I suggest we open a draft PR at\n the beginning of each month, and we work on it as the month goes and\n new stuff happens. At the end of the month, we clean it up and merge.\n Obviously, my PR #2\n <#2> was not\n an example of this workflow. I just wanted to get something up quickly\n to use as an example.\n\n I will do some research how we can automate posting of new newsletters\n to the @fortranlang Twitter automatically, perhaps via GitHub Actions.\n For people who use RSS readers, we have a feed on the website.\n\n What do you think? @certik <https://github.com/certik> @jvdp1\n <https://github.com/jvdp1> @ivan-pi <https://github.com/ivan-pi>\n @everythingfunctional <https://github.com/everythingfunctional>\n @jacobwilliams <https://github.com/jacobwilliams> @marshallward\n <https://github.com/marshallward> @zbeekman\n <https://github.com/zbeekman>\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#3>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWGVXFLSFXIVUCOQN43RMBNVDANCNFSM4MF7KBSQ>."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-04-11 17:55:20+00:00",
                    "text": "That sounds well thought out and reasonable. I like it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-12 21:51:59+00:00",
                    "text": "I just thought it'd also be useful for the monthly newsletter to have a list of Fortran job postings."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 15:54:06+00:00",
                    "text": "The first newsletter is on the way at #4. Before we close this issue, let's create a document with information how the newsletter works. @milancurcic do you want to take a stab at that?"
                }
            ]
        },
        {
            "number": 2,
            "user": "milancurcic",
            "date": "2020-04-11 00:57:14+00:00",
            "title": "Update FortranCon post",
            "text": "",
            "comments": []
        },
        {
            "number": 1,
            "user": "milancurcic",
            "date": "2020-04-10 15:13:45+00:00",
            "title": "Update J3 February meeting update",
            "text": "@certik When you have some time, can you please post your J3 February meeting update in this file:\nhttps://github.com/fortran-lang/fortran-lang.github.io/blob/master/_posts/2020-02-25-J3-february-meeting.md",
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-10 15:57:42+00:00",
                    "text": "Yes! Thank you. I'll do it very soon."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 15:55:39+00:00",
                    "text": "This has been fixed in #29, #30 and #42. The result is visible at:\nhttps://fortran-lang.org/newsletter/2020/02/28/J3-february-meeting/"
                }
            ]
        }
    ]
}